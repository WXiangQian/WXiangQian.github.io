<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>盘点2021年PHP开发工程师遇到的面试题</title>
      <link href="2021/06/04/php/%E7%9B%98%E7%82%B92021%E5%B9%B4PHP%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%81%87%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>2021/06/04/php/%E7%9B%98%E7%82%B92021%E5%B9%B4PHP%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%81%87%E5%88%B0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>好长时间没有写技术实战文章了，是因为最近在准备面试，分享一下在2021年找工作中遇到的问题，没有具体到公司名，只有个别公司拿到了offer。有些问题模糊的想不起来了，暂时能想到的就这些。</p></blockquote><p>面试岗位基本都为：3-5年工作经验，纯技术问题。</p><h2 id="某房产上市公司广告部门"><a href="#某房产上市公司广告部门" class="headerlink" title="某房产上市公司广告部门"></a>某房产上市公司广告部门</h2><h3 id="一面-电面"><a href="#一面-电面" class="headerlink" title="一面(电面)"></a>一面(电面)</h3><p>主要围绕mysql索引、redis、项目亮点去问的</p><h3 id="二面-线下"><a href="#二面-线下" class="headerlink" title="二面(线下)"></a>二面(线下)</h3><p>考察mysql explain的具体每一列<br>mysql使用的什么索引？为什么使用B+树索引？B+和B数和二叉树的区别<br>什么叫索引覆盖<br>什么情况下回表<br>事务的ACID特性<br>事务的隔离级别<br>redis主从同步怎么做的<br>怎么找出单向链表中，位于中间的元素<br>单链表中，如何检查是否有环的情况？比如：1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;3<br>一个有序数组，里面是从1到1000000的整数，器重又一个数字出现了两次，如何快读找出那个重复的数字？</p><h3 id="三面-电面"><a href="#三面-电面" class="headerlink" title="三面(电面)"></a>三面(电面)</h3><p>redis主从同步怎么做的<br>redis cluster哨兵模式的了解<br>redis队列什么时候会跳表<br>mysql  hash索引与b+的区别<br>事务的隔离级别、mvcc的实现原理<br>hash表底层结构是什么</p><h2 id="某P图上市公司广告部门"><a href="#某P图上市公司广告部门" class="headerlink" title="某P图上市公司广告部门"></a>某P图上市公司广告部门</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>OSI七层模型<br>array_cloum函数的考察<br>mysql explain的优化<br>nginx怎么与php的通信的<br>php-fpm主进程kill -9掉、子进程是否能正常使用<br>innodb和myisam有什么区别？<br>mysql主从的生命周期<br>redis的五中类型实战场景<br>mysql索引失效的条件<br>php7的新特性</p><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><p>进程、线程和协程的区别<br>一个域名解析的生命周期<br>秒杀的设计与实现<br>select poll epoll 区别<br>分销的过程中出现错误怎么处理<br>主从同步是怎么保证数据性一致的<br>实现一个单链表的反转1-&gt;2-&gt;3-&gt;4-&gt;5</p><h2 id="某上市在线教育公司"><a href="#某上市在线教育公司" class="headerlink" title="某上市在线教育公司"></a>某上市在线教育公司</h2><h3 id="一面-电面-1"><a href="#一面-电面-1" class="headerlink" title="一面(电面)"></a>一面(电面)</h3><p>PHP的foreach和for两个循环，哪个效率更高，为什么<br>mysql 聚合索引什么时候使用到<br>mysql索引失效的条件<br>redis和memache的区别<br>laravel中双事物怎么实现的<br>redis延时队列<br>git两个分支合并让他的线在一条上<br>事务的隔离级别、mvcc的实现原理</p><h2 id="某C轮房产行业"><a href="#某C轮房产行业" class="headerlink" title="某C轮房产行业"></a>某C轮房产行业</h2><h3 id="一面-电面-2"><a href="#一面-电面-2" class="headerlink" title="一面(电面)"></a>一面(电面)</h3><p>秒杀的设计与实现<br>介绍自己项目的亮点<br>Explain的优化</p><h3 id="二面-线下-1"><a href="#二面-线下-1" class="headerlink" title="二面(线下)"></a>二面(线下)</h3><p>分布式锁、会不会出现死锁，怎么避免<br>优惠券、膨胀券功能表设计与实现逻辑<br>砍价以及助力的功能设计与实现<br>千万级数据表的优化与分表<br>统计出TCP端口状态是ESTAB的数量<br>502是什么，为什么会出现，解决方案<br>Explain的优化<br>如果用户表已达到1000w的规则，且日均增长5w，如何优化该表<br>jwt与oauth2区别</p><h3 id="三面-电面-1"><a href="#三面-电面-1" class="headerlink" title="三面(电面)"></a>三面(电面)</h3><p>聊一下自己项目有亮点的case<br>讲讲mysql优化方面（从建表到各种场景，怎么解决的）<br>redis五种数据类型都是做什么的，对比他们的区别，使用场景<br>分布式锁<br>数据库分表有哪种方式<br>水平分表有哪几种维度分表，每一个的优点和缺点<br>如何对比两个文件的内容是否一样</p><h2 id="某保姆行业"><a href="#某保姆行业" class="headerlink" title="某保姆行业"></a>某保姆行业</h2><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><p>设计一个登录系统(用到的设计模式、封装的类)<br>502是什么，为什么会出现，解决方案<br>一个500w行的文件，每行是一个url，读取url内容找到所有a标签里面的href内容，并存到库里。写一下整个流程<br>短链接的实现方法与设计<br>日常使用到的设计模式以及场景<br>Explain的优化<br>https ssl的工作流程</p><h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><p>trait类的作用以及是干什么的<br>单元测试<br>大多数聊的都是业务场景<br>如何开发的composer包，流程说一下<br>Explain的优化</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><p>大部分问题可以自行百度去学习，就不一一列举答案了<br><a href="https://wxiangqian.blog.csdn.net/">个人的博客文章</a><br><a href="https://www.kancloud.cn/martist/phper-will-get-bat-tmd-offer-in-2021">PHPer面试2021</a><br><a href="https://www.kancloud.cn/@martist">martist的看云地址</a></p><blockquote><p>martist是我工作中的领导，生活中的哥哥，给予了我很多帮助与鼓励，martist目前在百度工作，有需要内推的可以csdn私信我，帮你们牵线</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下centos配置网卡ip地址、网关、DNS信息</title>
      <link href="2021/05/26/linux/Linux%E4%B8%8Bcentos%E9%85%8D%E7%BD%AE%E7%BD%91%E5%8D%A1ip%E5%9C%B0%E5%9D%80%E3%80%81%E7%BD%91%E5%85%B3%E3%80%81DNS%E4%BF%A1%E6%81%AF/"/>
      <url>2021/05/26/linux/Linux%E4%B8%8Bcentos%E9%85%8D%E7%BD%AE%E7%BD%91%E5%8D%A1ip%E5%9C%B0%E5%9D%80%E3%80%81%E7%BD%91%E5%85%B3%E3%80%81DNS%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="查看网卡信息"><a href="#查看网卡信息" class="headerlink" title="查看网卡信息"></a>查看网卡信息</h3><pre><code>ifconfig</code></pre><p><img src="https://img-blog.csdnimg.cn/20210413143030577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>ip地址为：192.168.18.200，网关为：255.255.255.0</p></blockquote><h3 id="修改网卡信息"><a href="#修改网卡信息" class="headerlink" title="修改网卡信息"></a>修改网卡信息</h3><p>切换到指定目录下</p><pre><code>cd  /etc/sysconfig/network-scripts/</code></pre><p><code>ls</code>寻找自己的网卡信息，因<code>ifconfig</code>看到的是enp5s0，则去<code>vi</code>打开去修改</p><pre><code>vi ifcfg-enp5s0</code></pre><p><img src="https://img-blog.csdnimg.cn/20210413140145434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="详解enp5s0的内容"><a href="#详解enp5s0的内容" class="headerlink" title="详解enp5s0的内容"></a>详解enp5s0的内容</h3><p><img src="https://img-blog.csdnimg.cn/20210413140453984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>DEVICE=enp5s0 #描述网卡对应的设备别名，例如ifcfg-enp5s0的文件中它为enp5s0BOOTPROTO=static #设置网卡获得ip地址的方式，可能的选项为static，dhcp或bootp，分别对应静态指定的 ip地址，通过dhcp协议获得的ip地址，通过bootp协议获得的ip地址IPADDR=192.168.18.200 #如果设置网卡获得 ip地址的方式为静态指定，此字段就指定了网卡对应的ip地址NETMASK=255.255.255.0 #网卡对应的网络掩码GATEWAY=192.168.18.1#网卡对应的网络地址IPV6INIT=yesIPV6_AUTOCONF=yesONBOOT=yes #系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备</code></pre><h3 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h3><p>使用service network restart命令，重启网络服务。</p><pre><code>service network restart</code></pre><h3 id="修改DNS配置文件"><a href="#修改DNS配置文件" class="headerlink" title="修改DNS配置文件"></a>修改DNS配置文件</h3><pre><code>vi /etc/resolv.conf</code></pre><p>添加以下信息</p><pre><code>nameserver 114.114.114.114</code></pre><blockquote><p> 114.114.114.114是国内移动、电信和联通通用的DNS，手机和电脑端都可以使用，干净无广告，解析成功率相对来说更高，国内用户使用的比较多，而且速度相对快、稳定，是国内用户上网常用的DNS.</p></blockquote><p>修改后可即时生效</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用hhxsv5/laravel-s的异步任务队列</title>
      <link href="2021/01/05/laravel/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hhxsv5-laravel-s%E7%9A%84%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/"/>
      <url>2021/01/05/laravel/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hhxsv5-laravel-s%E7%9A%84%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>如果你还没有安装<code>hhxsv5/laravel-s</code>，可以跳转去安装<br><a href="https://wxiangqian.blog.csdn.net/article/details/110532521">laravel下安装laravels以及websocket的使用</a></p><blockquote><p>此特性依赖Swoole的AsyncTask，必须先设置config/laravels.php的<code>swoole.task_worker_num</code>。异步任务的处理能力受Task进程数影响，需合理设置<a href="https://wiki.swoole.com/#/server/setting?id=task_worker_num">task_worker_num</a>。</p></blockquote><h3 id="创建任务类"><a href="#创建任务类" class="headerlink" title="创建任务类"></a>创建任务类</h3><pre><code>&lt;?php/** * Created by PhpStorm. * User: wxiangqian */namespace App\Tasks;use Hhxsv5\LaravelS\Swoole\Task\Task;use Illuminate\Support\Facades\Log;class TestTask extends Task{    private $data;    private $result;    public function __construct($data)    {        $this-&gt;data = $data;    }    // 处理任务的逻辑，运行在Task进程中，不能投递任务    public function handle()    {        Log::info(__CLASS__ . ':handle start', [$this-&gt;data]);        sleep(2);// 模拟一些慢速的事件处理        // 此处抛出的异常会被上层捕获并记录到Swoole日志，开发者需要手动try/catch        $this-&gt;result = 'the result of ' . $this-&gt;data;    }    // 可选的，完成事件，任务处理完后的逻辑，运行在Worker进程中，可以投递任务    public function finish()    {        \Log::info(__CLASS__ . ':finish start', [$this-&gt;result]);        Task::deliver(new TestTask2('task2')); // 投递其他任务    }}</code></pre><h3 id="投递任务"><a href="#投递任务" class="headerlink" title="投递任务"></a>投递任务</h3><pre class=" language-lang-php"><code class="language-lang-php">// 实例化TestTask并通过deliver投递，此操作是异步的，投递后立即返回，由Task进程继续处理TestTask中的handle逻辑use Hhxsv5\LaravelS\Swoole\Task\Task;$task = new TestTask('task data');// $task->delay(3); // 延迟3秒投递任务// $task->setTries(3); // 出现异常时，累计尝试3次$ret = Task::deliver($task);var_dump($ret);// 判断是否投递成功</code></pre><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>报错：Class swoole does not exist</p><ul><li>在LaravelS中，Swoole是以cli模式启动的Http Server，替代了FPM。</li><li>投递任务、触发异步事件都会调用app(‘swoole’)，从Laravel容器中获取Swoole\http\server实例。只有在LaravelS启动时，才会注入这个实例到容器中。</li><li>所以，一旦脱离LaravelS，由于跨进程，以下情况，你将无法成功调用app(‘swoole’)：<ul><li>以各种命令行方式运行的代码，例如Artisan命令行、PHP脚本命令行；</li><li>运行在FPM/Apache PHP Module下的代码，查看SAPI Log::info(‘PHP SAPI’, [php_sapi_name()]);。</li></ul></li></ul><blockquote><p>ps: 应通过websocket连接的形式去投递任务</p></blockquote><p>websocket的使用跳转上篇文章：<a href="https://wxiangqian.blog.csdn.net/article/details/110532521">laravel下安装laravels以及websocket的使用</a><br>修改onMessage中的代码即可测试</p><pre class=" language-lang-php"><code class="language-lang-php">public function onMessage(Server $server, Frame $frame){     $task = new TestTask('task data');      // $task->delay(3); // 延迟3秒投递任务      // $task->setTries(3); // 出现异常      $ret = Task::deliver($task);      $server->push($frame->fd, $ret);}</code></pre><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>希望本文可以帮助大家学习如何使用异步任务队列。👍</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel/telescope望远镜在laravel6下安装以及使用</title>
      <link href="2020/12/17/laravel/laravel-telescope%E6%9C%9B%E8%BF%9C%E9%95%9C%E5%9C%A8laravel6%E4%B8%8B%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>2020/12/17/laravel/laravel-telescope%E6%9C%9B%E8%BF%9C%E9%95%9C%E5%9C%A8laravel6%E4%B8%8B%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p><a href="https://github.com/laravel/telescope">Telescope</a> 是一个非常优雅的调试助手，提供了非常丰富的 Debug 功能，给开发及调试带来了极大的方便，如果你一直使用 Clockwork 或者 Laravel Debugbar 进行项目的调试，那么现在又多了一个新的选择。不过目前看来扩展包应该只支持 Laravel 5.7 及以上的版本，这节课我们在一个 5.7 的项目中快速安装测试一下。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>目前扩展包要求 Laravel 的版本大于 ~<code>5.7.7</code>所以可以使用 composer update 更新更新一下你的版本，我当前使用的 Laravel 是 <code>6.18.10</code>。</p><pre><code>composer require laravel/telescope</code></pre><blockquote><p>ps: 如果你使用的laravel版本是8以下，则会提示框架版本过低<br><img src="https://img-blog.csdnimg.cn/20201210143053648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="安装"></p></blockquote><p>建议去<a href="https://packagist.org/packages/laravel/telescope">packagist.org</a>去寻找适合自己版本的包版本，这里我选用的是<code>v3.5.1</code></p><pre><code> composer require laravel/telescope:v3.5.1</code></pre><h2 id="执行扩展包的安装命令"><a href="#执行扩展包的安装命令" class="headerlink" title="执行扩展包的安装命令"></a>执行扩展包的安装命令</h2><pre><code>php artisan telescope:install</code></pre><pre><code>php artisan migrate</code></pre><p><img src="https://img-blog.csdnimg.cn/20201210143449374.png" alt="执行扩展包的安装命令"><br>这时候可以看到新增了3个数据库<br><img src="https://img-blog.csdnimg.cn/20201210143543766.png" alt="mysql表"></p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>直接访问 <code>域名/telescope</code>就可以看到 Telescope 的界面了。</p><p><img src="https://img-blog.csdnimg.cn/20201210143750366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="Telescope界面"><br>因项目在本地环境跑， <code>APP_ENV=local</code>，用户可以随便访问这个界面</p><h2 id="清理数据"><a href="#清理数据" class="headerlink" title="清理数据"></a>清理数据</h2><p>如果没有清理的话，telescope_entries  表会迅速累积记录。要缓解这一现状，需要通过调度任务每天运行 Artisan 命令 telescope:prune 来清理老数据：</p><pre><code>$schedule-&gt;command('telescope:prune')-&gt;daily();</code></pre><p>默认情况下，所有 24 小时之前的数据都会被清理，你可以在运行上述命令的时候使用 hours 选项来决定要保存多长时间以内的 Telescope 数据。例如，下面这个命令将会删除所有 48 小时以前创建的数据：</p><pre><code>$schedule-&gt;command('telescope:prune --hours=48')-&gt;daily();</code></pre><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>更多技巧可以查看<a href="https://laravel.com/docs/6.x/telescope">官方文档</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel下安装laravels以及websocket的使用</title>
      <link href="2020/12/10/laravel/laravel%E4%B8%8B%E5%AE%89%E8%A3%85laravels%E4%BB%A5%E5%8F%8Awebsocket%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/12/10/laravel/laravel%E4%B8%8B%E5%AE%89%E8%A3%85laravels%E4%BB%A5%E5%8F%8Awebsocket%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>laravel下安装laravels以及websocket的使用</p><blockquote><p>🚀 LaravelS 是 Swoole 和 Laravel/Lumen 之间开箱即用的适配器。</p></blockquote><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><div class="table-container"><table><thead><tr><th>依赖</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://secure.php.net/manual/zh/install.php">PHP</a></td><td><code>&gt;= 5.5.9</code> <code>推荐PHP7+</code></td></tr><tr><td><a href="https://www.swoole.com/">Swoole</a></td><td><code>&gt;= 1.7.19</code> <code>从2.0.12开始不再支持PHP5</code> <code>推荐4.2.3+</code></td></tr><tr><td><a href="https://laravel.com/">Laravel</a>/<a href="https://lumen.laravel.com/">Lumen</a></td><td><code>&gt;= 5.1</code> <code>推荐5.6+</code></td></tr></tbody></table></div><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.通过<a href="https://getcomposer.org/">Composer</a>安装(<a href="https://packagist.org/packages/hhxsv5/laravel-s">packagist</a>)。有可能找不到<code>3.0</code>版本，解决方案移步<a href="https://github.com/hhxsv5/laravel-s/issues/81">#81</a>。</p><pre class=" language-lang-bash"><code class="language-lang-bash">composer require "hhxsv5/laravel-s:~3.7.0" -vvv# 确保你的composer.lock文件是在版本控制中</code></pre><p>2.注册Service Provider（以下两步二选一）。</p><ul><li><p><code>Laravel</code>: 修改文件<code>config/app.php</code>，<code>Laravel 5.5+支持包自动发现，你应该跳过这步</code></p><pre class=" language-lang-php"><code class="language-lang-php">  'providers' => [      //...      Hhxsv5\LaravelS\Illuminate\LaravelSServiceProvider::class,  ],</code></pre></li><li><p><code>Lumen</code>: 修改文件<code>bootstrap/app.php</code></p><pre class=" language-lang-php"><code class="language-lang-php">  $app->register(Hhxsv5\LaravelS\Illuminate\LaravelSServiceProvider::class);</code></pre></li></ul><p>3.发布配置和二进制文件。</p><blockquote><p><em>每次升级LaravelS后，需重新publish；点击<a href="https://github.com/hhxsv5/laravel-s/releases">Release</a>去了解各个版本的变更记录。</em></p><pre class=" language-lang-bash"><code class="language-lang-bash">php artisan laravels publish# 配置文件：config/laravels.php# 二进制文件：bin/laravels bin/fswatch bin/inotify</code></pre></blockquote><p>4.修改配置<code>config/laravels.php</code>：监听的IP、端口等，请参考<a href="https://github.com/hhxsv5/laravel-s/blob/master/Settings-CN.md">配置项</a>。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><blockquote><p><code>在运行之前，请先仔细阅读：</code><a href="https://github.com/hhxsv5/laravel-s/blob/master/README-CN.md#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">注意事项</a>(这非常重要)。</p></blockquote><ul><li>操作命令：<code>php bin/laravels {start|stop|restart|reload|info|help}</code>。</li></ul><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>start</td><td>启动LaravelS，展示已启动的进程列表 “<em>ps -ef|grep laravels</em>“</td></tr><tr><td>stop</td><td>停止LaravelS，并触发自定义进程的<code>onStop</code>方法</td></tr><tr><td>restart</td><td>重启LaravelS：先平滑<code>Stop</code>，然后再<code>Start</code>；在<code>Start</code>完成之前，服务是<code>不可用的</code></td></tr><tr><td>reload</td><td>平滑重启所有Task/Worker/Timer进程(这些进程内包含了你的业务代码)，并触发自定义进程的<code>onReload</code>方法，不会重启Master/Manger进程；修改<code>config/laravels.php</code>后，你<code>只有</code>调用<code>restart</code>来完成重启</td></tr><tr><td>info</td><td>显示组件的版本信息</td></tr><tr><td>help</td><td>显示帮助信息</td></tr></tbody></table></div><ul><li>启动选项，针对<code>start</code>和<code>restart</code>命令。</li></ul><div class="table-container"><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-d|—daemonize</td><td>以守护进程的方式运行，此选项将覆盖<code>laravels.php</code>中<code>swoole.daemonize</code>设置</td></tr><tr><td>-e|—env</td><td>指定运行的环境，如<code>--env=testing</code>将会优先使用配置文件<code>.env.testing</code>，这个特性要求<code>Laravel 5.2+</code></td></tr><tr><td>-i|—ignore</td><td>忽略检查Master进程的PID文件</td></tr><tr><td>-x|—x-version</td><td>记录当前工程的版本号(分支)，保存在<code>$_ENV</code>/<code>$_SERVER</code>中，访问方式：<code>$_ENV['X_VERSION']</code> <code>$_SERVER['X_VERSION']</code> <code>$request-&gt;server-&gt;get('X_VERSION')</code></td></tr></tbody></table></div><ul><li><code>运行时</code>文件：<code>start</code>时会自动执行<code>php artisan laravels config</code>并生成这些文件，开发者一般不需要关注它们，建议将它们加到<code>.gitignore</code>中。</li></ul><div class="table-container"><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td>storage/laravels.conf</td><td>LaravelS的<code>运行时</code>配置文件</td></tr><tr><td>storage/laravels.pid</td><td>Master进程的PID文件</td></tr><tr><td>storage/laravels-timer-process.pid</td><td>定时器Timer进程的PID文件</td></tr><tr><td>storage/laravels-custom-processes.pid</td><td>所有自定义进程的PID文件</td></tr></tbody></table></div><h2 id="与Nginx配合使用（推荐）"><a href="#与Nginx配合使用（推荐）" class="headerlink" title="与Nginx配合使用（推荐）"></a>与Nginx配合使用（推荐）</h2><pre class=" language-lang-nginx"><code class="language-lang-nginx">gzip on;gzip_min_length 1024;gzip_comp_level 2;gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml;gzip_vary on;gzip_disable "msie6";upstream swoole {    # 通过 IP:Port 连接    server 127.0.0.1:5200 weight=5 max_fails=3 fail_timeout=30s;    # 通过 UnixSocket Stream 连接，小诀窍：将socket文件放在/dev/shm目录下，可获得更好的性能    #server unix:/yourpath/laravel-s-test/storage/laravels.sock weight=5 max_fails=3 fail_timeout=30s;    #server 192.168.1.1:5200 weight=3 max_fails=3 fail_timeout=30s;    #server 192.168.1.2:5200 backup;    keepalive 16;}server {    listen 80;    # 别忘了绑Host    server_name laravels.com;    root /yourpath/laravel-s-test/public;    access_log /yourpath/log/nginx/$server_name.access.log  main;    autoindex off;    index index.html index.htm;    # Nginx处理静态资源(建议开启gzip)，LaravelS处理动态资源。    location / {        try_files $uri @laravels;    }    # 当请求PHP文件时直接响应404，防止暴露public/*.php    #location ~* \.php$ {    #    return 404;    #}    location @laravels {        # proxy_connect_timeout 60s;        # proxy_send_timeout 60s;        # proxy_read_timeout 120s;        proxy_http_version 1.1;        proxy_set_header Connection "";        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Real-PORT $remote_port;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header Host $http_host;        proxy_set_header Scheme $scheme;        proxy_set_header Server-Protocol $server_protocol;        proxy_set_header Server-Name $server_name;        proxy_set_header Server-Addr $server_addr;        proxy_set_header Server-Port $server_port;        # “swoole”是指upstream        proxy_pass http://swoole;    }}</code></pre><h2 id="启用WebSocket服务器"><a href="#启用WebSocket服务器" class="headerlink" title="启用WebSocket服务器"></a>启用WebSocket服务器</h2><blockquote><p>WebSocket服务器监听的IP和端口与Http服务器相同。</p></blockquote><p>1.创建WebSocket Handler类，并实现接口<code>WebSocketHandlerInterface</code>。start时会自动实例化，不需要手动创建实例。</p><pre class=" language-lang-php"><code class="language-lang-php"><?php/** * Created by PhpStorm. * User: wxiangqian * Date: 2020-10-28 * Time: 15:23 */namespace App\Services;use Hhxsv5\LaravelS\Swoole\WebSocketHandlerInterface;use Illuminate\Support\Facades\Log;use Swoole\Http\Request;use Swoole\WebSocket\Frame;use Swoole\WebSocket\Server;/** * @see https://wiki.swoole.com/#/start/start_ws_server */class WebSocketService implements WebSocketHandlerInterface{    // 声明没有参数的构造函数    public function __construct()    {    }    public function onOpen(Server $server, Request $request)    {        // 在触发onOpen事件之前，建立WebSocket的HTTP请求已经经过了Laravel的路由，        // 所以Laravel的Request、Auth等信息是可读的，Session是可读写的，但仅限在onOpen事件中。        // \Log::info('New WebSocket connection', [$request->fd, request()->all(), session()->getId(), session('xxx'), session(['yyy' => time()])]);        Log::info('WebSocket 连接建立');        $server->push($request->fd, 'Welcome to LaravelS');        // throw new \Exception('an exception');// 此时抛出的异常上层会忽略，并记录到Swoole日志，需要开发者try/catch捕获处理    }    public function onMessage(Server $server, Frame $frame)    {        // \Log::info('Received message', [$fram        // \Log::info('Received message', [$frame->fd, $frame->data, $frame->opcode, $frame->finish]);        //        //        $server->push($frame->fd, $frame->data);e->fd, $frame->data, $frame->opcode, $frame->finish]);        $server->push($frame->fd, $frame->data);//        $arr = [//            'time' => date('Y-m-d H:i:s')//        ];//        $server->push($frame->fd, json_encode($arr));        // throw new \Exception('an exception');// 此时抛出的异常上层会忽略，并记录到Swoole日志，需要开发者try/catch捕获处理    }    public function onClose(Server $server, $fd, $reactorId)    {        Log::info('WebSocket 连接关闭');        // throw new \Exception('an exception');// 此时抛出的异常上层会忽略，并记录到Swoole日志，需要开发者try/catch捕获处理    }}</code></pre><p>2.更改配置<code>config/laravels.php</code>。</p><pre class=" language-lang-php"><code class="language-lang-php">// ...'websocket'      => [    'enable'  => true, // 看清楚，这里是true    'handler' => \App\Services\WebSocketService::class,],'swoole'         => [    //...    // dispatch_mode只能设置为2、4、5，https://wiki.swoole.com/#/server/setting?id=dispatch_mode    'dispatch_mode' => 2,    //...],// ...</code></pre><p>3.使用<code>SwooleTable</code>绑定FD与UserId，可选的，<a href="#使用swooletable">Swoole Table示例</a>。也可以用其他全局存储服务，例如Redis/Memcached/MySQL，但需要注意多个<code>Swoole Server</code>实例时FD可能冲突。</p><p>4.与Nginx配合使用（推荐）</p><blockquote><p>参考 <a href="http://nginx.org/en/docs/http/websocket.html">WebSocket代理</a></p></blockquote><pre class=" language-lang-nginx"><code class="language-lang-nginx">map $http_upgrade $connection_upgrade {    default upgrade;    ''      close;}upstream swoole {    # 通过 IP:Port 连接    server 127.0.0.1:5200 weight=5 max_fails=3 fail_timeout=30s;    # 通过 UnixSocket Stream 连接，小诀窍：将socket文件放在/dev/shm目录下，可获得更好的性能    #server unix:/yourpath/laravel-s-test/storage/laravels.sock weight=5 max_fails=3 fail_timeout=30s;    #server 192.168.1.1:5200 weight=3 max_fails=3 fail_timeout=30s;    #server 192.168.1.2:5200 backup;    keepalive 16;}server {    listen 80;    # 别忘了绑Host    server_name laravels.com;    root /yourpath/laravel-s-test/public;    access_log /yourpath/log/nginx/$server_name.access.log  main;    autoindex off;    index index.html index.htm;    # Nginx处理静态资源(建议开启gzip)，LaravelS处理动态资源。    location / {        try_files $uri @laravels;    }    # 当请求PHP文件时直接响应404，防止暴露public/*.php    #location ~* \.php$ {    #    return 404;    #}    # Http和WebSocket共存，Nginx通过location区分    # !!! WebSocket连接时路径为/ws    # Javascript: var ws = new WebSocket("ws://laravels.com/ws");    location =/ws {        # proxy_connect_timeout 60s;        # proxy_send_timeout 60s;        # proxy_read_timeout：如果60秒内被代理的服务器没有响应数据给Nginx，那么Nginx会关闭当前连接；同时，Swoole的心跳设置也会影响连接的关闭        # proxy_read_timeout 60s;        proxy_http_version 1.1;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Real-PORT $remote_port;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header Host $http_host;        proxy_set_header Scheme $scheme;        proxy_set_header Server-Protocol $server_protocol;        proxy_set_header Server-Name $server_name;        proxy_set_header Server-Addr $server_addr;        proxy_set_header Server-Port $server_port;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection $connection_upgrade;        proxy_pass http://swoole;    }    location @laravels {        # proxy_connect_timeout 60s;        # proxy_send_timeout 60s;        # proxy_read_timeout 60s;        proxy_http_version 1.1;        proxy_set_header Connection "";        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Real-PORT $remote_port;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header Host $http_host;        proxy_set_header Scheme $scheme;        proxy_set_header Server-Protocol $server_protocol;        proxy_set_header Server-Name $server_name;        proxy_set_header Server-Addr $server_addr;        proxy_set_header Server-Port $server_port;        proxy_pass http://swoole;    }}</code></pre><p>5.心跳配置</p><ul><li><p>Swoole的心跳配置</p><pre class=" language-lang-php"><code class="language-lang-php">  // config/laravels.php  'swoole' => [      //...      // 表示每60秒遍历一次，一个连接如果600秒内未向服务器发送任何数据，此连接将被强制关闭      'heartbeat_idle_time'      => 600,      'heartbeat_check_interval' => 60,      //...  ],</code></pre></li><li><p>Nginx读取代理服务器超时的配置</p><pre class=" language-lang-nginx"><code class="language-lang-nginx">  # 如果60秒内被代理的服务器没有响应数据给Nginx，那么Nginx会关闭当前连接  proxy_read_timeout 60s;</code></pre><h2 id="HTML实战代码"><a href="#HTML实战代码" class="headerlink" title="HTML实战代码"></a>HTML实战代码</h2><p><a href="https://github.com/WXiangQian/laravel-api/blob/master/resources/views/websocket.blade.php">GitHub完整源代码</a></p></li></ul><pre><code>&lt;script type="text/javascript"&gt;    if(window.WebSocket){        // 端口和ip地址对应不要写错        var webSocket = new WebSocket("ws://127.0.0.1:5200");        webSocket.onopen = function (event) {            console.log('webSocket 连接成功');        };        // 连接关闭时触发        webSocket.onclose = function (event) {            console.log("WebSocket 关闭连接");        }        //收到服务端消息回调        webSocket.onmessage = function (event) {            var content = document.getElementById('content');            content.innerHTML = content.innerHTML.concat('&lt;p style="margin-left:20px;height:20px;line-height:20px;"&gt;'+event.data+'&lt;/p&gt;');            console.log(event.data)        }        var sendMessage = function(){            var data = document.getElementById('message').value;            webSocket.send(data);        }    }else{        console.log("您的浏览器不支持WebSocket");    }&lt;/script&gt;</code></pre><h2 id="实战截图"><a href="#实战截图" class="headerlink" title="实战截图"></a>实战截图</h2><p><img src="https://img-blog.csdnimg.cn/20201203152652336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="启动laravels服务"><br><img src="https://img-blog.csdnimg.cn/20201203153100867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="页面实战"></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>希望本文可以帮助大家学习如何使用websocket。👍</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>揭秘《双11星秀猫巅峰时刻》功能设计</title>
      <link href="2020/11/13/php/%E6%8F%AD%E7%A7%98%E3%80%8A%E5%8F%8C11%E6%98%9F%E7%A7%80%E7%8C%AB%E5%B7%85%E5%B3%B0%E6%97%B6%E5%88%BB%E3%80%8B%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/"/>
      <url>2020/11/13/php/%E6%8F%AD%E7%A7%98%E3%80%8A%E5%8F%8C11%E6%98%9F%E7%A7%80%E7%8C%AB%E5%B7%85%E5%B3%B0%E6%97%B6%E5%88%BB%E3%80%8B%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为大家提供更好的设计思路，一起看透助力拉人头，坑多多砍一刀等等功能~~</p><blockquote><p>2020-11-10晚9点再看浙江卫视直播，某宝APP手机摇一摇抽红包。进去活动以后发现，这功能我去年在某公司设计过类似的功能。所以今天拿来分享给大家~~~</p></blockquote><h4 id="某宝图片"><a href="#某宝图片" class="headerlink" title="某宝图片"></a>某宝图片</h4><p>一个人头1块钱，某宝成本价真的低哦，那坑多多岂不是更低?</p><p><img src="https://img-blog.csdnimg.cn/20201110213704221.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020111021400446.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201110214028416.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201110214811304.png#pic_center" alt="在这里插入图片描述"></p><h4 id="某宝功能逻辑"><a href="#某宝功能逻辑" class="headerlink" title="某宝功能逻辑"></a>某宝功能逻辑</h4><blockquote><p>大佬勿喷，肉眼可见能想到的逻辑简单的描述一下。</p></blockquote><ul><li>每个用户只能帮一位好友助力</li><li>每拉一位用户，则助力一次</li><li>1人、3人、再邀3人、50人为目标，引导客户去拉活跃用户（有机会赢取清空购物车活动）</li><li>参与用户淘气值在401分及叭上,被邀请助力者淘气值501分及上。</li><li>参与次数：用户每场仅可参与1沉,6场启计可参与6次。（让你在短时间内，拉取50名好友，还是有难度的、套路也挺深的。）</li><li>直接点取领取时，会提示是否放弃膨胀机会（套路）<h3 id="功能需求背景"><a href="#功能需求背景" class="headerlink" title="功能需求背景"></a>功能需求背景</h3><blockquote><p>好友助力需求来源于下定金送优惠券功能<br>拉人助力是一种拉新活动，使活动来曝光公司产品，提高知名度<br>比如支付1元定金送一个10元优惠券，然后通过助理让一个10元的优惠券金额扩展到20、30甚至更多。</p></blockquote></li></ul><p>助力结束后，助力者也会获得等额的优惠券，所以说这样会促进更多的用户来参加活动，</p><h3 id="助力规则"><a href="#助力规则" class="headerlink" title="助力规则"></a>助力规则</h3><blockquote><p>由于助力没有要求小数点金额，所以需求就会简单很多。</p></blockquote><p>好友助力随机规则：上限-基本 / 人数    = 均值（直接取整，舍弃小数，保留整数）<br>随机：(均值,均值 X 2)，最后一个人直接获取剩余的钱<br>可以<strong>助力1位好友</strong>不同课程发起的膨胀，但是只能为同一好友<br>人数是后台设置的需要几个人助力</p><blockquote><p>生成助力记录的话，会有一个基本金额和一个上限金额，还会设定助力人数</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020042818235670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="需要考虑的因素："><a href="#需要考虑的因素：" class="headerlink" title="需要考虑的因素："></a>需要考虑的因素：</h3><ol><li>发起助力记录是否存在</li><li>判断是否 是自己给自己助力</li><li>查询是否有助力过的记录(只能帮一个好友助力)<ol><li>查询是帮哪位好友助力的</li><li>如果不是同一个人，则提示：只能帮一个好友助力</li><li>好友的一个课程只能助力一次</li></ol></li><li>最后一个人直接获取剩余的钱 </li></ol><p><strong>切记</strong>：一定要开事物，不然当多个人同时助力的时候会出现问题。</p><h3 id="SQL数据表设计"><a href="#SQL数据表设计" class="headerlink" title="SQL数据表设计"></a>SQL数据表设计</h3><p>结合自己需求设计就好了，大同小异。</p><h3 id="部分代码实现"><a href="#部分代码实现" class="headerlink" title="部分代码实现"></a>部分代码实现</h3><pre class=" language-lang-php"><code class="language-lang-php">/** * $limit_amount 上限金额 * $start_amount 基本金额 * $assist_num 设定的助力人数 * $sale_amount 券的总金额 * $help_amount 好友助力的金额 * $mean_value 随机金额的左区间 * $mean_value_max 随机金额的右区间 */ // count_help_users需要结合自己的场景去获取是第几个人助力 $count_help_users = 0;// 最后一个人直接获取剩余的钱if ($diff == 1) {    $help_amount = $limit_amount - $amount;    $sale_amount = $limit_amount;} else {    //上限-基本 / 人数  = 均值（直接取整，舍弃小数，保留整数）    $mean_value = intval(($limit_amount - $start_amount) / $assist_num);    $mean_value_max = intval($mean_value) * 2;    // 第一个人    if ($count_help_users == 0) {        $help_amount = mt_rand($mean_value, $mean_value_max);        $sale_amount = $info['amount'] + $help_amount;    } else {        $help_amount = mt_rand(1, $mean_value - 1);        $sale_amount = $info['amount'] + $help_amount;    }}// 数据都知道了，下面就把助力的金额之类的信息存入数据表吧</code></pre><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>如果功能设计有什么漏洞，欢迎大家提供更好的建议，希望本文可以帮助你们实现”好友助力”功能👍<br><img src="https://img-blog.csdnimg.cn/20200426102941906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="图片来源于网络"></p><h3 id="某宝宣传图"><a href="#某宝宣传图" class="headerlink" title="某宝宣传图"></a>某宝宣传图</h3><p><img src="https://img-blog.csdnimg.cn/20201110215444968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下golang环境安装以及新手入门</title>
      <link href="2020/11/06/golang/Mac%E4%B8%8Bgolang%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8/"/>
      <url>2020/11/06/golang/Mac%E4%B8%8Bgolang%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>Mac下golang环境安装以及新手入门</p><p><img src="https://img-blog.csdnimg.cn/img_convert/76455cba1d05bcbdabdd9f425be49da4.png" alt=""></p><p><a href="https://www.runoob.com/go/go-tutorial.html">go 菜鸟教程</a></p><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><p>mac 环境 首先安装<a href="https://brew.sh/">brew</a></p><pre><code>    brew install go</code></pre><p><strong>执行</strong>完命令后，如下显示：</p><pre><code>Updating Homebrew...==&gt; Auto-updated Homebrew!Updated 1 tap (homebrew/services).No changes to formulae.==&gt; Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/bottles/go-1.11.2.m######################################################################## 100.0%==&gt; Pouring go-1.11.2.mojave.bottle.tar.gzWarning: The post-install step did not complete successfullyYou can try again using `brew postinstall go`==&gt; CaveatsA valid GOPATH is required to use the `go get` command.If $GOPATH is not specified, $HOME/go will be used by default:  https://golang.org/doc/code.html#GOPATHYou may wish to add the GOROOT-based install location to your PATH:  export PATH=$PATH:/usr/local/opt/go/libexec/bin==&gt; Summary🍺  /usr/local/Cellar/go/1.11.2: 9,282 files, 404MB</code></pre><p>需要设置GOPATH和GOROOT的环境变量，以及设置PATH.</p><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><p>通过go env查看go的详细信息</p><pre><code>go env</code></pre><p>需要设置的环境变量包括:<strong>GOPATH</strong> ,<strong>GOBIN</strong> 以及把<strong>GOBIN</strong>加入到PATH中,<strong>GOROOT</strong>变量默认已经设置好。</p><p>如果需要修改默认的环境变量配置修改 vim ~/.bash_profile 或者 vim ~/.zshrc</p><pre><code>#GOROOT# CentOS 中如下设置 GOROOT，看你安装的路径# export GOROOT=/usr/local/go# Mac OS 中通过命令行工具brew安装如下配置 GOROOTexport GOROOT=/usr/local/opt/go/libexec#GOPATH root binexport GOBIN=$GOROOT/binexport PATH=$PATH:$GOBIN#GOPATH#export GOPATH=$HOME/goexport GOPATH=/Users/wxq/go#GOPATH binexport PATH=$PATH:$GOPATH/binexport GOPROXY=https://goproxy.io</code></pre><p>使其立即生效</p><pre><code>source ~/.bash_profile</code></pre><p>然后在执行 <strong>go env</strong>的时候配置就会生效</p><p><strong>环境变量设置完成!</strong></p><h3 id="标准命令详解"><a href="#标准命令详解" class="headerlink" title="标准命令详解"></a>标准命令详解</h3><pre><code>go --helpGo is a tool for managing Go source code.Go是用于管理Go源代码的工具。Usage用法:  go command [arguments]The commands are:  build 命令用于编译我们指定的源码文件或代码包以及它们的依赖包。    -o 指定输出的文件名，可以带上路径，例如 go build -o a/b/c    -i 安装相应的包，编译+go install    -a 更新全部已经是最新的包的，但是对标准包不适用    -n 把需要执行的编译命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的    -p n 指定可以并行可运行的编译数目，默认是CPU数目    -race 开启编译的时候自动检测数据竞争的情况，目前只支持64位的机器    -v 打印出来我们正在编译的包名    -work 打印出来编译时候的临时文件夹名称，并且如果已经存在的话就不要删除    -x 打印出来执行的命令，其实就是和-n的结果类似，只是这个会执行    -ccflags 'arg list' 传递参数给5c, 6c, 8c 调用    -compiler name 指定相应的编译器，gccgo还是gc    -gccgoflags 'arg list' 传递参数给gccgo编译连接调用    -gcflags 'arg list' 传递参数给5g, 6g, 8g 调用    -installsuffix suffix 为了和默认的安装包区别开来，采用这个前缀来重新安装那些依赖的包，-race的时候默认已经是-installsuffix race,大家可以通过-n命令来验证    -ldflags 'flag list' 传递参数给5l, 6l, 8l 调用    -tags 'tag list' 设置在编译的时候可以适配的那些tag，详细的tag限制参考里面的http://golang.org/pkg/go/build/  clean       删除掉执行其它命令时产生的一些文件和目录。    -i 清除关联的安装的包和可运行文件，也就是通过go install安装的文件    -n 把需要执行的清除命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的    -r 循环的清除在import中引入的包    -x 打印出来执行的详细命令，其实就是-n打印的执行版本  doc 命令可以打印附于Go语言程序实体上的文档。  env 用于打印Go语言的环境信息。  bug 启动错误报告。  fix 把指定代码包的所有Go语言源码文件中的旧版本代码修正为新版本的代码。  fmt 在包源上运行gofmt。    -l 显示那些需要格式化的文件    -w 把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出。    -r 添加形如“a[b:len(a)] -&gt; a[b:]”的重写规则，方便我们做批量替换    -s 简化文件中的代码    -d 显示格式化前后的diff而不是写入文件，默认是false    -e 打印所有的语法错误到标准输出。如果不使用此标记，则只会打印不同行的前10个错误。    -cpuprofile 支持调试模式，写入相应的cpufile到指定的文件  generate 通过处理源生成Go文件。  get 下载或更新安装指定的代码包及其依赖包，并对它们进行编译和安装。    -d 只下载不安装    -f 只有在你包含了-u参数的时候才有效，不让-u去验证import中的每一个都已经获取了，这对于本地fork的包特别有用    -fix 在获取源码之后先运行fix，然后再去做其他的事情    -t 同时也下载需要为运行测试所需要的包    -u 强制使用网络去更新包和它的依赖包    -v 显示执行的命令  install 用于编译并安装指定的代码包及它们的依赖包。  list 列出指定的代码包的信息。  run 命令可以编译并运行命令源码文件。  test 对Go语言编写的程序进行测试。    -bench regexp 执行相应的benchmarks，例如 -bench=.    -cover 开启测试覆盖率    -run regexp 只运行regexp匹配的函数，例如 -run=Array 那么就执行包含有Array开头的函数    -v 显示测试的详细命令  tool 运行指定的go工具    go tool fix . 用来修复以前老版本的代码到新版本，例如go1之前老版本的代码转化到go1,例如API的变化    go tool vet directory|files 用来分析当前目录的代码是否都是正确的代码,例如是不是调用fmt.Printf里面的参数不正确，例如函数里面提前return了然后出现了无用代码之类的。  version 打印Go的版本信息  vet 用于检查Go语言源码中静态错误的简单工具。Use "go help [command]" for more information about a command.Additional help topics:  c           calling between Go and C  buildmode   description of build modes  filetype    file types  gopath      GOPATH environment variable  environment environment variables  importpath  import path syntax  packages    description of package lists  testflag    description of testing flags  testfunc    description of testing functionsUse "go help [topic]" for more information about that topic.</code></pre><h3 id="运行Go"><a href="#运行Go" class="headerlink" title="运行Go"></a>运行Go</h3><p>我们先写一段GO代码，很简单就是打印输出一个hello world!, 保存为hello.go文件</p><pre><code>package mainimport "fmt" func main() {   fmt.Println("Hello, World!")}</code></pre><h3 id="通过go命令运行"><a href="#通过go命令运行" class="headerlink" title="通过go命令运行"></a>通过go命令运行</h3><p>命令运行go程序，在hello.go这个当前目录下运行下面命令，可以输出hello world!。</p><pre><code>go run hello.go</code></pre><h4 id="通过go命令编译运行"><a href="#通过go命令编译运行" class="headerlink" title="通过go命令编译运行"></a>通过go命令编译运行</h4><p>GO程序的代码是可以直接编译成exe文件 或者 二进制文件直接运行，在hello.go目录下运行下面命令，即可把go程序编译成二进制文件</p><pre><code>go build hello.go</code></pre><p>上面命令文件可以编译成一个hello可执行文件，然后直接在当前目录下 ./hello 运行，可以输出hello world!。</p><h3 id="go的基本知识"><a href="#go的基本知识" class="headerlink" title="go的基本知识"></a>go的基本知识</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>注释不会被编译，每一个包应该有相关注释。</p><blockquote><p>单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。<br>多行注释也叫块注释，均已以 /<em> 开头，并以 </em>/ 结尾。如：</p></blockquote><pre><code>// 单行注释/* hello WXiangQian 我是多行注释 */</code></pre><h4 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h4><p>Go 语言的字符串可以通过 ➕ 实现：</p><pre><code>package mainimport "fmt"func main() {    fmt.Println("hello" + "WXiangQian")}</code></pre><h3 id="常见的基本错误"><a href="#常见的基本错误" class="headerlink" title="常见的基本错误"></a>常见的基本错误</h3><ul><li>{ 写法<blockquote><p>需要注意的是 { 不能单独放在一行，所以以下代码在运行时会产生错误：</p><pre class=" language-lang-go"><code class="language-lang-go">package mainimport "fmt"func main()  {  // 错误，{ 不能在单独的行上 fmt.Println("Hello, World!")}</code></pre></blockquote></li><li>多余的 Imports<blockquote><p>Go编译器对Go程序非常严格，如果你不使用，就不要有多余的请求。在上面的代码中，试图引入os包，但是在代码当中，并没有使用，Go编译器对这样的行为严厉禁止。去掉第四行代码之后，程序就能正确编译运行。</p></blockquote></li><li>命名区分大小写<blockquote><p>上述代码中，打印函数写的是fmt.println不是之前所写的fmt.Println。Go语言区分大小写，所以在编程时，要严格按照定义的方式进行引用和调用。</p></blockquote></li></ul><blockquote><p><strong>尤其注意Println的l不是i的大写I！！！！！（ps：多次因为写成PrintIn而被报错，虽然有点白痴，但是请注意!</strong></p></blockquote><ul><li><p>分号分行</p><blockquote><p>如果你学过C、C++、Java、Perl等等，应该已经注意到Go（至少在前面的代码中）没有要求在语句的末尾添加分号。其实在Go语言中，会自动在一行的末尾添加分号。然而，如果在一样有两条表达式，需要用分号显示的进行分割。</p></blockquote></li><li><p>无效的分号</p><blockquote><p>在import后面不可以同时加入两个;第二个分号之前没有任何有效的表达式，所以编译器报了prog.go:3: empty top-level declaration错误。去掉多余的分号，程序可正确运行。</p></blockquote></li></ul><h3 id="golang学习仓库地址"><a href="#golang学习仓库地址" class="headerlink" title="golang学习仓库地址"></a>golang学习仓库地址</h3><p><a href="https://github.com/WXiangQian/go-study">https://github.com/WXiangQian/go-study</a></p><blockquote><p>你的支持就是我更新的动力👍！！！</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下elk、ElasticSearch、logstash、kibana安装</title>
      <link href="2020/10/21/MacOS/Mac%E4%B8%8Belk%E3%80%81ElasticSearch%E3%80%81logstas%E3%80%81kibana%E5%AE%89%E8%A3%85/"/>
      <url>2020/10/21/MacOS/Mac%E4%B8%8Belk%E3%80%81ElasticSearch%E3%80%81logstas%E3%80%81kibana%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>Mac环境：OS X 10.15.5</p><h3 id="安装ELK"><a href="#安装ELK" class="headerlink" title="安装ELK"></a>安装ELK</h3><p>elasticsearch、logstash、kibana在mac下的安装与启动</p><h4 id="安装java8"><a href="#安装java8" class="headerlink" title="安装java8"></a>安装java8</h4><p>网上教程都推荐以下命令，但是错误的❌</p><pre><code>brew cask install homebrew/cask-versions/java8</code></pre><p>报错：Cask ‘java8’ is unavailable: ‘/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask-versions/Casks/java8.rb’ does not exist.</p><blockquote><p>mac用homebrew安装java8的时候报错，homebrew默认不支持java8了。</p></blockquote><p>解决方案：</p><pre><code>brew cask install homebrew/cask-versions/adoptopenjdk8</code></pre><h4 id="安装es-elasticsearch"><a href="#安装es-elasticsearch" class="headerlink" title="安装es(elasticsearch)"></a>安装es(elasticsearch)</h4><pre><code>brew install elasticsearch</code></pre><p>运行es</p><pre><code>brew services start elasticsearch</code></pre><blockquote><p>查看安装信息执行 <code>brew info elasticsearch</code></p></blockquote><p>curl请求地址<code>http://localhost:9200</code>或者浏览器请求地址看一下效果</p><pre><code>curl http://localhost:9200</code></pre><p><img src="https://img-blog.csdnimg.cn/20200907191225118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre><code>{  "name" : "wxiangqiandeMacBook-Pro.local",  "cluster_name" : "elasticsearch_brew",  "cluster_uuid" : "K1g6JY_6RYaqxNTa_niphA",  "version" : {    "number" : "7.8.1-SNAPSHOT",    "build_flavor" : "oss",    "build_type" : "tar",    "build_hash" : "unknown",    "build_date" : "2020-07-31T16:57:12.889003Z",    "build_snapshot" : true,    "lucene_version" : "8.5.1",    "minimum_wire_compatibility_version" : "6.8.0",    "minimum_index_compatibility_version" : "6.0.0-beta1"  },  "tagline" : "You Know, for Search"}</code></pre><h4 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h4><pre><code>brew install logstash</code></pre><h4 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h4><p>Kibana是ES的一个配套工具，可以让用户在网页中与ES进行交互</p><pre><code>brew install kibana</code></pre><p>启动Kibana</p><pre><code>brew services start kibana</code></pre><p>本地浏览器访问</p><pre><code>http://localhost:5601</code></pre><blockquote><p>简单的elk安装就到这里了！</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel join 子查询 joinSub的源码剖析</title>
      <link href="2020/09/24/laravel/laravel%20join%20%E5%AD%90%E6%9F%A5%E8%AF%A2%20joinSub%E7%9A%84%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
      <url>2020/09/24/laravel/laravel%20join%20%E5%AD%90%E6%9F%A5%E8%AF%A2%20joinSub%E7%9A%84%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>想实现join中使用子查询的需求，于是根据文档以及源码寻找方法</p></blockquote><h3 id="想要实现的原生sql"><a href="#想要实现的原生sql" class="headerlink" title="想要实现的原生sql"></a>想要实现的原生sql</h3><pre class=" language-lang-sql"><code class="language-lang-sql">SELECT*FROM    `a`    LEFT JOIN ( SELECT * FROM `b` WHERE `type` = 2 ) AS b     AND ( `a`.`a` = `b`.`a` AND `a`.`b` = `b`.`b` AND `a`.`c` = `b`.`c` )     OR  ( `a`.`a` = `b`.`a` AND `a`.`b` = `b`.`b` AND `a`.`d` = `b`.`d` )</code></pre><h4 id="官方文档给的方法-子查询联接"><a href="#官方文档给的方法-子查询联接" class="headerlink" title="官方文档给的方法(子查询联接)"></a>官方文档给的方法(子查询联接)</h4><p>您可以使用<code>joinSub</code>，<code>leftJoinSub</code>和<code>rightJoinSub</code>方法加入查询的子查询。这些方法中的每一个都接收三个参数：子查询，其表别名和定义相关列的Closure：</p><pre class=" language-lang-php"><code class="language-lang-php">$latestPosts = DB::table('posts')                   ->select('user_id', DB::raw('MAX(created_at) as last_post_created_at'))                   ->where('is_published', true)                   ->groupBy('user_id');$users = DB::table('users')        ->joinSub($latestPosts, 'latest_posts', function ($join) {            $join->on('users.id', '=', 'latest_posts.user_id');        })->get();</code></pre><h3 id="实现方法1：joinSub"><a href="#实现方法1：joinSub" class="headerlink" title="实现方法1：joinSub"></a>实现方法1：joinSub</h3><pre class=" language-lang-php"><code class="language-lang-php">$query = DB::table('table_name2')->where('type','=',2);$info = DB::table('table_name')            ->joinSub($query,'table_name2', function ($join) {                $join->on([                    ['table_name.a', '=', 'table_name2.a'],                    ['table_name.b', '=', 'table_name2.b'],                    ['table_name.c', '=', 'table_name2.c'],                ])->orOn([                    ['table_name.a', '=', 'table_name2.a'],                    ['table_name.b', '=', 'table_name2.b'],                    ['table_name.d', '=', 'table_name2.d'],                ]);            })->get();</code></pre><h3 id="实现方法2：join-getBindings-addBinding"><a href="#实现方法2：join-getBindings-addBinding" class="headerlink" title="实现方法2：join+getBindings+addBinding"></a>实现方法2：join+getBindings+addBinding</h3><p>ps: join+子查询只有用到where的时候才需要addBinding，否则sql语句会只有’?’</p><pre class=" language-lang-php"><code class="language-lang-php">$query = DB::table('table_name2')->where('type','=',2);$info = DB::table('table_name')            ->join(DB::raw('('.$query->toSql().') as table_name2'), function ($join) use ($query) {                $join->on([                    ['table_name.a', '=', 'table_name2.a'],                    ['table_name.b', '=', 'table_name2.b'],                    ['table_name.c', '=', 'table_name2.c'],                ])->orOn([                        ['table_name.a', '=', 'table_name2.a'],                        ['table_name.b', '=', 'table_name2.b'],                        ['table_name.d', '=', 'table_name2.d'],                    ])->addBinding($query->getBindings());            })->get();</code></pre><h3 id="源码剖析joinSub方法"><a href="#源码剖析joinSub方法" class="headerlink" title="源码剖析joinSub方法"></a>源码剖析joinSub方法</h3><p>文件地址：<code>/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php</code></p><pre class=" language-lang-php"><code class="language-lang-php">/**  * AddHoneycombLog a subquery join clause to the query.  *  * @param  \Closure|\Illuminate\Database\Query\Builder|string  $query  * @param  string  $as  * @param  \Closure|string  $first  * @param  string|null  $operator  * @param  string|null  $second  * @param  string  $type  * @param  bool  $where  * @return \Illuminate\Database\Query\Builder|static  *  * @throws \InvalidArgumentException  */ public function joinSub($query, $as, $first, $operator = null, $second = null, $type = 'inner', $where = false) {      // 结果：query为原生sql，bindings为getBindings的绑定参数      // createSub方法见下方     [$query, $bindings] = $this->createSub($query);     $expression = '('.$query.') as '.$this->grammar->wrapTable($as);     $this->addBinding($bindings, 'join');     return $this->join(new Expression($expression), $first, $operator, $second, $type, $where); } /**  * Creates a subquery and parse it.  *  * @param  \Closure|\Illuminate\Database\Query\Builder|string  $query  * @return array  */ protected function createSub($query) {     // If the given query is a Closure, we will execute it while passing in a new     // query instance to the Closure. This will give the developer a chance to     // format and work with the query before we cast it to a raw SQL string.     if ($query instanceof Closure) {         $callback = $query;         $callback($query = $this->forSubQuery());     }     return $this->parseSub($query); } /**   * Parse the subquery into SQL and bindings.   *   * @param  mixed  $query   * @return array   *   * @throws \InvalidArgumentException   */  protected function parseSub($query)  {      if ($query instanceof self || $query instanceof EloquentBuilder) {          return [$query->toSql(), $query->getBindings()];      } elseif (is_string($query)) {          return [$query, []];      } else {          throw new InvalidArgumentException(              'A subquery must be a query builder instance, a Closure, or a string.'          );      }  }/**  * AddHoneycombLog a binding to the query.  *  * @param  mixed  $value  * @param  string  $type  * @return $this  *  * @throws \InvalidArgumentException  */  public function addBinding($value, $type = 'where')  {      if (! array_key_exists($type, $this->bindings)) {          throw new InvalidArgumentException("Invalid binding type: {$type}.");      }      if (is_array($value)) {          $this->bindings[$type] = array_values(array_merge($this->bindings[$type], $value));      } else {          $this->bindings[$type][] = $value;      }      return $this;  }</code></pre><blockquote><p>上述代码已用model的方式实现了原生sql</p></blockquote><p>laravel join 子查询 joinSub的源码剖析就到这了，希望文章可以帮忙解决你的难题，期待你的关注👍</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel leftjoin on orOn的源码剖析</title>
      <link href="2020/09/21/laravel/laravel%20leftjoin%20on%20orOn%E7%9A%84%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
      <url>2020/09/21/laravel/laravel%20leftjoin%20on%20orOn%E7%9A%84%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>leftjoin连接时需要对不止一个条件进行进行匹配，这时候就需要使用闭包方式</p><pre><code>leftjoin('db', function ($join) {···});</code></pre><h3 id="原生join-orOn例子"><a href="#原生join-orOn例子" class="headerlink" title="原生join orOn例子"></a>原生join orOn例子</h3><p>原生sql例子如下：</p><pre class=" language-lang-sql"><code class="language-lang-sql">SELECT    *FROM    `a`    LEFT JOIN `b` ON `b`.`deleted_at` IS NULL     AND ( `a`.`a` = `b`.`a` AND `a`.`b` = `b`.`b` AND `a`.`c` = `b`.`c` )     OR  ( `a`.`a` = `b`.`a` AND `a`.`b` = `b`.`b` AND `a`.`d` = `b`.`d` )</code></pre><blockquote><p>想用model的方法实现join 的 orOn，百度谷歌过后没有找到合适的资料</p></blockquote><p>官方文档的orOn资料如下：<br><a href="https://laravel.com/docs/6.x/queries#joins">https://laravel.com/docs/6.x/queries#joins</a></p><h4 id="Cross-Join-Clause"><a href="#Cross-Join-Clause" class="headerlink" title="Cross Join Clause"></a>Cross Join Clause</h4><p>To perform a “cross join” use the crossJoin method with the name of the table you wish to cross join to. Cross joins generate a cartesian product between the first table and the joined table:</p><pre class=" language-lang-php"><code class="language-lang-php">$users = DB::table('sizes')            ->crossJoin('colors')            ->get();</code></pre><h4 id="Advanced-Join-Clauses"><a href="#Advanced-Join-Clauses" class="headerlink" title="Advanced Join Clauses"></a>Advanced Join Clauses</h4><p>You may also specify more advanced join clauses. To get started, pass a Closure as the second argument into the join method. The Closure will receive a JoinClause object which allows you to specify constraints on the join clause:</p><pre class=" language-lang-php"><code class="language-lang-php">DB::table('users')        ->join('contacts', function ($join) {            $join->on('users.id', '=', 'contacts.user_id')->orOn(...);        })        ->get();</code></pre><h3 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h3><p>这时候只能寻找源码了</p><h4 id="先从-join-gt-on开始"><a href="#先从-join-gt-on开始" class="headerlink" title="先从$join->on开始"></a>先从<code>$join-&gt;on</code>开始</h4><p>文件地址：<code>/vendor/laravel/framework/src/Illuminate/Database/Query/JoinClause.php</code></p><pre class=" language-lang-php"><code class="language-lang-php">/**  * AddHoneycombLog an "on" clause to the join.  *  * On clauses can be chained, e.g.  *  *  $join->on('contacts.user_id', '=', 'users.id')  *       ->on('contacts.info_id', '=', 'info.id')  *  * will produce the following SQL:  *  * on `contacts`.`user_id` = `users`.`id` and `contacts`.`info_id` = `info`.`id`  *  * @param  \Closure|string  $first  * @param  string|null  $operator  * @param  string|null  $second  * @param  string  $boolean  * @return $this  *  * @throws \InvalidArgumentException  */ public function on($first, $operator = null, $second = null, $boolean = 'and') {     if ($first instanceof Closure) {         return $this->whereNested($first, $boolean);     }     return $this->whereColumn($first, $operator, $second, $boolean); } /**  * AddHoneycombLog an "or on" clause to the join.  *  * @param  \Closure|string  $first  * @param  string|null  $operator  * @param  string|null  $second  * @return \Illuminate\Database\Query\JoinClause  */ public function orOn($first, $operator = null, $second = null) {     return $this->on($first, $operator, $second, 'or'); }</code></pre><blockquote><p>由上可见，join中的on 可以传递 <code>$boolean = 'or'</code>的<br>使用on 传递boolean参数 === orOn方法</p></blockquote><h4 id="单where条件"><a href="#单where条件" class="headerlink" title="单where条件"></a>单where条件</h4><p>可以通过以下代码实现：</p><pre class=" language-lang-php"><code class="language-lang-php">$info = DB::table('table_name')    ->leftJoin('table_name2', function ($join) {        $join->on('table_name.a', '=', 'table_name2.a')             ->orOn('table_name.b', '=', 'table_name2.b');    })->get();</code></pre><h4 id="查看whereColumn方法"><a href="#查看whereColumn方法" class="headerlink" title="查看whereColumn方法"></a>查看<code>whereColumn</code>方法</h4><p>文件地址：<code>/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php</code></p><pre class=" language-lang-php"><code class="language-lang-php">/** * AddHoneycombLog a "where" clause comparing two columns to the query. * * @param  string|array  $first * @param  string|null  $operator * @param  string|null  $second * @param  string|null  $boolean * @return \Illuminate\Database\Query\Builder|static */public function whereColumn($first, $operator = null, $second = null, $boolean = 'and'){    // If the column is an array, we will assume it is an array of key-value pairs    // and can add them each as a where clause. We will maintain the boolean we    // received when the method was called and pass it into the nested where.    if (is_array($first)) {        return $this->addArrayOfWheres($first, $boolean, 'whereColumn');    }    // If the given operator is not found in the list of valid operators we will    // assume that the developer is just short-cutting the '=' operators and    // we will set the operators to '=' and set the values appropriately.    if ($this->invalidOperator($operator)) {        [$second, $operator] = [$operator, '='];    }    // Finally, we will add this where clause into this array of clauses that we    // are building for the query. All of them will be compiled via a grammar    // once the query is about to be executed and run against the database.    $type = 'Column';    $this->wheres[] = compact(        'type', 'first', 'operator', 'second', 'boolean'    );    return $this;}</code></pre><blockquote><p>由<code>is_array</code>可见，是可以传递数组的</p></blockquote><h4 id="多where条件"><a href="#多where条件" class="headerlink" title="多where条件"></a>多where条件</h4><p>可以通过以下代码实现：</p><pre class=" language-lang-php"><code class="language-lang-php">$info = DB::table('table_name')    ->leftJoin('table_name2', function ($join) {        $join->on([                   ['table_name.a', '=', 'table_name2.a'],                   ['table_name.b', '=', 'table_name2.b'],                   ['table_name.c', '=', 'table_name2.c'],             ])           ->orOn([                   ['table_name.a', '=', 'table_name2.a'],                   ['table_name.b', '=', 'table_name2.b'],                   ['table_name.d', '=', 'table_name2.d'],           ]);    })->get();</code></pre><blockquote><p>上述代码已用model的方式实现了原生sql</p></blockquote><p>laravel leftjoin on orOn的源码剖析就到这了，希望文章可以帮忙解决你的难题，期待你的关注👍</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Api 报错429 Too Many Attempts.</title>
      <link href="2020/09/10/laravel/Laravel%20Api%20%E6%8A%A5%E9%94%99429%20Too%20Many%20Attempts./"/>
      <url>2020/09/10/laravel/Laravel%20Api%20%E6%8A%A5%E9%94%99429%20Too%20Many%20Attempts./</url>
      
        <content type="html"><![CDATA[<h3 id="429-Too-Many-Attempts"><a href="#429-Too-Many-Attempts" class="headerlink" title="429 Too Many Attempts."></a>429 Too Many Attempts.</h3><p>在 Laravel 中该功能通过内置的 throttle 中间件来实现，该中间件接收两个参数，第一个是次数上限，第二个是指定时间段（单位：分钟）<br><img src="https://img-blog.csdnimg.cn/20200722092509477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>第一个参数 100 代表每分钟限制 100 次请求</li><li>第二个参数 1 代表触发了限制规则，则1分钟内禁止访问</li></ul><blockquote><p>根据实际情况将第一个参数修改为更大，例如：10000</p></blockquote><p>取消 API 接口默认的请求频率限制,直接注释就可以</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你用php实现无限极分类功能</title>
      <link href="2020/08/26/php/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%94%A8php%E5%AE%9E%E7%8E%B0%E6%97%A0%E9%99%90%E6%9E%81%E5%88%86%E7%B1%BB%E5%8A%9F%E8%83%BD/"/>
      <url>2020/08/26/php/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%94%A8php%E5%AE%9E%E7%8E%B0%E6%97%A0%E9%99%90%E6%9E%81%E5%88%86%E7%B1%BB%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>php轻松实现无限极分类功能</p><blockquote><p>本文的  <strong>todo</strong>  都是需要自行修改的</p></blockquote><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>如：</p><ul><li>面包屑导航</li><li>分类（如：商品分类、课程分类、城市）</li><li>文件夹</li></ul><a id="more"></a><h3 id="数据表设计"><a href="#数据表设计" class="headerlink" title="数据表设计"></a>数据表设计</h3><p>code字段是为了方便筛选</p><pre class=" language-lang-sql"><code class="language-lang-sql">// todo 表名需要更换CREATE TABLE `表名` (  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,  `pid` int(11) unsigned NOT NULL DEFAULT '0',  `name` varchar(191) COLLATE utf8_unicode_ci NOT NULL COMMENT '名称',  `code` varchar(100) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT 'code码:上级code+本级id+pid',  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',  PRIMARY KEY (`id`) USING BTREE) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ROW_FORMAT=DYNAMIC COMMENT='XXX';</code></pre><h3 id="数据表数据"><a href="#数据表数据" class="headerlink" title="数据表数据"></a>数据表数据</h3><p><img src="https://img-blog.csdnimg.cn/20200804172349530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="无限极分类的列表处理逻辑"><a href="#无限极分类的列表处理逻辑" class="headerlink" title="无限极分类的列表处理逻辑"></a>无限极分类的列表处理逻辑</h3><p><img src="https://img-blog.csdnimg.cn/20200818154747462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70#pic_center" alt="图片来源于网络"></p><p>因为是demo，所以都整合到一个function了，请自行拆分</p><pre class=" language-lang-php"><code class="language-lang-php">public function getList(){    // todo 先查询出数据表的所有数据 data    $data = Model::get();    // 处理数据    $source = [];    foreach ($data as $v) {        $source[] = [            'id' => $v->id,            'pid' => $v->pid,            'name' => $v->name,            'code' => $v->code        ];    }    // 生成tree数据    $pk = 'id'; //主键标记字段    $pid = 'pid'; //parent标记字段    $child = 'children';//child标记字段    $root = 0;    $list = $source //要转换的二维结果集    $tree = [];    if (is_array($list)) {        //创建基于主键的数组引用        $refer = array();        foreach ($list as $key => $data) {            $refer[$data[$pk]] = &$list[$key];            //判断是否存在parent            $parantId = $data[$pid];            if ($root == $parantId) {                $tree[] = &$list[$key];            } else {                if (isset($refer[$parantId])) {                    $parent = &$refer[$parantId];                    $parent[$child][] = &$list[$key];                }            }        }    }    return response()->json([            'code' => '1',            'msg' => 'success,            'data' => $tree        ]);}</code></pre><h4 id="api返回格式"><a href="#api返回格式" class="headerlink" title="api返回格式"></a>api返回格式</h4><pre class=" language-lang-json"><code class="language-lang-json">{    "code": 1,    "msg": "success",    "data": [        {            "id": 1,            "pid": 0,            "name": "北京",            "code": "10",            "children": [                {                    "id": 2,                    "pid": 1,                    "name": "昌平",                    "code": "1021",                    "children": [                        {                            "id": 3,                            "pid": 2,                            "name": "回龙观",                            "code": "102132",                            "children": [                                {                                    "id": 4,                                    "pid": 3,                                    "name": "金域华府",                                    "code": "10213243"                                },                                {                                    "id": 8,                                    "pid": 3,                                    "name": "融泽家园",                                    "code": "10213283"                                }                            ]                        },                        {                            "id": 5,                            "pid": 2,                            "name": "龙泽",                            "code": "102152",                            "children": [                                {                                    "id": 7,                                    "pid": 5,                                    "name": "龙华园",                                    "code": "10215275"                                },                                {                                    "id": 9,                                    "pid": 5,                                    "name": "龙泽苑",                                    "code": "10215295"                                }                            ]                        }                    ]                },                {                    "id": 6,                    "pid": 1,                    "name": "朝阳",                    "code": "1061"                }            ]        }    ]}</code></pre><h3 id="拼装无限极分类name"><a href="#拼装无限极分类name" class="headerlink" title="拼装无限极分类name"></a>拼装无限极分类name</h3><p>拼装的字符串实例：</p><ul><li>北京/昌平/回龙观</li><li>北京/昌平</li></ul><pre class=" language-lang-php"><code class="language-lang-php">public function getData(){    // 以code为key的分类信息    $codeList = [];    // 先查询出数据表的所有数据 list    $list = Model::get();    foreach ($list as $v) {      $codeList[$v['code']] = $v;      }    // todo $data 其它列表数据    foreach($data as &$v) {        // todo child需要自己拼装        $child = [            'pid' => 1,            'name' => '昌平'        ];        if ($child['pid'] && $child['name']) {            $deptName = $this->getDeptName($departmentList, $child);        } else {            $deptName = $child['name'] ?? '-';        }        $v['str'] = $deptName;    }}/** * 拼接组织架构字符串 * @param $data [] * @param $child [] * @return mixed * User: WXiangQian */public function getDeptName($data, $child){    $pid = $child['pid'];    if ($child['pid'] == 0) {        return $child['name'];    }    foreach ($data as $k => $v) {        if ($child['pid'] == $v['id']) {            // todo 暂时用 / 去拼接的，也可以用 - 自定义            $child['name'] = $v['name'] . '/' . $child['name'];            $child['pid'] = $v['pid'];            unset($data[$k]);        }    }    // 未找到数据，则返回 “-” 数据    if ($pid == $child['pid']) {        return '-';    }    return $this->getDeptName($data, $child);}</code></pre><h3 id="实现效果图"><a href="#实现效果图" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://img-blog.csdnimg.cn/20200818155129788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200818155144917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>php轻松实现无限极分类功能就简单到这了，期待你的关注👍</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jwt-auth根据token反解析出用户信息</title>
      <link href="2020/08/10/php/jwt-auth%E6%A0%B9%E6%8D%AEtoken%E5%8F%8D%E8%A7%A3%E6%9E%90%E5%87%BA%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/"/>
      <url>2020/08/10/php/jwt-auth%E6%A0%B9%E6%8D%AEtoken%E5%8F%8D%E8%A7%A3%E6%9E%90%E5%87%BA%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>token解密使用authenticate方法，注意要先setToken：</p><pre class=" language-lang-php"><code class="language-lang-php">use Tymon\JWTAuth\JWTAuth;class VerifySign extends JWTAuth{    public function getUserInfo($token)    {          $this->setToken($token);          $user = $this->authenticate();          reutrn $user;    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下安装swoole的步骤以及遇到的问题</title>
      <link href="2020/08/03/php/Mac%E4%B8%8B%E5%AE%89%E8%A3%85swoole%E7%9A%84%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2020/08/03/php/Mac%E4%B8%8B%E5%AE%89%E8%A3%85swoole%E7%9A%84%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Swoole 扩展是按照 PHP 标准扩展构建的。使用 phpize 来生成编译检测脚本，./configure 来做编译配置检测，make 进行编译，make install 进行安装。</p></blockquote><p>Swoole官方地址<a href="https://www.swoole.com">https://www.swoole.com</a><br>Swoole官方文档<a href="https://wiki.swoole.com">https://wiki.swoole.com</a></p><h3 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h3><p>安装前必须保证系统已经安装了下列软件</p><ul><li>php-7.1 或更高版本</li><li>gcc-4.8 或更高版本</li><li>make</li><li>autoconf<a id="more"></a><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3></li></ul><ol><li><p>下载 swoole 源码<br>首先去GitHub下载压缩包:<a href="https://github.com/swoole/swoole-src/releases">https://github.com/swoole/swoole-src/releases</a></p></li><li><p>从源码编译安装</p><pre><code>phpize</code></pre></li></ol><pre><code>sudo ./configure</code></pre><pre><code>make &amp;&amp; sudo make install</code></pre><ol><li>启用扩展<br>编译安装到系统成功后，需要在 php.ini 中加入一行 <strong>extension=swoole.so</strong> 来启用 Swoole 扩展</li></ol><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>执行 phpize 报错如下：</p><pre><code>phpize grep: /usr/include/php/main/php.h: No such file or directorygrep: /usr/include/php/Zend/zend_modules.h: No such file or directorygrep: /usr/include/php/Zend/zend_extensions.h: No such file or directoryConfiguring for:PHP Api Version:        Zend Module Api No:     Zend Extension Api No:</code></pre><p>解决方法</p><pre><code>ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/usr/include /usr/include</code></pre><p>注:如果还是没有成功，则应该关闭Rootless</p><h4 id="开关-Rootless"><a href="#开关-Rootless" class="headerlink" title="开关 Rootless"></a>开关 Rootless</h4><p>关闭和开启 Rootless 非常简单，方法如下：</p><p>重启 Mac，听到开机启动声后按下 Command+R，进入恢复模式，在上面的菜单实用工具中找到并打开 Terminal（如果顶部没出现菜单，请继续重启^_^）。输入如下命令：</p><ol><li>关闭 Rootless<pre><code>csrutil disable</code></pre></li><li>开启 Rootless<pre><code>csrutil enable</code></pre>执行完命令后，重启电脑即可生效。</li></ol><p><strong>Mac下安装swoole步骤以及遇到的问题就简单到这了，期待你的关注👍</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下OpenSSL自签ssl证书</title>
      <link href="2020/07/28/linux/Linux%E4%B8%8BOpenSSL%E8%87%AA%E7%AD%BEssl%E8%AF%81%E4%B9%A6/"/>
      <url>2020/07/28/linux/Linux%E4%B8%8BOpenSSL%E8%87%AA%E7%AD%BEssl%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>翻遍多篇自签ssl证书资料总结的经验，不过还是推荐用阿里云免费的证书。因内网需要用到的证书，所以使用了自签ssl。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>HTTPS服务是工作在SSL/TLS上的HTTP。<br>首先简单区分一下HTTPS，SSL ，TLS ，OpenSSL这四者的关系：</p><ul><li>SSL：（Secure Socket Layer，安全套接字层）是在客户端和服务器之间建立一条SSL安全通道的安全协议；</li><li>TLS：（Transport Layer Security，传输层安全协议），用于两个应用程序之间提供保密性和数据完整性；</li><li>TLS的前身是SSL；</li><li>OpenSSL是TLS/SSL协议的开源实现，提供开发库和命令行程序；</li><li>HTTPS是HTTP的加密版，底层使用的加密协议是TLS。</li></ul><blockquote><p>结论：SSL/TLS 是协议，OpenSSL是协议的代码实现。</p></blockquote><p>509证书包含三个文件：key，csr，crt。</p><ul><li>key是服务器上的私钥文件，用于对发送给客户端数据的加密，以及对从客户端接收到数据的解密</li><li>csr是证书签名请求文件，用于提交给证书颁发机构（CA）对证书签名</li><li>crt是由证书颁发机构（CA）签名后的证书，或者是开发者自签名的证书，包含证书持有人的信息，持有人的公钥，以及签署者的签名等信息</li></ul><blockquote><p>备注：在密码学中，X.509是一个标准，规范了公开秘钥认证、证书吊销列表、授权凭证、凭证路径验证算法等。<br><a id="more"></a><br>首先你必需确保你的服务器上安装了openssl</p><pre><code>openssl version -a</code></pre><p><img src="https://img-blog.csdnimg.cn/20200727145125275.png" alt="在这里插入图片描述"></p></blockquote><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><ol><li>成为自己的CA</li><li>然后将SSL证书签名为CA</li><li>然后将CA证书（而不是SSL证书，该证书到您的服务器上）导入Chrome / Chromium。（是的，即使在Linux上也可以。）</li></ol><h4 id="成为CA颁发机构"><a href="#成为CA颁发机构" class="headerlink" title="成为CA颁发机构"></a>成为CA颁发机构</h4><p>生成私钥(会让你设置密码)</p><pre><code>openssl genrsa -des3 -out myCA.key 2048</code></pre><p>消除key的密码</p><pre><code>openssl rsa -in myCA.key -out myCA.key</code></pre><p>生成pem文件</p><pre><code>openssl req -utf8 -x509 -new -nodes -key myCA.key -sha256 -days 825 -out myCA.pem</code></pre><blockquote><p> 加参数-utf8 是因为生成的组织和城市使用中文会乱码</p></blockquote><h4 id="创建CA签名证书"><a href="#创建CA签名证书" class="headerlink" title="创建CA签名证书"></a>创建CA签名证书</h4><p>生成私钥</p><pre><code>openssl genrsa -out server.key 2048</code></pre><p>创建证书签名请求</p><pre><code>openssl req -new -key server.key -out server.csr</code></pre><p>为扩展创建一个配置文件</p><pre><code>&gt;server.ext cat &lt;&lt;-EOFauthorityKeyIdentifier=keyid,issuerbasicConstraints=CA:FALSEkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEnciphermentsubjectAltName = @alt_names[alt_names]DNS.1 = www.baidu.com # Be sure to include the domain name here because Common Name is not so commonly honoured by itselfDNS.2 = www.sougou.com # Optionally, add additional domains (I've added a subdomain here)IP.1 = 192.168.1.1 # Optionally, add an IP address (if the connection which you have planned requires it)EOF</code></pre><p>创建签名证书</p><pre><code>openssl x509 -req -in server.csr -CA myCA.pem -CAkey myCA.key -CAcreateserial \-out server.crt -days 3650 -sha256 -extfile server.ext</code></pre><blockquote><p>3650是证书有效期天数</p></blockquote><h3 id="nginx项目配置文件"><a href="#nginx项目配置文件" class="headerlink" title="nginx项目配置文件"></a>nginx项目配置文件</h3><blockquote><p>找到.crt .key文件路径</p><pre><code>ssl_certificate /Users/wxiangqian/ssl/server.crt;ssl_certificate_key /Users/wxiangqian/ssl/server.key;</code></pre><p>重启NGINX</p><pre><code>sudo nginx -s reload</code></pre></blockquote><h3 id="额外步骤（至少适用于Mac）："><a href="#额外步骤（至少适用于Mac）：" class="headerlink" title="额外步骤（至少适用于Mac）："></a>额外步骤（至少适用于Mac）：</h3><p>myCA.pem在您的Chrome设置中以授权方式导入（设置&gt;管理证书&gt;权限&gt;导入）<br>在“文件&gt;导入文件”中导入CA证书，然后在列表中找到它，右键单击它，展开“&gt;“信任”，然后选择“始终”<br><img src="https://img-blog.csdnimg.cn/20200727151546463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200727151641590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="访问项目地址"><a href="#访问项目地址" class="headerlink" title="访问项目地址"></a>访问项目地址</h3><p>因为是自签证书，没有通过CA机构认证，所以会显示不安全<br><img src="https://img-blog.csdnimg.cn/20200727151757150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击证书会查看到该证书的详细信息<br><img src="https://img-blog.csdnimg.cn/2020072715192930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果出现以下情况，则需要导入证书<br><img src="https://img-blog.csdnimg.cn/20200727152035954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>您的连接不是私密连接<br>攻击者可能会试图从 x.x.x.x 窃取您的信息（例如：密码、通讯内容或信用卡信息）。了解详情<br>NET::ERR_CERT_INVALID</p><p>将您访问的部分网页的网址、有限的系统信息以及部分网页内容发送给 Google，以帮助我们提升 Chrome 的安全性。隐私权政策<br>x.x.x.x 通常会使用加密技术来保护您的信息。Google Chrome 此次尝试连接到 x.x.x.x 时，此网站发回了异常的错误凭据。这可能是因为有攻击者在试图冒充 x.x.x.x，或 Wi-Fi 登录屏幕中断了此次连接。请放心，您的信息仍然是安全的，因为 Google Chrome 尚未进行任何数据交换便停止了连接。</p><p>您目前无法访问 x.x.x.x，因为此网站发送了 Google Chrome 无法处理的杂乱凭据。网络错误和攻击通常是暂时的，因此，此网页稍后可能会恢复正常。</p><blockquote><p>解决：就是在当前页面用键盘输入  <strong>thisisunsafe</strong>  ，不是在地址栏输入，就直接敲键盘就行了，页面即会自动刷新进入网页。</p></blockquote><p>最终生成的文件们为：<br><img src="https://img-blog.csdnimg.cn/20200728093050978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Crt证书内容查看<br><a href="https://www.getssl.cn/decode_crt.php">https://www.getssl.cn/decode_crt.php</a></p><p>参考文章：<br><a href="https://stackoverflow.com/questions/7580508/getting-chrome-to-accept-self-signed-localhost-certificate">https://stackoverflow.com/questions/7580508/getting-chrome-to-accept-self-signed-localhost-certificate</a><br><a href="https://blog.csdn.net/u013066244/article/details/78725842">https://blog.csdn.net/u013066244/article/details/78725842</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Auth 内置登录-根据用户信息实现登录</title>
      <link href="2020/07/23/laravel/LaravelAuth%E5%86%85%E7%BD%AE%E7%99%BB%E5%BD%95-%E6%A0%B9%E6%8D%AE%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/"/>
      <url>2020/07/23/laravel/LaravelAuth%E5%86%85%E7%BD%AE%E7%99%BB%E5%BD%95-%E6%A0%B9%E6%8D%AE%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="laravel-auth-内置登录-根据用户信息实现登录"><a href="#laravel-auth-内置登录-根据用户信息实现登录" class="headerlink" title="laravel auth 内置登录-根据用户信息实现登录"></a>laravel auth 内置登录-根据用户信息实现登录</h3><blockquote><p>项目：laravel项目没有前后端分离<br>背景：根据用户信息(或uid)实现登录<br>登录机制：laravel自带的auth session</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200721174022728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-lang-php"><code class="language-lang-php">    // Authentication Guard    $guard = 'admin';    // 获取用户的user信息    $user = Admin::getUserById($uid);    // 登录    Auth::guard($guard)->login($user);    // 验证是否登陆成功    if ($user == Auth::guard($guard)->user()) {        return redirect('/');    }</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GuzzleHttp cURL errot 60:SSL certificate problem:self signed certificate</title>
      <link href="2020/07/22/php/GuzzleHttp-cURL-error%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2020/07/22/php/GuzzleHttp-cURL-error%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>GuzzleHttp cURL error 60: SSL certificate problem: self signed certificate</p><h3 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h3><p>GuzzleHttp    发起https请求时，会报以下错误</p><pre><code>cURL error 60: SSL certificate problem: self signed certificate</code></pre><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>guzzle 发起http请求与https请求的区别，发起https请求时，需要在构造函数中传入一个配置项，</p><pre><code>$client = new \GuzzleHttp\Client(['verify' =&gt;false]);</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下安装brew遇到的问题以及解决方案</title>
      <link href="2020/07/07/MacOS/Mac%E4%B8%8B%E5%AE%89%E8%A3%85brew%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2020/07/07/MacOS/Mac%E4%B8%8B%E5%AE%89%E8%A3%85brew%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="Mac下安装brew遇到的坑"><a href="#Mac下安装brew遇到的坑" class="headerlink" title="Mac下安装brew遇到的坑"></a>Mac下安装brew遇到的坑</h2><p>版本：Mac OS 10.15.5 </p><blockquote><p>brew官方地址：<a href="https://brew.sh/index_zh-cn">https://brew.sh</a></p></blockquote><h3 id="Homebrew是什么"><a href="#Homebrew是什么" class="headerlink" title="Homebrew是什么"></a>Homebrew是什么</h3><p>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</p><a id="more"></a><h3 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h3><blockquote><p>其实在没有问题的情况下，一条命令就可以安装成功</p></blockquote><p>将下方命令粘贴到终端</p><pre><code>/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"</code></pre><h4 id="安装中遇到的问题"><a href="#安装中遇到的问题" class="headerlink" title="安装中遇到的问题"></a>安装中遇到的问题</h4><p>新电脑会遇到以下问题：如图所示<br><img src="https://img-blog.csdnimg.cn/20200624161931374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>xcode-select –install安装失败不能安装该软件 因为当前无法从软件更新服务器获得<br><img src="https://img-blog.csdnimg.cn/20200624162014585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这时候重点来了，想办法去解决这个问题</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>跳转<a href="https://developer.apple.com/download/more/">https://developer.apple.com/download/more/ </a>网站，中间会让你去登录Apple账号，登录成功后回到链接</p><p> <img src="https://img-blog.csdnimg.cn/2020062416300697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/20200624163106859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020062416325385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>找到适合你电脑版本的软件去下载 &amp;&amp; 安装</p><p><img src="https://img-blog.csdnimg.cn/20200624163415542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装完成后，我们继续安装brew即可<br><img src="https://img-blog.csdnimg.cn/20200624163614611.png" alt="在这里插入图片描述"></p><h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><p>命令行输入brew命令</p><pre><code>brew</code></pre><p>结果如下：</p><pre><code>    Example usage:      brew search [TEXT|/REGEX/]      brew (info|home|options) [FORMULA...]      brew install FORMULA...      brew update      brew upgrade [FORMULA...]      brew uninstall FORMULA...      brew list [FORMULA...]    Troubleshooting:      brew config      brew doctor      brew install -vd FORMULA    Brewing:      brew create [URL [--no-fetch]]      brew edit [FORMULA...]      https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md    Further help:      man brew      brew help [COMMAND]      brew home</code></pre><h3 id="使用brew"><a href="#使用brew" class="headerlink" title="使用brew"></a>使用brew</h3><ul><li>更新Homebrew<pre><code>brew update</code></pre></li><li>安装软件包<pre><code>brew install [包名]</code></pre></li><li>卸载安装包<pre><code>brew uninstall [包名]</code></pre></li><li>查看安装列表<pre><code>brew list</code></pre></li><li>查询可用包<pre><code>brew search [包名]</code></pre></li></ul><p><strong>mac os 下的brew安装就简单到这了，期待你的关注👍</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS安装软件时提示文件已损坏</title>
      <link href="2020/07/02/MacOS/MacOS%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E6%97%B6%E6%8F%90%E7%A4%BA%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F/"/>
      <url>2020/07/02/MacOS/MacOS%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E6%97%B6%E6%8F%90%E7%A4%BA%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么会出现“文件已损坏”"><a href="#为什么会出现“文件已损坏”" class="headerlink" title="为什么会出现“文件已损坏”"></a>为什么会出现“文件已损坏”</h3><p>首先你安装的软件是汉化的或者是破解过的，所以安装完后就提示这个错误。</p><h3 id="如何解决“文件已损坏”的问题"><a href="#如何解决“文件已损坏”的问题" class="headerlink" title="如何解决“文件已损坏”的问题"></a>如何解决“文件已损坏”的问题</h3><a id="more"></a><p>首先安全性改为任何来源<br><img src="https://img-blog.csdnimg.cn/20200624173822900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开终端，输入一下命令即可</p><pre><code>sudo spctl --master-disable</code></pre><p>系统偏好设置-&gt;安全性与隐私<br><img src="https://img-blog.csdnimg.cn/20200624172952655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h3><p>将要安装的软件拖动到application中<br>然后打开终端；<br>输入以下命令:</p><pre><code>sudo xattr -d com.apple.quarantine /Applications/xxxx.app</code></pre><blockquote><p>xxxx为该软件的名字</p></blockquote><p>执行完命令以后，重新打开要安装的软件即可成功</p><p><strong>以上方法执行完毕后，文件损坏的问题就轻松解决了</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《我的憨憨女友都能看懂学会的PHP区别表格合集》</title>
      <link href="2020/05/12/php/%E3%80%8A%E6%88%91%E7%9A%84%E6%86%A8%E6%86%A8%E5%A5%B3%E5%8F%8B%E9%83%BD%E8%83%BD%E7%9C%8B%E6%87%82%E5%AD%A6%E4%BC%9A%E7%9A%84PHP%E5%8C%BA%E5%88%AB%E8%A1%A8%E6%A0%BC%E5%90%88%E9%9B%86%E3%80%8B/"/>
      <url>2020/05/12/php/%E3%80%8A%E6%88%91%E7%9A%84%E6%86%A8%E6%86%A8%E5%A5%B3%E5%8F%8B%E9%83%BD%E8%83%BD%E7%9C%8B%E6%87%82%E5%AD%A6%E4%BC%9A%E7%9A%84PHP%E5%8C%BA%E5%88%AB%E8%A1%A8%E6%A0%BC%E5%90%88%E9%9B%86%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>通俗易懂的表格汇总，带你快速理解两者(或多者)的区别关系</p></blockquote><p><strong>持续更新</strong>~~~，如有遗漏可以评论区告诉我~<br><img src="https://img-blog.csdnimg.cn/2020051114405245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a><h1 id="区别表格汇总"><a href="#区别表格汇总" class="headerlink" title="区别表格汇总"></a>区别表格汇总</h1><h2 id="isset-和-empty"><a href="#isset-和-empty" class="headerlink" title="isset 和 empty"></a>isset 和 empty</h2><p>isset：检测变量是否已设置并且非 NULL</p><p>empty：判断变量是否为空，变量为 0/false 也会被认为是空；变量不存在，不会产生警告</p><div class="table-container"><table><thead><tr><th>变量的值（$var）</th><th>isset（$var）</th><th>empty（$var）</th></tr></thead><tbody><tr><td>“”（空字符串）</td><td>布尔（true）</td><td>布尔（true）</td></tr><tr><td>“ “（空格字符）</td><td>布尔（true）</td><td>布尔（false）</td></tr><tr><td>false</td><td>布尔（true）</td><td>布尔（true）</td></tr><tr><td>true</td><td>布尔（true）</td><td>布尔（false）</td></tr><tr><td>array()（一个空数组）</td><td>布尔（true）</td><td>布尔（true）</td></tr><tr><td>NUll值</td><td>布尔（false）</td><td>布尔（true）</td></tr><tr><td>“0”（0作为字符串）</td><td>布尔（true）</td><td>布尔（true）</td></tr><tr><td>0（0为整数）</td><td>布尔（true）</td><td>布尔（true）</td></tr><tr><td>0.0（0作为浮点数）</td><td>布尔（true）</td><td>布尔（true）</td></tr></tbody></table></div><h2 id="public、protected、private-3p修饰符"><a href="#public、protected、private-3p修饰符" class="headerlink" title="public、protected、private(3p修饰符)"></a>public、protected、private(3p修饰符)</h2><div class="table-container"><table><thead><tr><th></th><th>在类外</th><th>在子类</th><th>在本类</th></tr></thead><tbody><tr><td>public（公有）</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td>protected（受保护）</td><td>✖</td><td>✔</td><td>✔</td></tr><tr><td>private（私有）</td><td>✖</td><td>✖</td><td>✔</td></tr></tbody></table></div><h2 id="cookie-和-session"><a href="#cookie-和-session" class="headerlink" title="cookie 和 session"></a>cookie 和 session</h2><div class="table-container"><table><thead><tr><th></th><th>cookie</th><th>session</th></tr></thead><tbody><tr><td>存储</td><td>客户端（浏览器）</td><td>服务器端</td></tr><tr><td>安全</td><td>容易被更改</td><td>安全一些</td></tr><tr><td>性能</td><td>减轻服务器的性能</td><td>占用服务器的性能</td></tr></tbody></table></div><p>Session 的运行依赖Session ID，而 Session ID 是存在 Cookie 中的，也就是说，如果浏览器禁用了 Cookie，Session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 Session ID）</p><h2 id="get-和-post"><a href="#get-和-post" class="headerlink" title="get 和 post"></a>get 和 post</h2><div class="table-container"><table><thead><tr><th>请求方式</th><th>get</th><th>post</th></tr></thead><tbody><tr><td>本质</td><td>向服务器发索取数据的一种请求</td><td>向服务器提交数据的一种请求</td></tr><tr><td>服务器端获取值的方法</td><td>$_GET</td><td>$_POST</td></tr><tr><td>安全性</td><td>低</td><td>较安全</td></tr><tr><td>大小</td><td>URL 的最大长度是 2048 个字符</td><td>没有大小限制</td></tr></tbody></table></div><h2 id="echo、print、print-r、var-dump"><a href="#echo、print、print-r、var-dump" class="headerlink" title="echo、print、print_r、var_dump"></a>echo、print、print_r、var_dump</h2><div class="table-container"><table><thead><tr><th>echo</th><th>print</th><th>print_r</th><th>var_dump</th></tr></thead><tbody><tr><td>语言结构</td><td>语言结构</td><td>普通函数</td><td>普通函数</td></tr><tr><td>输出一个或多个字符串</td><td>输出字符串</td><td>打印关于变量的易于理解的信息</td><td>打印关于变量的易于理解的信息(带类型)</td></tr></tbody></table></div><h2 id="Redis-和-Memcached"><a href="#Redis-和-Memcached" class="headerlink" title="Redis 和 Memcached"></a>Redis 和 Memcached</h2><div class="table-container"><table><thead><tr><th>缓存</th><th>Redis</th><th>Memcached</th></tr></thead><tbody><tr><td>数据支持类型</td><td>常用的数据类型有5种：String、Hash、List、Set和ZSet</td><td>仅支持简单的key-value结构</td></tr><tr><td>线程</td><td>单线程的IO复用模型</td><td>多线程，非阻塞IO复用的网络模型</td></tr><tr><td>是否支持事务</td><td>✔</td><td>✖</td></tr><tr><td>持久化</td><td>✔</td><td>✖</td></tr></tbody></table></div><h2 id="Nginx-和-Apache"><a href="#Nginx-和-Apache" class="headerlink" title="Nginx 和 Apache"></a>Nginx 和 Apache</h2><div class="table-container"><table><thead><tr><th>web服务器</th><th>Nginx</th><th>Apache</th></tr></thead><tbody><tr><td>反向代理</td><td>非常好</td><td>好</td></tr><tr><td>Rewrite规则</td><td>非常好</td><td>好</td></tr><tr><td>FstCGI</td><td>好</td><td>差</td></tr><tr><td>热部署</td><td>✔</td><td>✖</td></tr><tr><td>系统压力比较</td><td>很小</td><td>小</td></tr><tr><td>稳定性</td><td>非常好</td><td>好</td></tr><tr><td>安全性</td><td>一般</td><td>好</td></tr><tr><td>静态文件处理</td><td>非常好</td><td>一般</td></tr><tr><td>虚拟主机</td><td>✔</td><td>✔</td></tr><tr><td>内存消耗</td><td>非常小</td><td>很大</td></tr></tbody></table></div><h2 id="urlencode-和-rawurlencode"><a href="#urlencode-和-rawurlencode" class="headerlink" title="urlencode 和 rawurlencode"></a>urlencode 和 rawurlencode</h2><div class="table-container"><table><thead><tr><th>函数</th><th>对空格的处理</th><th>返回值</th></tr></thead><tbody><tr><td>urlencode</td><td>处理成“+”</td><td>返回字符串，此字符串中除了 -_. 之外的所有非字母数字字符都将被替换成百分号（%）后跟两位十六进制数，空格则编码为加号（+）。此编码与 WWW 表单 POST 数据的编码方式是一样的，同时与 application/x-www-form-urlencoded 的媒体类型编码方式一样。由于历史原因，此编码在将空格编码为加号（+）方面与 » RFC3986 编码（参见 rawurlencode()）不同</td></tr><tr><td>rawurlencode</td><td>处理成“%20”</td><td>返回字符串，此字符串中除了 -_. 之外的所有非字母数字字符都将被替换成百分号（%）后跟两位十六进制数。这是在 » RFC 3986 中描述的编码，是为了保护原义字符以免其被解释为特殊的 URL 定界符，同时保护 URL 格式以免其被传输媒体（像一些邮件系统）使用字符转换时弄乱</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>函数</th><th>urlencode</th><th>rawurlencode</th></tr></thead><tbody><tr><td>返回值</td><td></td><td></td></tr><tr><td>对空格的处理</td><td>处理成“+”</td><td>处理成“%20”</td></tr></tbody></table></div><h2 id="include、require、include-once、require-once"><a href="#include、require、include-once、require-once" class="headerlink" title="include、require、include_once、require_once"></a>include、require、include_once、require_once</h2><div class="table-container"><table><thead><tr><th></th><th>处理失败方式</th></tr></thead><tbody><tr><td>include</td><td>只产生一个警告级别错误，程序继续运行</td></tr><tr><td>require</td><td>会产生一个致命级别错误，并停止程序运行</td></tr><tr><td>include_once</td><td>同include，当所包含的文件代码已经存在时候，不在包含</td></tr><tr><td>require_once</td><td>同require，当所包含的文件代码已经存在时候，不在包含</td></tr></tbody></table></div><h2 id="MyISAM-和-InnoDB"><a href="#MyISAM-和-InnoDB" class="headerlink" title="MyISAM 和 InnoDB"></a>MyISAM 和 InnoDB</h2><div class="table-container"><table><thead><tr><th>存储引擎</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td></td><td>默认引擎</td><td>需要指定</td></tr><tr><td>场景</td><td>适合查询以及插入为主的应用</td><td>适合频繁修改以及涉及到安全性较高的应用</td></tr><tr><td>是否支持FULLTEXT类型的索引</td><td>✔</td><td>✖</td></tr><tr><td>是否支持事务</td><td>✖</td><td>✔</td></tr><tr><td>是否支持外键</td><td>✖</td><td>✔</td></tr><tr><td>表的具体行数</td><td>select count(<em>) from table,MyISAM只要简单的读出保存好的行数，注意的是，当count(</em>)语句包含   where条件时，两种表的操作是一样的</td><td>InnoDB 中不保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行</td></tr><tr><td>锁</td><td>表锁</td><td>行锁（某些情况下还是锁整表，如 update table set a=1 where user like ‘%lee%’)</td></tr><tr><td>清空整个表时</td><td>重新建表</td><td>一行一行的删除</td></tr></tbody></table></div><h2 id="varchar-和-char"><a href="#varchar-和-char" class="headerlink" title="varchar 和 char"></a>varchar 和 char</h2><div class="table-container"><table><thead><tr><th>数据类型</th><th>varchar</th><th>char</th></tr></thead><tbody><tr><td>解释</td><td>变长</td><td>定长</td></tr><tr><td>定义长度</td><td>小于定义长度时，还是按实际长度存储，插入多长就存多长</td><td>如果插入的长度小于定义长度时，则用空格填充</td></tr><tr><td>存储的容量</td><td>最多能存放 65532 个字符。varchar的最大有效长度由最大行大小和使用的字符集确定。整体最大长度是 65,532字节。</td><td>最多能存放的字符个数 255，和编码无关</td></tr></tbody></table></div><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>持续更新中~~~，如果有添加或者纠正的地方欢迎评论。<br>(你的每一个👍都是我更新的动力)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你如何做一套utm广告投放</title>
      <link href="2020/05/07/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E5%A5%97utm%E5%B9%BF%E5%91%8A%E6%8A%95%E6%94%BE/"/>
      <url>2020/05/07/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E5%A5%97utm%E5%B9%BF%E5%91%8A%E6%8A%95%E6%94%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="设计背景"><a href="#设计背景" class="headerlink" title="设计背景"></a>设计背景</h3><p>   目前平台上缺乏对用户来源和生命周期的管理，导致外部投放活动和平台的运营活动无法精确掌握投放效果。这次增加的功能，可以让我们掌握不同的投放、活动所带来的用户质量，从而优化投放及活动手段。</p><a id="more"></a><h3 id="设计概览"><a href="#设计概览" class="headerlink" title="设计概览"></a>设计概览</h3><p>   通过在链接后面添加UTM（跟踪模块）参数的方式，跟踪用户来源。并且通过为游客模式的用户分配临时ID的方式，可以从游客时期就开始跟踪用户行为，从而更充分的掌握投放效果和用户质量。</p><h3 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h3><h4 id="UTM参数"><a href="#UTM参数" class="headerlink" title="UTM参数"></a>UTM参数</h4><p>  UTM（urchin tracking module）是一套标准的渠道跟踪工具，除了用来跟踪不同渠道的流量效果外，还可以用来作为精细化运营工具，不断优化投放、活动效果。<br>    UTM常用的参数有5个，分别如下：</p><div class="table-container"><table><thead><tr><th>参数</th><th>名称</th><th>示例</th></tr></thead><tbody><tr><td>utm_source</td><td>渠道来源</td><td>utm_source=zhihu</td></tr><tr><td>utm_medium</td><td>投放媒介</td><td>utm_medium=kecheng</td></tr><tr><td>utm_campaign</td><td>广告名称</td><td>utm_campaign=zhihu0728</td></tr><tr><td>utm_content</td><td>广告内容</td><td>utm_content=153</td></tr><tr><td>utm_term</td><td>广告关键词</td><td>utm_content=cv</td></tr></tbody></table></div><h4 id="用户生命周期"><a href="#用户生命周期" class="headerlink" title="用户生命周期"></a>用户生命周期</h4><p>   用户的生命周期是由一系列具体的用户行为构成的，在本次设计中，定义的可以收录入用户生命周期的用户行为有：第一次浏览（第一次使用该产品）、登录、注册、访问课程、下单、购买成功和参与活动（活动特指访问带有UTM参数的页面，可能是对外投放的广告，也可能是官网的一次活动）。下文中将需要收录入用户生命周期的用户行为命名为用户关键行为。<br>    收录的用户关键行为的格式为：行为、行为对象、设备、浏览器、时间戳。比如用户下单了某个课程A，收录的格式为：下单、课程A、手机、APP、时间戳。</p><h4 id="临时ID"><a href="#临时ID" class="headerlink" title="临时ID"></a>临时ID</h4><p>   用户以游客身份访问网站时（PC、M站、APP），如果是以游客身份，需要给用户分配一个唯一的临时ID，并且需要以该临时ID在后台创建一个用户生命周期记录。后续该用户注册或者登录后，需要将该临时ID上发生的用户关键行为合并到学号上去。但该临时ID不要删除，以便继续统计用户万一退出登录后在平台上的行为。<br>    创建临时ID时，需要同时将第一次浏览的信息写上，如果是通过活动链接，则将该次行为记为“参与活动”，否则的话就记为第一次浏览。比如用户通过百度搜索，进入主页，记录的格式为：第一次浏览、具体链接、PC、Chrome、时间戳。</p><h4 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h4><p>   用户通过活动链接创建的账户，需要对用户的后续关键行为做持续统计，比如注册、购买等，以方便根据这些数据做精细化的运营，提升广告或者活动效率。<br>    一个用户参与了多次活动，比如活动A、B、C，后续该用户如果注册或者购买了课程（任何平台课程都可以），则注册或者购买数据，需要统计到活动A上，因为是活动A最早触达该用户，使其了解到公司的产品。</p><h3 id="技术实现思路"><a href="#技术实现思路" class="headerlink" title="技术实现思路"></a>技术实现思路</h3><ol><li>当存在这几个参数的时候去匹配是否有设置投放utm<ol><li>有：则将唯一标识存入到cookie</li><li>没有：则不是广告投放来源<ol><li>虚拟id：暂时用php中session_id作为虚拟id的(如果朋友们有更好的建议，可以推荐一下，互相学习)</li><li>当发现用户已注册或登录后，将要把虚拟id生成的所有记录绑定到uid上，这样才能不丢失未注册人的生命周期。如果未注册或登录，那就没办法了。</li></ol></li></ol></li></ol><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>用户生命周期记录表</p><pre class=" language-lang-mysql"><code class="language-lang-mysql">CREATE TABLE `utm` (  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,  `vid` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '登陆前的虚拟id',  `uid` int(11) NOT NULL DEFAULT '0' COMMENT '用户id',  `utm_url_id` int(11) NOT NULL DEFAULT '0' COMMENT '关联投放id',  `url` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '记录链接',  `device` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '设备',  `browser` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '浏览器',  `course_id` int(11) NOT NULL DEFAULT '0' COMMENT '课程',  `pay_amount` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '消费金额',  `add_time` int(11) NOT NULL DEFAULT '0' COMMENT '添加时间',  `action` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '行为',  PRIMARY KEY (`id`),  KEY `rds_idx_0` (`uid`,`vid`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='用户生命周期记录'</code></pre><p>广告投放表</p><pre class=" language-lang-mysql"><code class="language-lang-mysql">CREATE TABLE `utm2` (  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '链接名称',  `url` text COLLATE utf8_unicode_ci NOT NULL COMMENT 'url完整地址',  `utm_campaign` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '缩略名',  `utm_source` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '来源',  `utm_medium` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '媒介',  `utm_term` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '关键词',  `utm_content` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '内容',  `add_time` int(11) NOT NULL DEFAULT '0' COMMENT '添加时间',  `url_index` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT 'url唯一索引',  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='广告投放'</code></pre><h3 id="实战链接"><a href="#实战链接" class="headerlink" title="实战链接"></a>实战链接</h3><p><a href="https://wxiangqian.blog.csdn.net/article/details/105764287?utm_source=csdn">https://wxiangqian.blog.csdn.net/article/details/105764287?utm_source=csdn</a></p><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>如果功能设计有什么漏洞，欢迎大家提供更好的建议，希望本文可以帮助你们实现”utm”功能👍<br><img src="https://img-blog.csdnimg.cn/20200426112621934.png" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一篇文章揭穿创业公司的套路</title>
      <link href="2020/04/23/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%8F%AD%E7%A9%BF%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E7%9A%84%E5%A5%97%E8%B7%AF/"/>
      <url>2020/04/23/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%8F%AD%E7%A9%BF%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E7%9A%84%E5%A5%97%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>每个初入社会的求职者，都曾经有过找工作被坑的经历。总结了以下潜台词，如果你能全部GET到，那么恭喜你，已被老板们拉入黑名单。</p><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><ol><li>「工资4k - 8k」——那工资就是4k</li><li>「工资上不封顶」——就是说说而已，没人会给你一个月一百万月薪的</li><li>「美女如云」——我司没有福利，你们员工自己互相给福利吧</li><li>「大牛云集」——有两个稍微有点经验的程序员</li><li>「需要你有一定抗压能力」——需要你自愿加班</li><li>「不强制加班」——需要你自愿加班</li><li>「弹性工作时间」——上班不弹，下班弹，而且只往后半夜弹</li><li>「可提供有竞争力的薪酬」——我们给的工资跟其他公司差不多</li><li>「期权激励拿到手软」——希望能弥补你看到基本工资后的脚软</li><li>「有活力的技术团队」——团队平均工作经验小于1年</li><li>「千亿市场的探索者」——目前尚没看清具体市场在哪 </li><li>「新技术+新方向+新团队」——嗯，目前这三样都没有</li><li>「直进核心团队」——公司尚未设置非核心团队岗</li><li>「公司计划短期内上市」——您也知道计划一般赶不上变化</li><li>「我们愿意花钱去培养有潜力的人」——便宜、听话、肯加班<ol><li>「团队年轻有活力」——离职率高，没有资深的老员工</li><li>「团队都是90后」——前途未卜的创业型公司</li><li>「我们的晋升机制很完善，升职快」——公司不到50人，起步可能就是经理开头</li><li>「我们倡导狼性文化」——末位淘汰+默认加班+打鸡血+洗脑</li><li>「我们并不鼓励加班 」——所以我们不会给加班费的</li><li>「希望你能独立承担项目 」——希望你能独立背锅</li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>恭喜大家，成功与创业公司的老板们为敌。<br>(上面都是我随便写的，希望老板们能放过我，如果不想放过我，那就留下你的👍和关注吧)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《吊打面试官》系列之GIT面试篇</title>
      <link href="2020/04/15/git/%E3%80%8A%E5%90%8A%E6%89%93%E9%9D%A2%E8%AF%95%E5%AE%98%E3%80%8B%E7%B3%BB%E5%88%97%E4%B9%8BGIT%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
      <url>2020/04/15/git/%E3%80%8A%E5%90%8A%E6%89%93%E9%9D%A2%E8%AF%95%E5%AE%98%E3%80%8B%E7%B3%BB%E5%88%97%E4%B9%8BGIT%E9%9D%A2%E8%AF%95%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为什么要编写这个系列？git不熟悉的面试者很难表现出自己熟悉git工作流，那么教大家如何在面试官面前大展雄风！！！</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>git是一款代码版本控制软件，目前已被广泛的使用。因此优雅的使用git已经成了开发者的必备技能。 区别于SVN，git的特点是去中心化。</p><h2 id="面试开始"><a href="#面试开始" class="headerlink" title="面试开始"></a>面试开始</h2><p>以下都是面试经常会问到的问题，大家要记住哦！！！</p><a id="more"></a><h4 id="1-平时开发你是用命令行工具还是可视化工具"><a href="#1-平时开发你是用命令行工具还是可视化工具" class="headerlink" title="1.平时开发你是用命令行工具还是可视化工具"></a>1.平时开发你是用命令行工具还是可视化工具</h4><p> 面试官的初衷不是想知道你用什么工具，而是想知道你是否熟悉常用的命令和分支，以及如何团队合作</p><h4 id="2-常用的分支"><a href="#2-常用的分支" class="headerlink" title="2.常用的分支"></a>2.常用的分支</h4><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td>主分支</td></tr><tr><td>develop</td><td>开发分支，包含确定即将发布的代码</td></tr><tr><td>feature</td><td>新功能分支，一般一个新功能对应一个分支</td></tr><tr><td>release</td><td>发布定期要上线的功能</td></tr><tr><td>hotfix</td><td>当系统在线上出现bug时，需要火速处理</td></tr></tbody></table></div><p>注：</p><blockquote><p>hotfix是从master分支上切下来， master branch（生产服务器）先回滚到上一个稳定版本来避免bug再出现，开发人员处理掉这个bug后进行单 元测试，回归测试之后，master merge hotfix,别忘了develop branch也要merge 它！</p></blockquote><h4 id="3-常用的命令"><a href="#3-常用的命令" class="headerlink" title="3.常用的命令"></a>3.常用的命令</h4><blockquote><p>不要只说 add commit pull push，这样会显得很初级，以下列出的命令还会有很多参数去延伸，大家要多学习哦</p></blockquote><ul><li>git add </li><li>git commit</li><li>git status</li><li>git pull</li><li>git push</li><li>git merge</li><li>git stash</li><li>git reset</li><li>git log</li><li>git diff </li><li>git remote</li><li>git clone</li><li>git branch</li><li>git config</li><li>git tag</li><li>git rm</li><li>git init</li><li>git fetch</li><li>git cherry-pick</li><li>git rebase</li></ul><h4 id="4-git-checkout-可以实现哪些功能"><a href="#4-git-checkout-可以实现哪些功能" class="headerlink" title="4.git checkout 可以实现哪些功能"></a>4.git checkout 可以实现哪些功能</h4><ol><li>切换分支 <pre><code>git checkout 分支名</code></pre></li><li>创建并切换到新分支    <pre><code>git checkout  -b 分支名</code></pre></li><li>撤销对文件的修改（只能撤销掉没有add的文件）<pre><code>git checkout  文件名// 撤销所有的文件git checkout .</code></pre></li></ol><h4 id="5-合并其中一个feature分支有哪几种实现方式"><a href="#5-合并其中一个feature分支有哪几种实现方式" class="headerlink" title="5.合并其中一个feature分支有哪几种实现方式"></a>5.合并其中一个feature分支有哪几种实现方式</h4><p>第一种</p><pre><code>git pull origin feature</code></pre><p>第二种</p><pre><code>git merge feature</code></pre><h4 id="6-git-pull和git-fetch的区别"><a href="#6-git-pull和git-fetch的区别" class="headerlink" title="6.git pull和git fetch的区别"></a>6.git pull和git fetch的区别</h4><p>首先在作用上他们的功能是大致相同的，都是起到了更新代码的作用。<br><strong>pull=fetch+merge</strong>，pull的话，下拉远程分支并与本地分支合并。<br>fetch只是下拉远程分支，怎么合并，可以自己再做选择。</p><h4 id="7-如何将dev分支的commitid复制到当前分支"><a href="#7-如何将dev分支的commitid复制到当前分支" class="headerlink" title="7.如何将dev分支的commitid复制到当前分支"></a>7.如何将dev分支的commitid复制到当前分支</h4><pre><code>// 先git log 找到想要复制的commitidgit cherry-pick commitid</code></pre><h4 id="8-讲下git的工作流程"><a href="#8-讲下git的工作流程" class="headerlink" title="8.讲下git的工作流程"></a>8.讲下git的工作流程</h4><p><img src="https://img-blog.csdnimg.cn/20200413132623430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3,size_16,color_FFFFFF,t_70" alt="图片来源于网络"><br>没有具体的标准答案，上图是一个工作流程，具体以往下几个知识点分析</p><ul><li>每个分支的作用，以及是干什么的</li><li>对于 feature 流程，都是从 develop 分支发起，分支合并以及功能管理</li><li>对于 hotfix 流程，要从 master 分支发起，修复完要同时合并到 develop 和 master。</li></ul><p>Git flow的优点是清晰可控，缺点是相对复杂，需要同时维护两个长期分支。大多数工具都将master当作默认分支，可是开发是在develop分支进行的，这导致经常要切换分支，非常烦人。</p><h2 id="面试结束"><a href="#面试结束" class="headerlink" title="面试结束"></a>面试结束</h2><p>希望《吊打面试官》系列之GIT面试篇能为你的面试提高通过率！！！<br>祝福每一位小伙伴都能找到满意的工作！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP接入海尔消费金融</title>
      <link href="2020/04/10/php/PHP%E6%8E%A5%E5%85%A5%E6%B5%B7%E5%B0%94%E6%B6%88%E8%B4%B9%E9%87%91%E8%9E%8D/"/>
      <url>2020/04/10/php/PHP%E6%8E%A5%E5%85%A5%E6%B5%B7%E5%B0%94%E6%B6%88%E8%B4%B9%E9%87%91%E8%9E%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>海尔消费金融简称“嗨付”，公司要求接入海尔金融分期，第一次听说这种支付，官方只有java的demo，没有php的，所以下面会提供一些php实战用到的代码</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>海尔会拉一个微信群，给一个word文档，上面会写着测试环境地址，很简洁，没有在线的接口文档，效率极低，我一共收到了3个word文档了，他们给的接口实例每次都要少点什么。开发完后，发现要注册他们平台的账号、身份证认证、人脸识别、银行卡添加，各种隐私，而且又是贷款，给人一种很不安全的感觉。作为后端，要测试自己写的代码，只能注册了。只要能写出来php的demo，官方给的文档在标准一些，接入就比较方便了，这两样还得自己摸索。。。</p></blockquote><a id="more"></a><h2 id="实战代码"><a href="#实战代码" class="headerlink" title="实战代码"></a>实战代码</h2><blockquote><p>线上和测试配置切换需要修改url(接口地址)</p></blockquote><h3 id="公共配置文件"><a href="#公共配置文件" class="headerlink" title="公共配置文件"></a>公共配置文件</h3><h4 id="公钥私钥文件夹"><a href="#公钥私钥文件夹" class="headerlink" title="公钥私钥文件夹"></a>公钥私钥文件夹</h4><ul><li>hai_pay/      海尔金融配置文件夹</li><li>hai_pay/config/      公钥私钥</li><li>hai_pay/config/private.pem      私钥</li><li>hai_pay/config/public.pem      公钥</li><li>hai_pay/RSAUtils.php        </li><li>hai_pay/SignUtil.php        </li></ul><h4 id="文件名-private-pem"><a href="#文件名-private-pem" class="headerlink" title="文件名:private.pem"></a>文件名:private.pem</h4><pre><code>-----BEGIN PRIVATE KEY-----***-----END PRIVATE KEY-----</code></pre><h4 id="文件名-public-pem"><a href="#文件名-public-pem" class="headerlink" title="文件名:public.pem"></a>文件名:public.pem</h4><pre><code>-----BEGIN PUBLIC KEY-----***-----END PUBLIC KEY-----</code></pre><h4 id="文件名-RSAUtils-php"><a href="#文件名-RSAUtils-php" class="headerlink" title="文件名:RSAUtils.php"></a>文件名:RSAUtils.php</h4><pre class=" language-lang-php"><code class="language-lang-php"><?phpnamespace App\Http\Tools\HaiPay;class RSAUtils{    private $privateKey='';//私钥（用于用户加密）    private $publicKey='';//公钥（用于服务端数据解密）    private $dir;    public function __construct(){        $this->dir = 'config';        $this->privateKey = openssl_pkey_get_private(file_get_contents(dirname(__FILE__).'/'.$this->dir.'/private.pem'));//私钥，用于加密        $this->publicKey = openssl_pkey_get_public(file_get_contents(dirname(__FILE__).'/'.$this->dir.'/public.pem'));//公钥，用于解密    }    /**     * 私钥加密     * @param 原始数据 $data     * @return 密文结果 string     */    public function encryptByPrivateKey($data) {        openssl_private_encrypt($data,$encrypted,$this->privateKey,OPENSSL_PKCS1_PADDING);//私钥加密        $encrypted = base64_encode($encrypted);//加密后的内容通常含有特殊字符，需要编码转换下，在网络间通过url传输时要注意base64编码是否是url安全的        return $encrypted;    }    /**     * 私钥解密     * @param 密文数据 $data     * @return 原文数据结果 string     */    public function decryptByPrivateKey($data){        $data = base64_decode($data);        openssl_private_decrypt($data,$encrypted,$this->privateKey,OPENSSL_PKCS1_PADDING);//私钥解密        return $encrypted;    }    /**     * 私钥签名     * @param unknown $data     */    public function signByPrivateKey($data){        openssl_sign($data, $signature, $this->privateKey);        $encrypted = base64_encode($signature);//加密后的内容通常含有特殊字符，需要编码转换下，在网络间通过url传输时要注意base64编码是否是url安全的        return $encrypted;    }    /**     * 公钥加密     * @param 原文数据 $data     * @return 加密结果 string     */    public function encryptByPublicKey($data) {        openssl_public_encrypt($data,$decrypted,$this->publicKey,OPENSSL_PKCS1_PADDING);//公钥加密        return base64_encode($decrypted);    }    /**     * 公钥解密     * @param 密文数据 $data     * @return 原文结果 string     */    public function decryptByPublicKey($data) {        $data = base64_decode($data);        openssl_public_decrypt($data,$decrypted,$this->publicKey,OPENSSL_PKCS1_PADDING);//公钥解密        return $decrypted;    }    /**     * 公钥验签     * @param unknown $data     * @param unknown $sign     */    public function verifyByPublicKey($data,$sign){        $sign = base64_decode($sign);        return openssl_verify($data, $sign, $this->publicKey);    }    public function __destruct(){        openssl_free_key($this->privateKey);        openssl_free_key($this->publicKey);    }    public function getPrivateKey(){        return file_get_contents(dirname(__FILE__).'/'.$this->dir.'/private.pem');    }}</code></pre><h4 id="文件名-SignUtil-php"><a href="#文件名-SignUtil-php" class="headerlink" title="文件名:SignUtil.php"></a>文件名:SignUtil.php</h4><pre class=" language-lang-php"><code class="language-lang-php"><?phpnamespace App\Http\Tools\HaiPay;class SignUtil{    private $key = ''; /*密钥,22个字符*/    private $iv  = ''; /*向量，8个或10个字符*/    public function __construct($key = '',$iv = '')    {        $this->key = $key;        $this->iv = $iv;    }    /**     * 加密     * @param boolean $status 是否加密     * @return string 处理过的数据     */    public function encrypt($data,$status=false){        if ($status){            return base64_encode(openssl_encrypt($data, 'des-ede3-cbc', $this->key, OPENSSL_RAW_DATA,$this->iv));        }       return $data;    }    /**     * 解密     * @return string 加密的字符串不是完整的会返回空字符串值     */    public function decrypt($data,$miv,$status=false){        if ($status){            $k=substr($miv,0,8);            $i=substr($miv,8,8);            return openssl_decrypt(base64_decode($data), 'des-ede3-cbc', $k, OPENSSL_RAW_DATA, $i);        }        return $data;    }}?></code></pre><h3 id="控制器文件"><a href="#控制器文件" class="headerlink" title="控制器文件"></a>控制器文件</h3><pre class=" language-lang-php"><code class="language-lang-php"><?phpnamespace App\Http\Controllers\Pay;use App\Exceptions\LogicException;use App\Http\Model\DB\AwsOrders;use App\Http\Tools\HaiPay\RSAUtils;use App\Http\Tools\HaiPay\SignUtil;use App\Http\Tools\Tools;use Illuminate\Http\Request;use GuzzleHttp\Client;use Illuminate\Support\Facades\Log;class HaiPayController extends BasicController{    protected $host;    protected $loanType;    protected $tools;    protected $http_clinet;    public function __construct(Request $request)    {        /**         * applyNo是当前请求的一个请求号，方便查日志用的，没有其他作用。不与订单信息绑定。         * uuid 每一笔订单都不要重复         */        parent::__construct($request);        $this->host = 'https://testpm.haiercash.com:9002';        $this->loanType = 0;        if(env('APP_ENV') == 'production'){            $this->loanType = 0; // todo 线上地址待完善            $this->host = ''; // todo 线上地址待完善        }        $this->tools = new Tools();        $this->http_clinet = new Client();        require_once  dirname(dirname(dirname(__FILE__))) . '/Tools/hai_pay/SignUtil.php';        require_once  dirname(dirname(dirname(__FILE__))) . '/Tools/hai_pay/RSAUtils.php';    }    /**     * 贷款申请     * @return \Illuminate\Http\JsonResponse     * @throws LogicException     * @throws \GuzzleHttp\Exception\GuzzleException     * User: https://github.com/WXiangQian     */    public function hai_consume()    {        $key = rand(10000000, 99999999);        $iv  = rand(10000000, 99999999);        $order_id = $this->request->input('order_id',0);        $model = $this->request->input('model','');        // 期数。3、6、9、12        $applyTnr = $this->request->input('applyTnr',0);        if (!in_array($applyTnr,[3,6,9,12])) {            return $this->response->tag('PARAM_ERROR')->response();        }        // 根据订单号查询数据库的实付金额        $payAmt = 0;        if (!isset($payAmt)) {            return $this->response->tag('ORDER_NOT_EXIST')->response();        }        // 小于1w的课程不允许使用海尔金融        if ($payAmt < 10000) {            return $this->response->tag('PARAM_ERROR')->response();        }        $post_data = array(            'uuid' => '交易流水号',            'body' => array(                'orderSn' => '订单号',                'loanType' => '贷款品种编码',                'payAmt' => '贷款金额',                'orderDate' => '下单时间Y-m-d',                'applyTnr' => '期数',                'orderMessage' => array(                    'cOrderSn' => time(),                    'topLevel' => '',                    'model' => '',                    'sku' => 0,                    'price' => '价格',                    'num' => 1,                    'cOrderAmt' => '价格',                    'cOrderPayAmt' => '价格'                ),            )        );        $sign = new SignUtil($key, $iv);        $desData = $sign->encrypt(json_encode($post_data), true);        $rsa = new RSAUtils();        $password_ = $rsa->encryptByPublicKey($key . $iv);        $data = [            'applyNo' => $order_id,            'channelNo' => '',    // todo 文档里的渠道编号            'tradeCode' => '', // todo 内部系统使用，文档里有标识            'data' => $desData,            'privatekey' => $rsa->getPrivateKey(),            'key' => $password_        ];        $data_string = json_encode($data);        $clinet_data = [            'body' => $data_string,        ];        // 这里使用到了guzzle扩展包，可以更换为curl去请求        $result = $this->http_clinet->request('post', $this->host.'/api/payment/gmorder/loanApplication', $clinet_data);        if ($result->getStatusCode() != 200) {            return $this->response->tag('PARAM_ERROR')->response();        }        $result = json_decode($result->getBody(),true);        // 00000为申请成功        if ($result['head']['retFlag'] != '00000') {            throw new LogicException($result['head']['retMsg'],400);        }        $resData = $result['body']['data'];        $resKey = $result['body']['key'];        $decryptByPublicKey = $rsa->decryptByPrivateKey($resKey);        $r = $sign->decrypt($resData, $decryptByPublicKey, true);        $url = '';        if ($r) {            $r = json_decode($r, true);            if (!empty($r['url'])) {                $url = $r['url'];            }        }        return $this->response->data(['url'=>$url])->response();    }    /**     * 贷款回调     * User: https://github.com/WXiangQian     */    public function hai_callback()    {        $post = file_get_contents('php://input');        $rs = json_decode(stripslashes($post),true);        if(empty($rs['key']) || empty($rs['data'])){            echo json_encode(array('status'=>1,'msg'=>'key值或data值为空'),JSON_UNESCAPED_UNICODE); die;        }        $sign = new SignUtil();        $rsa  = new RSAUtils();        $decryptByPublicKey=$rsa->decryptByPrivateKey($rs['key']);        $r = $sign->decrypt($rs['data'],$decryptByPublicKey,true);        if(!$r){            echo json_encode(array('status'=>1,'msg'=>'解密失败'),JSON_UNESCAPED_UNICODE); die;        }        $r = json_decode($r,true);        if(!$r['ordersn']){            echo json_encode(array('status'=>1,'msg'=>'没有订单编号'),JSON_UNESCAPED_UNICODE); die;        }        $out_trade_no   = $r['ordersn']; //订单号        $transStatus    = $r['body']['outSts']; //订单状态 01审批中02审批通过03审批拒绝04 贷款已取消05 客人以确认提交(订单保存)06 审批退回(客人        $trade_no       = $r['body']['orderNo']; //流水号       // $notify_time    = time();       //通知的发送时间。格式为yyyy-MM-dd HH:mm:ss。        if($transStatus == '02') {            // 调用支付回调回调地址            echo json_encode(array('status'=>1,'msg'=>'02处理成功'),JSON_UNESCAPED_UNICODE); die;        }        echo json_encode(array('status'=>1,'msg'=>'处理成功'),JSON_UNESCAPED_UNICODE); die;    }}</code></pre><h2 id="实战demo地址"><a href="#实战demo地址" class="headerlink" title="实战demo地址"></a>实战demo地址</h2><p><a href="https://github.com/WXiangQian/laravel-api">https://github.com/WXiangQian/laravel-api</a></p><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8xLzE1LzE2ZmE4ODBjOGRhZmVlNDI?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8xLzE1LzE2ZmE4ODBmYjg5NDdjOTQ?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8xLzE1LzE2ZmE4ODExYjkyYTMyZDk?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8xLzE1LzE2ZmE4ODEzZWU1NmZiODU?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8xLzE1LzE2ZmE4ODE3MDUxOGQ0OTM?x-oss-process=image/format,png" alt=""></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>真枪实战php接入海尔消费金融，希望可以得到一个👍哦</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>识破laravel+groupBy+count中那些隐藏着的秘密</title>
      <link href="2020/04/01/laravel/%E8%AF%86%E7%A0%B4laravel-groupBy-count%E4%B8%AD%E9%82%A3%E4%BA%9B%E9%9A%90%E8%97%8F%E7%9D%80%E7%9A%84%E7%A7%98%E5%AF%86/"/>
      <url>2020/04/01/laravel/%E8%AF%86%E7%A0%B4laravel-groupBy-count%E4%B8%AD%E9%82%A3%E4%BA%9B%E9%9A%90%E8%97%8F%E7%9D%80%E7%9A%84%E7%A7%98%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<ul><li>谈一谈那些隐藏着的秘密吧！！！</li></ul><blockquote><p>laravel框架中写统计用户的领取数量，打算用 <strong>groupBy</strong> ＋ <strong>count</strong>来实现（去重＋统计），加了<strong>groupBy</strong>之后再<strong>count</strong>，统计出来不的数量不对。查询资料＋反复测试终于得到了解决方案。</p></blockquote><a id="more"></a><h3 id="错误的查询语句-❌"><a href="#错误的查询语句-❌" class="headerlink" title="错误的查询语句 ❌"></a>错误的查询语句 ❌</h3><pre><code>Model::whereIn('course_id',$course_ids)-&gt;groupBy('uid')-&gt;count();</code></pre><blockquote><p>通过groupBy分组后，再执行Count()函数返回的是：分组后数据，第一个分组的数量。</p></blockquote><h3 id="正确的查询语句-✔️"><a href="#正确的查询语句-✔️" class="headerlink" title="正确的查询语句 ✔️"></a>正确的查询语句 ✔️</h3><pre><code>Model::whereIn('course_id',$course_ids)-&gt;groupBy('uid')-&gt;get()-&gt;count();// 或Model::whereIn('course_id',$course_ids)-&gt;count(DB::raw('DISTINCT(uid)')));// 或conut(Model::whereIn('course_id',$course_ids)-&gt;groupBy('uid')-&gt;pluck('uid')-&gt;toArray());</code></pre><h3 id="distinct关键字"><a href="#distinct关键字" class="headerlink" title="distinct关键字"></a>distinct关键字</h3><p>MySQL查询的默认显示为所有行，包括重复的行。</p><p>SELECT子句中的MySQL DISTINCT关键字用于消除重复的行并显示唯一的值列表。</p><h3 id="那DISTINCT-和GROUP-BY哪个效率更高？"><a href="#那DISTINCT-和GROUP-BY哪个效率更高？" class="headerlink" title="那DISTINCT 和GROUP BY哪个效率更高？"></a>那DISTINCT 和GROUP BY哪个效率更高？</h3><blockquote><p>DISTINCT操作只需要找出所有不同的值就可以了。而GROUP BY操作还要为其他聚集函数进行准备工作。从这一点上将，GROUP BY操作做的工作应该比DISTINCT所做的工作要多一些。</p><p>但实际上，GROUP BY 效率会更高点，为什么呢？对于DISTINCT操作，它会读取了所有记录，而GROUP BY需要读取的记录数量与分组的组数量一样多，也就是说比实际存在的记录数目要少很多。</p></blockquote><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><blockquote><p>今天的分享就到这里，相信大家看完一定会收获。</p></blockquote><p>愿那些被隐藏着的秘密都被挖掘出来，共勉！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax请求在safari浏览器不行，chrome可以正常请求</title>
      <link href="2020/03/18/Ajax%E8%AF%B7%E6%B1%82%E5%9C%A8safari%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8D%E8%A1%8C%EF%BC%8Cchrome%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%AF%B7%E6%B1%82/"/>
      <url>2020/03/18/Ajax%E8%AF%B7%E6%B1%82%E5%9C%A8safari%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8D%E8%A1%8C%EF%BC%8Cchrome%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<blockquote><p>同样的Ajax请求，在chrome可以得到正常的response,但是在safari会返回”尝试载入资源时发生错误”。</p></blockquote><a id="more"></a><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><ol><li>可能是ajax的datatype没带。</li><li>如果你表单提交的button的type为“submit”，改为button或者其他类型即可，因为button 的类型为submit时，此按钮会提交表单数据给服务器。未指定时，此值为默认值，或者此属性动态变成空值或者无效值。</li></ol><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><ol><li>ajax请求加上 “datatype”:”json”</li><li>将button的type改为”button”</li></ol><h3 id="报错信息如下图："><a href="#报错信息如下图：" class="headerlink" title="报错信息如下图："></a>报错信息如下图：</h3><p><img src="https://user-gold-cdn.xitu.io/2019/8/12/16c851d1bc9e71e3?w=1096&amp;h=660&amp;f=png&amp;s=110293" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/8/12/16c851d4902ce8d8?w=578&amp;h=814&amp;f=png&amp;s=30588" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GNU nano时怎么保存退出的问题</title>
      <link href="2020/03/13/linux/%E4%BD%BF%E7%94%A8GNUnano%E6%97%B6%E6%80%8E%E4%B9%88%E4%BF%9D%E5%AD%98%E9%80%80%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2020/03/13/linux/%E4%BD%BF%E7%94%A8GNUnano%E6%97%B6%E6%80%8E%E4%B9%88%E4%BF%9D%E5%AD%98%E9%80%80%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Nano是一个简单的没有花梢及华丽效果的文本编辑器。Nano在做简单文本文件编辑时相当不错,可以满足一些基本操作.<br><a id="more"></a></p></blockquote><p>本地连接服务器使用的是<a href="https://www.termius.com/">Termius</a>。<br>Termius是一款支持WINDOWS,MAC,和IOS平台的远程SSH工具，功能强大，且和teamviewer一样注册一个账号就可以在多个平台共享主机列表，一次配置后就可以跨平台使用，非常适合我们经常和云主机服务器打交道的朋友，下面是它的一些主要特点：<br>1、免费</p><p>2、XTerm, VT100和Vanilla终端支持。</p><p>3、可用性:分屏视图支持。</p><p>4、身份:结合用户名、密码或密钥进行快速认证。</p><p>5、内置RSA/DSA密钥生成器。</p><p>6、通过iTunes文件共享导入密钥。支持文本、txt、ppk和键扩展。</p><p>7、自动操作系统识别，如Ubuntu、Fedora、CentOS、Raspbian、MacOSX等。</p><h3 id="以修改crontab文件为例："><a href="#以修改crontab文件为例：" class="headerlink" title="以修改crontab文件为例："></a>以修改crontab文件为例：</h3><p>打开并修改文件：crontab -e</p><p>修改后使用 Ctrl+X，</p><p>提示：save modified buffer …?  ，选择 ：yes</p><p>又提示：file name to write ： ，选择：Ctrl+T</p><p>在下一个界面用 “上下左右” 按键 选择要保存的文件名，</p><p>然后直接点击 “Enter” 按键即可保存。</p><blockquote><p>出自：<a href="https://juejin.im/post/5d47cf17f265da03c926dee3">掘金</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel中blade模板带条件分页</title>
      <link href="2020/03/05/laravel/laravel%E4%B8%ADblade%E6%A8%A1%E6%9D%BF%E5%B8%A6%E6%9D%A1%E4%BB%B6%E5%88%86%E9%A1%B5/"/>
      <url>2020/03/05/laravel/laravel%E4%B8%ADblade%E6%A8%A1%E6%9D%BF%E5%B8%A6%E6%9D%A1%E4%BB%B6%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>在其他框架中，分页可能是件非常痛苦的事，Laravel 让这件事变得简单、易于上手。Laravel 的分页器与查询构建器和 Eloquent ORM 集成在一起，并开箱提供方便的、易于使用的、基于数据库结果集的分页。分页器生成的 HTML 兼容 Bootstrap CSS 框架。</p></blockquote><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><blockquote><p>基于查询构建器进行分页<br>有多种方式实现分页功能，最简单的方式就是使用查询构建器或 Eloquent 查询提供的 paginate 方法。该方法基于当前用户查看页自动设置合适的偏移（offset）和限制（limit），直白点说就是页码和每页显示数量。默认情况下，当前页通过 HTTP 请求查询字符串参数 page 的值判断。当然，该值由 Laravel 自动检测，然后自动插入分页器生成的链接中。<br><a id="more"></a><br>让我们先来看看如何在查询中调用 paginate 方法。在本例中，传递给 paginate 的唯一参数就是你每页想要显示的数目，这里我们指定每页显示 15 个：</p></blockquote><pre class=" language-lang-php"><code class="language-lang-php">namespace App\Http\Controllers;use Illuminate\Support\Facades\DB;use App\Http\Controllers\Controller;class UserController extends Controller{    /**     * 显示应用中的所有用户     *     * @return Response     */    public function index()    {        $users = DB::table('users')->paginate(15);        return view('user.index', ['users' => $users]);    }}</code></pre><blockquote><p>注：目前，使用 groupBy 的分页操作不能被 Laravel 有效执行，如果你需要在分页结果中使用 groupBy，推荐你手动查询数据库然后创建分页器。</p></blockquote><h3 id="简单分页"><a href="#简单分页" class="headerlink" title="简单分页"></a>简单分页</h3><p>如果你只需要在分页视图中简单的显示“下一页”和“上一页”链接，可以使用 simplePaginate 方法来执行一个更加高效的查询。在渲染包含大数据集的视图且不需要显示每个页码时这一功能非常有用：</p><pre><code>$users = DB::table('users')-&gt;simplePaginate(15);</code></pre><h3 id="显示分页结果"><a href="#显示分页结果" class="headerlink" title="显示分页结果"></a>显示分页结果</h3><blockquote><p>当调用 paginate 方法时，你将获取Illuminate\Pagination\LengthAwarePaginator 实例，而调用方法simplePaginate 时，将会获取 Illuminate\Pagination\Paginator 实例。这些对象提供相关方法描述这些结果集，除了这些辅助函数外，分页器实例本身就是迭代器，可以像数组一样对其进行循环调用。所以，获取到结果后，可以按如下方式使用 Blade 显示这些结果并渲染页面链接：</p></blockquote><pre class=" language-lang-php"><code class="language-lang-php"><div class="container">    @foreach ($users as $user)        {{ $user->name }}    @endforeach</div>{{ $users->links() }}</code></pre><blockquote><p>links 方法将会将结果集中的其它页面链接渲染出来。每个链接已经包含了 page 查询字符串变量。记住，render 方法生成的 HTML 兼容 Bootstrap CSS 框架。</p></blockquote><h3 id="带条件的分页"><a href="#带条件的分页" class="headerlink" title="带条件的分页"></a>带条件的分页</h3><pre class=" language-lang-php"><code class="language-lang-php"> public function index(){    $type = $this->request->get('type',1);    $users = DB::table('users')->where(function ($query) use ($type) {        if($type) {             $query->where('type', $type);        }    })->paginate(15);    return view('user.index', ['users' => $users]);}</code></pre><pre class=" language-lang-php"><code class="language-lang-php"><div class="container">    @foreach ($users as $user)        {{ $user->name }}    @endforeach</div>{!! $list->appends(['type'=>$type])->links() !!}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac重启php-fpm</title>
      <link href="2020/02/17/php/mac%E9%87%8D%E5%90%AFphp-fpm/"/>
      <url>2020/02/17/php/mac%E9%87%8D%E5%90%AFphp-fpm/</url>
      
        <content type="html"><![CDATA[<h3 id="查看php-fpm端口是否在被php-fpm使用"><a href="#查看php-fpm端口是否在被php-fpm使用" class="headerlink" title="查看php-fpm端口是否在被php-fpm使用"></a>查看php-fpm端口是否在被php-fpm使用</h3><pre><code>sudo lsof -i:9000</code></pre><p><img src="https://img-blog.csdnimg.cn/2020021710023249.png" alt="在这里插入图片描述"></p><h3 id="一般修改-php-ini-文件后经常需要重启php-fpm"><a href="#一般修改-php-ini-文件后经常需要重启php-fpm" class="headerlink" title="一般修改 php.ini 文件后经常需要重启php-fpm"></a>一般修改 php.ini 文件后经常需要重启php-fpm</h3><pre><code>sudo  killall  php-fpm   // 关闭</code></pre><h3 id="再输入-sudo-lsof-i-9000-就会发现php-fpm没有打印对应端口"><a href="#再输入-sudo-lsof-i-9000-就会发现php-fpm没有打印对应端口" class="headerlink" title="再输入 sudo lsof -i:9000 就会发现php-fpm没有打印对应端口"></a>再输入 sudo lsof -i:9000 就会发现php-fpm没有打印对应端口</h3><pre><code>sudo  php-fpm    // 启动</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP接入银联在线网关支付</title>
      <link href="2020/01/02/php/PHP%E6%8E%A5%E5%85%A5%E9%93%B6%E8%81%94%E5%9C%A8%E7%BA%BF%E7%BD%91%E5%85%B3%E6%94%AF%E4%BB%98/"/>
      <url>2020/01/02/php/PHP%E6%8E%A5%E5%85%A5%E9%93%B6%E8%81%94%E5%9C%A8%E7%BA%BF%E7%BD%91%E5%85%B3%E6%94%AF%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>网站支付：一般接入微信支付、支付宝支付、银联支付，本文介绍的是如何接入中国银联在线网关支付</p></blockquote><h2 id="银联介绍"><a href="#银联介绍" class="headerlink" title="银联介绍"></a>银联介绍</h2><blockquote><p><a href="https://open.unionpay.com/tjweb/acproduct/list?apiservId=448">银联在线支付网关</a>是中国银联联合各商业银行为持卡人提供的集成化、综合性互联网支付工具，主要支持输入卡号付款、用户登录支付、网银支付、迷你付（IC卡支付）等多种支付方式，为持卡人提供境内外网上购物、水电煤缴费、商旅预订等支付服务。<br><a id="more"></a></p><p>网站支付：一般接入微信支付、支付宝支付、银联支付，本文介绍的是如何接入中国银联在线网关支付</p></blockquote><h2 id="银联介绍-1"><a href="#银联介绍-1" class="headerlink" title="银联介绍"></a>银联介绍</h2><blockquote><p><a href="https://open.unionpay.com/tjweb/acproduct/list?apiservId=448">银联在线支付网关</a>是中国银联联合各商业银行为持卡人提供的集成化、综合性互联网支付工具，主要支持输入卡号付款、用户登录支付、网银支付、迷你付（IC卡支付）等多种支付方式，为持卡人提供境内外网上购物、水电煤缴费、商旅预订等支付服务。<br><!-- more --><br>具体流程如下图：</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi85LzE2ZWU5ZjJjYjY2MmZkYjQ?x-oss-process=image/format,png" alt=""></p><h3 id="SDK-amp-Demo下载"><a href="#SDK-amp-Demo下载" class="headerlink" title="SDK&amp;Demo下载"></a>SDK&amp;Demo下载</h3><p><a href="https://open.unionpay.com/tjweb/acproduct/list?apiSvcId=448&amp;index=5">开放平台服务端SDK</a><br>下图为下载好的sdk</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi85LzE2ZWU5ZjQ3ZDU3MTUxODc?x-oss-process=image/format,png" alt=""></p><blockquote><p>ps:官方给的demo都是php文件中写html，没有分离，网上找了各种资料，没有找到分离过后的demo，所以自己总结了demo，希望我的文章可以帮助到大家快速接入银联</p></blockquote><h3 id="异常应答说明"><a href="#异常应答说明" class="headerlink" title="异常应答说明"></a>异常应答说明</h3><ol><li>不返回报文体的情况：<br>版本号，交易类型、子类，签名方法，签名值等关键域未上送，返回“Invalid request.”； 交易类型和请求地址校验有误，返回“Invalid request URI.”</li><li>返回全部的请求报文，附加应答码和应答描述（包括的应答码有：01、02、03、10、11、32）：</li></ol><p>验证签名失败；<br>报文格式错（包含，必填域缺失，上送银联报文未定义的域，报文域的格式非法，交易时间超出范围）；<br>签名失败；<br>超时等其他系统异常</p><h2 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h2><blockquote><p>中间如遇到问题：请登录商家后台进行人工咨询，什么qq客服已停用。<br>基本错误的话文档都会有介绍，如果不知道debug到了哪一步，客服会告诉你调用接口时返回的错误</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi85LzE2ZWVhMGZmNmVkNzIwODU?x-oss-process=image/format,png" alt=""><br>登录步骤：开放平台在线咨询：<a href="https://open.unionpay.com/tjweb/index">https://open.unionpay.com/tjweb/index</a> 用已有账号登录或者注册新用户登录，选择“普通用户”身份登录，登录后页面点击“前往商户测试中心”，界面上点击客服图标后，点击“确定登录”，再点击“商户咨询”进入咨询。<br>业务问题与生产问题请拨打4007795516电话咨询。</p><h2 id="银联在线网关支付接口地址"><a href="#银联在线网关支付接口地址" class="headerlink" title="银联在线网关支付接口地址"></a>银联在线网关支付接口地址</h2><p><a href="https://open.unionpay.com/tjweb/api/dictionary?apiSvcId=448">https://open.unionpay.com/tjweb/api/dictionary?apiSvcId=448</a></p><h2 id="修改公共参数配置"><a href="#修改公共参数配置" class="headerlink" title="修改公共参数配置"></a>修改公共参数配置</h2><blockquote><p>制作签名需要配置参数，由于sdk中用到的大部分是ini配置文件，所以我将部分配置信息放到了php的配置文件中，修改了原有的配置文件</p></blockquote><p>下图要<strong>特别注意</strong>：消费和查询交易，三个值必须统一，则退款不需要<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8yNi8xNmY0MTZhNTRiZDQ3MzE1?x-oss-process=image/format,png" alt=""></p><h3 id="sdk-SDKConfig-php文件"><a href="#sdk-SDKConfig-php文件" class="headerlink" title="/sdk/SDKConfig.php文件"></a>/sdk/SDKConfig.php文件</h3><pre class=" language-lang-php"><code class="language-lang-php">// __construct方法中的配置文件添加$this->env = 'test';$this->signCertPwd = '000000';//如果想把acp_sdk.ini挪到其他路径的话，请修改下面这行指定绝对路径。$configFilePath = dirname(__FILE__) . "/acp_sdk_test.ini";if(env('APP_ENV') == 'production'){    $this->env = 'prod';    $this->signCertPwd = env('UNION_SIGN_CERT_PWD','000000');    $configFilePath = dirname(__FILE__) . "/acp_sdk.ini";}// __construct方法中的配置文件修改/* * 重新定义配置文件路径   ---- 自定义    $this->frontUrl =  array_key_exists("acpsdk.frontUrl", $sdk_array)?$sdk_array["acpsdk.frontUrl"]: null;    $this->backUrl =  array_key_exists("acpsdk.backUrl", $sdk_array)?$sdk_array["acpsdk.backUrl"]: null;    $this->signCertPath = array_key_exists("acpsdk.signCert.path", $sdk_array)?$sdk_array["acpsdk.signCert.path"]: null;    $this->encryptCertPath = array_key_exists("acpsdk.encryptCert.path", $sdk_array)? $sdk_array["acpsdk.encryptCert.path"]: null;    $this->rootCertPath = array_key_exists("acpsdk.rootCert.path", $sdk_array)? $sdk_array["acpsdk.rootCert.path"]: null;    $this->middleCertPath =  array_key_exists("acpsdk.middleCert.path", $sdk_array)?$sdk_array["acpsdk.middleCert.path"]: null;    $this->logFilePath =  array_key_exists("acpsdk.log.file.path", $sdk_array)?$sdk_array["acpsdk.log.file.path"]: null;    $this->logLevel =  array_key_exists("acpsdk.log.level", $sdk_array)?$sdk_array["acpsdk.log.level"]: null;    $this->signCertPwd = array_key_exists("acpsdk.signCert.pwd", $sdk_array)?$sdk_array["acpsdk.signCert.pwd"]: null;*/// 由于是laravel框架，所以放到了env中，也可以放到config中，其它框架放到配置文件中即可$this->backUrl =  env('HOST_FAST').env('UNION_PAY_BACKURL','');$this->frontUrl =  env('HOST_EDU').env('UNION_PAY_FRONTURL','/');$this->signCertPath = dirname(dirname(dirname(__FILE__))).'/union_pay/assets/'.$this->env.'/acp_sign.pfx';$this->encryptCertPath = dirname(dirname(dirname(__FILE__))).'/union_pay/assets/'.$this->env.'/acp_enc.cer';$this->middleCertPath = dirname(dirname(dirname(__FILE__))).'/union_pay/assets/'.$this->env.'/acp_middle.cer';$this->rootCertPath = dirname(dirname(dirname(__FILE__))).'/union_pay/assets/'.$this->env.'/acp_root.cer';$this->logFilePath = storage_path(env("UNION_PAY_LOGFILE_PATH"));$this->logLevel = env("UNION_PAY_LOG_LEVEL",null);</code></pre><h3 id="sdk-acp-service-php文件"><a href="#sdk-acp-service-php文件" class="headerlink" title="/sdk/acp_service.php文件"></a>/sdk/acp_service.php文件</h3><p>createAutoFormHtml方法 直接返回参数</p><pre class=" language-lang-php"><code class="language-lang-php">static function createAutoFormHtml($params, $reqUrl) {    return $params;}</code></pre><h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><p>.env文件</p><pre class=" language-lang-php"><code class="language-lang-php">UNION_PAY_TEST_MERID=测试商户号UNION_PAY_MERID=线上商户号UNION_SIGN_CERT_PWD=线上商户号密码UNION_PAY_BACKURL=UNION_PAY_FRONTURL=UNION_PAY_LOGFILE_PATH=logs/union_payUNION_PAY_LOG_LEVEL=DEBUG</code></pre><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><ol><li>consume方法为给前端返回的所有配置信息</li><li>union_validate是去验证支付参数是否正确（后台通知地址）</li><li>queryTrans交易状态查询</li><li>handle_result处理银联的回调</li><li>union_refund退款</li></ol><h3 id="实战demo地址"><a href="#实战demo地址" class="headerlink" title="实战demo地址"></a>实战demo地址</h3><p><a href="https://github.com/WXiangQian/laravel-api">https://github.com/WXiangQian/laravel-api</a></p><h2 id="接入消费接口"><a href="#接入消费接口" class="headerlink" title="接入消费接口"></a>接入消费接口</h2><pre class=" language-lang-php"><code class="language-lang-php"><?phpnamespace App\Http\Controllers\Sys;use App\Http\Tools\Tools;use com\unionpay\acp\sdk\AcpService;use com\unionpay\acp\sdk\SDKConfig;use Illuminate\Http\Request;class UnionPayController extends BasicController{    protected $merId;    public function __construct(Request $request)    {        header ( 'Content-type:text/html;charset=utf-8' );        ini_set('date.timezone','Asia/Shanghai');        include_once dirname(dirname(dirname(__FILE__))) . '/Tools/union_pay/sdk/acp_service.php';        parent::__construct($request);        $this->merId = env('UNION_PAY_TEST_MERID'); // 测试号        if(env('APP_ENV') == 'production'){            $this->merId = env('UNION_PAY_MERID');;        }    }    /**     * 银联消费的使用参数     * @return \Illuminate\Http\JsonResponse     * User: https://github.com/WXiangQian     */    public function consume()    {        /**         * 重要：联调测试时请仔细阅读注释！         *         * 产品：跳转网关支付产品<br>         * 交易：消费：前台跳转，有前台通知应答和后台通知应答<br>         * 日期： 2015-09<br>         * 版权： 中国银联<br>         * 说明：以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己需要，按照技术文档编写。该代码仅供参考，不提供编码性能规范性等方面的保障<br>         * 提示：该接口参考文档位置：open.unionpay.com帮助中心 下载  产品接口规范  《网关支付产品接口规范》，<br>         *              《平台接入接口规范-第5部分-附录》（内包含应答码接口规范，全渠道平台银行名称-简码对照表)<br>         *              《全渠道平台接入接口规范 第3部分 文件接口》（对账文件格式说明）<br>         * 测试过程中的如果遇到疑问或问题您可以：1）优先在open平台中查找答案：         *                                     调试过程中的问题或其他问题请在 https://open.unionpay.com/ajweb/help/faq/list 帮助中心 FAQ 搜索解决方案         *                             测试过程中产生的7位应答码问题疑问请在https://open.unionpay.com/ajweb/help/respCode/respCodeList 输入应答码搜索解决方案         *                          2） 咨询在线人工支持： open.unionpay.com注册一个用户并登陆在右上角点击“在线客服”，咨询人工QQ测试支持。         * 交易说明:1）以后台通知或交易状态查询交易确定交易成功,前台通知不能作为判断成功的标准.         *       2）交易状态查询交易（Form_6_5_Query）建议调用机制：前台类交易建议间隔（5分、10分、30分、60分、120分）发起交易查询，如果查询到结果成功，则不用再查询。（失败，处理中，查询不到订单均可能为中间状态）。也可以建议商户使用payTimeout（支付超时时间），过了这个时间点查询，得到的结果为最终结果。         */         $channelType = $this->request->input('channelType','07');        $merId = $this->merId;        $riskRateInfo = $this->request->input('riskRateInfo','');        $orderId = $this->request->input('orderId',0);        $txnAmt = $this->request->input('txnAmt',1);        $txnAmt = $txnAmt * 100;        $txnTime = $this->request->input('txnTime',0);        if ($txnTime == 0) {            $txnTime = date('YmdHis');        }        // 在生产环境测试的时候，交易金额请勿小于1角。        if(env('APP_ENV') == 'production' && $txnAmt <= 10){            return $this->response->tag('PARAM_ERROR')->response();        }        // todo 查询数据库中的实际付款金额        $order_txnAmt = 0;        // 没有查到则定金异常        if (!isset($order_txnAmt)) {            return $this->response->tag('ORDER_NOT_EXIST')->response();        }        $order_txnAmt = $order_txnAmt * 100;        // 不一样则认为恶意修改金额 返回错误        if ($txnAmt != $order_txnAmt) {            return $this->response->tag('ORDER_EXCEPTION')->response();        }        $params = array(            //以下信息非特殊情况不需要改动            'version' => SDKConfig::getSDKConfig()->version,                 //版本号            'encoding' => 'utf-8',                  //编码方式            'txnType' => '01',                      //交易类型            'txnSubType' => '01',                  //交易子类            'bizType' => '000201',                  //业务类型            'frontUrl' =>  SDKConfig::getSDKConfig()->frontUrl.'?order_id='.$orderId,  //前台通知地址            'backUrl' => SDKConfig::getSDKConfig()->backUrl.$txnTime,      //后台通知地址            'signMethod' => SDKConfig::getSDKConfig()->signMethod,                  //签名方法            'channelType' => $channelType,                  //渠道类型，07-PC，08-手机            'accessType' => '0',                  //接入类型            'currencyCode' => '156',              //交易币种，境内商户固定156            //TODO 以下信息需要填写            'merId' => $merId,        //商户代码，请改自己的测试商户号，此处默认取demo演示页面传递的参数            'orderId' => $orderId,    //商户订单号，8-32位数字字母，不能含“-”或“_”，此处默认取demo演示页面传递的参数，可以自行定制规则            'txnTime' => $txnTime,    //订单发送时间，格式为YYYYMMDDhhmmss，取北京时间，此处默认取demo演示页面传递的参数            'txnAmt' => $txnAmt,    //交易金额，单位分，此处默认取demo演示页面传递的参数            // 订单超时时间。            // 超过此时间后，除网银交易外，其他交易银联系统会拒绝受理，提示超时。 跳转银行网银交易如果超时后交易成功，会自动退款，大约5个工作日金额返还到持卡人账户。            // 此时间建议取支付时的北京时间加15分钟。            // 超过超时时间调查询接口应答origRespCode不是A6或者00的就可以判断为失败。            'payTimeout' => date('YmdHis', strtotime('+15 minutes')),            'riskRateInfo' =>'{commodityName='.$riskRateInfo.'}',            // 请求方保留域，            // 透传字段，查询、通知、对账文件中均会原样出现，如有需要请启用并修改自己希望透传的数据。            // 出现部分特殊字符时可能影响解析，请按下面建议的方式填写：            // 1. 如果能确定内容不会出现&={}[]"'等符号时，可以直接填写数据，建议的方法如下。            //    'reqReserved' =>'透传信息1|透传信息2|透传信息3',            // 2. 内容可能出现&={}[]"'符号时：            // 1) 如果需要对账文件里能显示，可将字符替换成全角＆＝｛｝【】“‘字符（自己写代码，此处不演示）；            // 2) 如果对账文件没有显示要求，可做一下base64（如下）。            //    注意控制数据长度，实际传输的数据长度不能超过1024位。            //    查询、通知等接口解析时使用base64_decode解base64后再对数据做后续解析。            //    'reqReserved' => base64_encode('任意格式的信息都可以'),            //TODO 其他特殊用法请查看 special_use_purchase.php        );        AcpService::sign ( $params );        $uri = SDKConfig::getSDKConfig()->frontTransUrl;        $html_form = AcpService::createAutoFormHtml( $params, $uri );        $data['url'] = $uri;        foreach ($html_form as $key=>$value) {            $data['data'][] = ['name'=>$key,'value'=>$value];        }        return $this->response->data($data)->response();    }    /**     * 验证支付参数是否正确     * @param $txnTime  订单发送时间     * @return \Illuminate\Http\JsonResponse     * User: https://github.com/WXiangQian     */    public function union_validate($txnTime)    {        if (isset ( $_POST ['signature'] )) {            // 验签失败            if (!AcpService::validate ($_POST)) {                return $this->response->tag('PARAM_ERROR')->response();            }            $orderId = $_POST ['orderId']; //其他字段也可用类似方式获取            $respCode = $_POST ['respCode'];            //判断respCode=00、A6后，对涉及资金类的交易，请再发起查询接口查询，确定交易成功后更新数据库。            if ($respCode == 00 || $respCode == 'A6') {                // todo 将下单时间存到redis  key：order_id value：txnTime 查询交易的时候需要使用                // todo 调用api项目的回调地址                return $this->response->response();            } else {                return $this->response->tag('OPERATION_FAILED')->response();            }        }        return $this->response->tag('PARAM_LACK')->response();    }}</code></pre><h2 id="接入交易状态查询接口"><a href="#接入交易状态查询接口" class="headerlink" title="接入交易状态查询接口"></a>接入交易状态查询接口</h2><pre class=" language-lang-php"><code class="language-lang-php">/** * 交易状态查询 * @param $channelType * @param $merId * @param $orderId * @param $txnTime * @return mixed * @throws LogicException * User: https://github.com/WXiangQian */public function queryTrans($channelType,$merId,$orderId,$txnTime){    $params = array(        //以下信息非特殊情况不需要改动        'version' => SDKConfig::getSDKConfig()->version,          //版本号        'encoding' => 'utf-8',          //编码方式        'signMethod' => SDKConfig::getSDKConfig()->signMethod,          //签名方法        'txnType' => '00',              //交易类型        'txnSubType' => '00',          //交易子类        'bizType' => '000000',          //业务类型        'accessType' => '0',          //接入类型        'channelType' => $channelType,          //渠道类型        //TODO 以下信息需要填写        'orderId' => $orderId,    //请修改被查询的交易的订单号，8-32位数字字母，不能含“-”或“_”，此处默认取demo演示页面传递的参数        'merId' => $merId,        //商户代码，请改自己的测试商户号，此处默认取demo演示页面传递的参数        'txnTime' => $txnTime,    //请修改被查询的交易的订单发送时间，格式为YYYYMMDDhhmmss，此处默认取demo演示页面传递的参数    );    AcpService::sign ( $params ); // 签名    $url = SDKConfig::getSDKConfig()->singleQueryUrl;    $result_arr = $this->handle_result($params,$url);    return $result_arr;}/** * 处理银联的回调 * @param $params * @param $url * @throws LogicException * @return mixed * User: https://github.com/WXiangQian */public function handle_result($params,$url){    $result_arr = AcpService::post ( $params, $url);    if(count($result_arr)<=0) { //没收到200应答的情况        throw new LogicException('REFUND_FAIL');    }    if (!AcpService::validate ($result_arr) ){        throw new LogicException('CHECK_SIGN_FAIL');    }    if ($result_arr["respCode"] == "00"){        //交易已受理，等待接收后台通知更新订单状态，如果通知长时间未收到也可发起交易状态查询        //TODO        return $result_arr;    } else if ($result_arr["respCode"] == "03"        || $result_arr["respCode"] == "04"        || $result_arr["respCode"] == "05" ){        //后续需发起交易状态查询交易确定交易状态        //TODO        throw new LogicException('HADNLE_OVERTIME');    } else {        //其他应答码做以失败处理        //TODO        throw new LogicException('失败：'.$result_arr["respMsg"],14004);    }}</code></pre><h2 id="接入退货接口"><a href="#接入退货接口" class="headerlink" title="接入退货接口"></a>接入退货接口</h2><pre class=" language-lang-php"><code class="language-lang-php">/** * 银联退款 * @throws LogicException * @return \Illuminate\Http\JsonResponse * User: https://github.com/WXiangQian */public function union_refund(){    $channelType = $this->request->input('channelType','07');    $merId = $this->merId;    $oid = $this->request->input('orderId',0);    $txnAmt = $this->request->input('txnAmt',1);    $txnAmt2 = $txnAmt * 100;    $txnTime = date('YmdHis');    // todo 查询订单信息 判断订单是否存在    $order_info =  ['plat_oid'=>11111111];    $origQryId = $order_info['plat_oid'];    $orderId = time().rand(1111, 9999); // 生成退款订单号    /**     * 重要：联调测试时请仔细阅读注释！     *     * 产品：跳转网关支付产品<br>     * 交易：退货交易：后台资金类交易，有同步应答和后台通知应答<br>     * 日期： 2015-09<br>     * 版权： 中国银联<br>     * 说明：以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己需要，按照技术文档编写。该代码仅供参考，不提供编码性能规范性等方面的保障<br>     * 该接口参考文档位置：open.unionpay.com帮助中心 下载  产品接口规范  《网关支付产品接口规范》<br>     *              《平台接入接口规范-第5部分-附录》（内包含应答码接口规范，全渠道平台银行名称-简码对照表）<br>     * 测试过程中的如果遇到疑问或问题您可以：1）优先在open平台中查找答案：     *                                     调试过程中的问题或其他问题请在 https://open.unionpay.com/ajweb/help/faq/list 帮助中心 FAQ 搜索解决方案     *                             测试过程中产生的7位应答码问题疑问请在https://open.unionpay.com/ajweb/help/respCode/respCodeList 输入应答码搜索解决方案     *                          2） 咨询在线人工支持： open.unionpay.com注册一个用户并登陆在右上角点击“在线客服”，咨询人工QQ测试支持。     * 交易说明： 1）以后台通知或交易状态查询交易（Form_6_5_Query）确定交易成功，建议发起查询交易的机制：可查询N次（不超过6次），每次时间间隔2N秒发起,即间隔1，2，4，8，16，32S查询（查询到03，04，05继续查询，否则终止查询）     *        2）退货金额不超过总金额，可以进行多次退货     *        3）退货能对11个月内的消费做（包括当清算日），支持部分退货或全额退货，到账时间较长，一般1-10个清算日（多数发卡行5天内，但工行可能会10天），所有银行都支持     */    $params = array(        //以下信息非特殊情况不需要改动        'version' => SDKConfig::getSDKConfig()->version,              //版本号        'encoding' => 'utf-8',              //编码方式        'signMethod' => SDKConfig::getSDKConfig()->signMethod,              //签名方法        'txnType' => '04',                  //交易类型        'txnSubType' => '00',              //交易子类        'bizType' => '000201',              //业务类型        'accessType' => '0',              //接入类型        'channelType' => $channelType,              //渠道类型        'backUrl' => 'http://www.specialUrl.com', //后台通知地址        //TODO 以下信息需要填写        'orderId' => $orderId,        //商户订单号，8-32位数字字母，不能含“-”或“_”，可以自行定制规则，重新产生，不同于原消费，此处默认取demo演示页面传递的参数        'merId' => $merId,            //商户代码，请改成自己的测试商户号，此处默认取demo演示页面传递的参数        'origQryId' => $origQryId, //原消费的queryId，可以从查询接口或者通知接口中获取，此处默认取demo演示页面传递的参数        'txnTime' => $txnTime,        //订单发送时间，格式为YYYYMMDDhhmmss，重新产生，不同于原消费，此处默认取demo演示页面传递的参数        'txnAmt' => $txnAmt2,       //交易金额，退货总金额需要小于等于原消费        // 请求方保留域，        // 透传字段，查询、通知、对账文件中均会原样出现，如有需要请启用并修改自己希望透传的数据。        // 出现部分特殊字符时可能影响解析，请按下面建议的方式填写：        // 1. 如果能确定内容不会出现&={}[]"'等符号时，可以直接填写数据，建议的方法如下。        //    'reqReserved' =>'透传信息1|透传信息2|透传信息3',        // 2. 内容可能出现&={}[]"'符号时：        // 1) 如果需要对账文件里能显示，可将字符替换成全角＆＝｛｝【】“‘字符（自己写代码，此处不演示）；        // 2) 如果对账文件没有显示要求，可做一下base64（如下）。        //    注意控制数据长度，实际传输的数据长度不能超过1024位。        //    查询、通知等接口解析时使用base64_decode解base64后再对数据做后续解析。        //    'reqReserved' => base64_encode('任意格式的信息都可以'),    );    AcpService::sign ( $params ); // 签名    $url = SDKConfig::getSDKConfig()->backTransUrl;    $this->handle_result($params,$url);    // todo 退款成功-需要将退款信息存到自己的业务表中    return $this->response->response();}</code></pre><h2 id="测试环境测试银联支付"><a href="#测试环境测试银联支付" class="headerlink" title="测试环境测试银联支付"></a>测试环境测试银联支付</h2><blockquote><p> 测试商户号为：777290058110048。测试环境只能使用银联给的银行卡信息：<a href="https://open.unionpay.com/tjweb/support/faq/mchlist?id=4">测试环境的测试卡信息</a></p></blockquote><h3 id="测试流程截图"><a href="#测试流程截图" class="headerlink" title="测试流程截图"></a>测试流程截图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi85LzE2ZWVhMTkwN2NkMmVjNmQ?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi85LzE2ZWVhMTk1OTRhMjVjMjg?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi85LzE2ZWVhMWFjNjljNDFiMWQ?x-oss-process=image/format,png" alt=""></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>注：在生产环境测试的时候，交易金额请勿小于1角。</p></blockquote><p>从测试配置切到线上配置时，线上必须修改<strong>UNION_SIGN_CERT_PWD</strong>线上商户号密码</p><p>遇到<strong>报错信息</strong>：The each() function is deprecated. This message will be suppressed on further calls</p><blockquote><p>php7.2+已将each函数废除，则需要自己换为foreach</p></blockquote><p><strong>解决方案</strong>：</p><pre class=" language-lang-php"><code class="language-lang-php">// 在sdk/common.php中的createLinkString方法进行修改//    while ( list ( $key, $value ) = each ( $para ) ) {//        if ($encode) {//            $value = urlencode ( $value );//        }//        $linkString .= $key . "=" . $value . "&";//    }    // php7.2后废弃each    foreach ($para as $key => $value) {        if ($encode) {            $value = urlencode ( $value );        }        $linkString .= $key . "=" . $value . "&";    }</code></pre><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>真枪实战php接入中国银联在线网关支付消费和交易状态查询以及银联退款接口。</p></blockquote><p><a href="https://juejin.im/post/5dee0f25e51d455821125050">掘金地址</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyWeChat在laravel框架中的使用技巧</title>
      <link href="2019/12/25/laravel/EasyWeChat%E5%9C%A8laravel%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>2019/12/25/laravel/EasyWeChat%E5%9C%A8laravel%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>EasyWeChat在laravel框架中的使用技巧<br><a id="more"></a></p><blockquote><p>laravel框架实战：<br><a href="https://www.easywechat.com/docs/master/overview">EasyWeChat</a></p></blockquote><h2 id="EasyWeChat公众号配置"><a href="#EasyWeChat公众号配置" class="headerlink" title="EasyWeChat公众号配置"></a>EasyWeChat公众号配置</h2><pre><code>protected $wechat;public function __construct (){    $this-&gt;wechat = app('wechat.official_account');  //微信公众号配置}</code></pre><h3 id="报错-Failed-to-cache-access-token"><a href="#报错-Failed-to-cache-access-token" class="headerlink" title="报错:Failed to cache access token."></a>报错:Failed to cache access token.</h3><blockquote><p>报错:Failed to cache access token.的原因大部分是：token缓存文件没写成功。</p></blockquote><p>在使用wechat方法的上面加入以下代码:</p><pre><code> $this-&gt;wechat-&gt;cache = new CacheBridge(app('cache.store'));</code></pre><h3 id="获取公众号临时二维码"><a href="#获取公众号临时二维码" class="headerlink" title="获取公众号临时二维码"></a>获取公众号临时二维码</h3><pre><code>$res = $this-&gt;wechat-&gt;qrcode-&gt;temporary('WXiangQian', 6 * 24 * 3600);</code></pre><h3 id="公众号模板消息推送"><a href="#公众号模板消息推送" class="headerlink" title="公众号模板消息推送"></a>公众号模板消息推送</h3><pre><code>$this-&gt;wechat-&gt;template_message-&gt;send([    'touser' =&gt; $this-&gt;message['FromUserName'],    'template_id' =&gt; 'template_id',// 模板消息id    'url' =&gt; 'https://wxiangqian.github.io/', // 要跳转的url    'data' =&gt; [        "first" =&gt; "欢迎来到本公众号",        "keyword1" =&gt; '你好，WXiangQian', // 必须为keyword        "keyword2" =&gt; "欢迎来到本公众号",        "keyword3" =&gt; "恭喜你成功入坑",        "remark" =&gt; "小提示：期待您的持续关注", //备注    ]]);</code></pre><h3 id="公众号服务端的使用"><a href="#公众号服务端的使用" class="headerlink" title="公众号服务端的使用"></a>公众号服务端的使用</h3><h4 id="在微信开发中主要是负责接收用户发送过来的消息，还有用户触发的一系列事件"><a href="#在微信开发中主要是负责接收用户发送过来的消息，还有用户触发的一系列事件" class="headerlink" title="在微信开发中主要是负责接收用户发送过来的消息，还有用户触发的一系列事件"></a>在微信开发中主要是负责接收用户发送过来的消息，还有用户触发的一系列事件</h4><pre><code>$app-&gt;server-&gt;push(function ($message) {    // $message['FromUserName'] // 用户的 openid    // $message['MsgType'] // 消息类型：event, text....    return "您好！欢迎使用 EasyWeChat";});// 在 laravel 中：$response = $app-&gt;server-&gt;serve();// $response 为 `Symfony\Component\HttpFoundation\Response` 实例// 对于需要直接输出响应的框架，或者原生 PHP 环境下$response-&gt;send();// 而 laravel 中直接返回即可：return $response;</code></pre><h4 id="message-‘MsgType’-详解"><a href="#message-‘MsgType’-详解" class="headerlink" title="$message[‘MsgType’] 详解"></a>$message[‘MsgType’] 详解</h4><pre><code>$app-&gt;server-&gt;push(function ($message) {    switch ($message['MsgType']) {        case 'event':            return '收到事件消息';            break;        case 'text':            return '收到文字消息';            break;        case 'image':            return '收到图片消息';            break;        case 'voice':            return '收到语音消息';            break;        case 'video':            return '收到视频消息';            break;        case 'location':            return '收到坐标消息';            break;        case 'link':            return '收到链接消息';            break;        case 'file':            return '收到文件消息';        // ... 其它消息        default:            return '收到其它消息';            break;    }    // ...});</code></pre><h4 id="MsgType-Event-事件类型详解"><a href="#MsgType-Event-事件类型详解" class="headerlink" title="MsgType Event 事件类型详解"></a>MsgType Event 事件类型详解</h4><blockquote><p>扫描带参数的二维码事件</p><pre><code>EventKey 事件KEY值，比如：qrscene_123123，qrscene_为前缀，后面为二维码的参数值Ticket 二维码的 ticket，可用来换取二维码图片</code></pre></blockquote><pre><code>// （如：subscribe(订阅)、unsubscribe(取消订阅) ...， CLICK 等）if($message['MsgType'] == 'event') {  //收到事件消息    switch ($message['Event']) {        case 'CLICK':          //点击事件            break;        case 'subscribe':      //订阅            $event_info = substr($this-&gt;message['EventKey'], 8);            $event_arr = explode('_', $event_info);            if (!empty($event_arr) &amp;&amp; $event_arr[0] == 'test')                 // test逻辑            }else{                // 关注公众号逻辑                return $this-&gt;subscribe($event_arr);            }            break;        case 'unsubscribe':    //取消订阅            return $this-&gt;unSubscribe();            break;        case 'SCAN':           //已关注的情况下扫描二维码            $this-&gt;scan();            break;    }}</code></pre><h2 id="EasyWeChat小程序配置"><a href="#EasyWeChat小程序配置" class="headerlink" title="EasyWeChat小程序配置"></a>EasyWeChat小程序配置</h2><pre><code>    $this-&gt;config = [        'app_id' =&gt; 'app_id',        'secret' =&gt; 'secret',        'response_type' =&gt; 'array',        'log' =&gt; [            'level' =&gt; 'debug',         // 'file' =&gt; __DIR__.'/wechat.log',        ],    ];    $this-&gt;app = Factory::miniProgram($this-&gt;config);</code></pre><h3 id="小程序报错：Identifier-“subscribe-message”-is-not-defined"><a href="#小程序报错：Identifier-“subscribe-message”-is-not-defined" class="headerlink" title="小程序报错：Identifier “subscribe_message” is not defined."></a>小程序报错：Identifier “subscribe_message” is not defined.</h3><blockquote><p>报错的原因是当前的laravel-wechat版本过低，<strong>需要更新</strong>，小程序订阅消息是后续新增的功能，所以说低版本用不了订阅消息。小程序的模板消息已停用，后续都会接入订阅消息。</p></blockquote><h3 id="小程序订阅消息推送"><a href="#小程序订阅消息推送" class="headerlink" title="小程序订阅消息推送"></a>小程序订阅消息推送</h3><pre><code>$send_data = [    'template_id' =&gt; 'template_id', // 所需下发的订阅模板id    'touser' =&gt; 'openid',     // 接收者（用户）的 openid    'page' =&gt; '/pages/index,       // 点击模板卡片后的跳转页面，仅限本小程序内的页面。支持带参数,（示例index?foo=bar）。该字段不填则模板无跳转。    'data' =&gt; [             // 模板内容，格式形如 { "key1": { "value": any }, "key2": { "value": any } }        'thing2' =&gt; [            'value' =&gt; '课程标题',        ],        'character_string6' =&gt; [            'value' =&gt; '1/1',        ],        'thing7' =&gt; [            'value' =&gt; '恭喜你已成功解锁这个课程',        ],    ],];// 非线上环境if (env('APP_ENV') != 'production') {    $send_data['miniprogramState'] = 'developer';}$this-&gt;app-&gt;subscribe_message-&gt;send($send_data);</code></pre><h3 id="根据-jsCode-获取用户-session-信息"><a href="#根据-jsCode-获取用户-session-信息" class="headerlink" title="根据 jsCode 获取用户 session 信息"></a>根据 jsCode 获取用户 session 信息</h3><pre><code>    $code = $this-&gt;request-&gt;input('code');    // 返回openid    $data = $this-&gt;app-&gt;auth-&gt;session($code);    $openid = $data['openid'];</code></pre><h3 id="微信小程序消息解密"><a href="#微信小程序消息解密" class="headerlink" title="微信小程序消息解密"></a>微信小程序消息解密</h3><pre><code>    $session = $this-&gt;request-&gt;input('session');    $iv = $this-&gt;request-&gt;input('iv');    $encryptedData = $this-&gt;request-&gt;input('encryptedData');    $decrypted = AES::decrypt(     base64_decode($encryptedData, false), base64_decode($session, false), base64_decode($iv, false)    );    $decrypted = json_decode($decrypted, true);</code></pre><h2 id="持续更新中"><a href="#持续更新中" class="headerlink" title="持续更新中~"></a>持续更新中<del>~</del></h2><p><a href="https://juejin.im/post/5dc77c21e51d452bfd695daa">掘金地址</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php实现防垃圾手机号注册功能(接入阿里云风险识别)</title>
      <link href="2019/12/09/php/php%E5%AE%9E%E7%8E%B0%E9%98%B2%E5%9E%83%E5%9C%BE%E6%89%8B%E6%9C%BA%E5%8F%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD/"/>
      <url>2019/12/09/php/php%E5%AE%9E%E7%8E%B0%E9%98%B2%E5%9E%83%E5%9C%BE%E6%89%8B%E6%9C%BA%E5%8F%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="使用场景介绍"><a href="#使用场景介绍" class="headerlink" title="使用场景介绍"></a>使用场景介绍</h2><blockquote><p>本司的使用场景是：做营销活动，邀请新用户得某某实物，这时候会有用户使用接码平台，利用国内或国外手机号进行注册，默认是黑号，所以要进行拦截，由此调研，确定使用阿里云的风险识别<br><a id="more"></a><br><a href="https://help.aliyun.com/product/69981.html?spm=a2c4g.11186623.6.540.48d84afa378QtB">阿里云风险识别文档</a></p><h3 id="产品定位"><a href="#产品定位" class="headerlink" title="产品定位"></a>产品定位</h3><p>风险识别（Fraud Detection）基于阿里巴巴安全团队多年风控技术的积累，结合阿里云、淘宝、支付宝等平台的风险运营经验，为企业用户提供智能、轻量、成熟的业务风控解决方案，快速解决业务安全风险，降低损失。</p><p>目前的产品包括：注册风险识别（基础版与增强版）、营销风险识别（基础版与增强版）、登录风险识别（基础版与增强版）、设备风险识别、业务风险情报、邮箱画像、地址评分。</p></blockquote><h2 id="PHP-SDK"><a href="#PHP-SDK" class="headerlink" title="PHP SDK"></a>PHP SDK</h2><p>PHP SDK 源码下载：<a href="https://github.com/aliyun/aliyun-openapi-php-sdk">https://github.com/aliyun/aliyun-openapi-php-sdk</a></p><p>PHP SDK的环境准备、安装使用可参考：<a href="https://help.aliyun.com/document_detail/53111.html?spm=a2c4g.11186623.2.19.46dc17cdlGiAtO">阿里云SDK开发指南</a></p><p>克隆阿里云的php sdk 库</p><pre><code>git clone https://github.com/aliyun/aliyun-openapi-php-sdk.git</code></pre><p>实际使用到的文件夹如下：aliyun-php-sdk-core、aliyun-php-sdk-saf<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8yOC8xNmVhZmYxOTRkMWNkMzY2?x-oss-process=image/format,png" alt=""></p><h3 id="公共参数介绍"><a href="#公共参数介绍" class="headerlink" title="公共参数介绍"></a>公共参数介绍</h3><blockquote><p>服务接口的入参参数包含公共请求参数和具体服务事件参数，公共请求参数是指每一个接口都需要使用到的参数，点击跳转到<a href="https://help.aliyun.com/document_detail/70058.html?spm=a2c4g.11186623.6.554.1654741c2uEDSj">阿里云公共请求参数文档</a>。</p></blockquote><h4 id="Service参数"><a href="#Service参数" class="headerlink" title="Service参数"></a>Service参数</h4><blockquote><p>阿里云云盾颁发的服务code，不可随意设置。以下是境内常用到的code、如果更多信息，请查看<a href="https://help.aliyun.com/document_detail/70058.html?spm=a2c4g.11186623.6.554.1654741c2uEDSj">文档</a>。</p></blockquote><ul><li>注册风险识别-增强版服务的code是account_abuse_pro</li><li>注册风险识别服务的code是account_abuse</li><li>营销风险识别-增强版服务的code是coupon_abuse_pro</li><li>营销风险识别服务的code是coupon_abuse</li><li>登录风险识别-增强版服务的code是account_takeover_pro</li><li>登录风险识别服务的code是account_takeover</li><li>设备风险识别服务的code是device_risk</li></ul><h2 id="开始php实战"><a href="#开始php实战" class="headerlink" title="开始php实战"></a>开始php实战</h2><h3 id="首先封装一个tools文件-AliApi-php"><a href="#首先封装一个tools文件-AliApi-php" class="headerlink" title="首先封装一个tools文件:AliApi.php"></a>首先封装一个tools文件:AliApi.php</h3><pre class=" language-lang-php"><code class="language-lang-php"><?php/** * 阿里api * User: https://github.com/WXiangQian */namespace App\Http\Tools;use saf\Request\V20180919 as saf;class ALiApi{    public static function run($json_data)    {        include_once __DIR__.'/aliyun-openapi-php-sdk/aliyun-php-sdk-core/Config.php';        // 初始化        // 实战使用的是laravel框架 env()默认为配置参数，其它框架可自行设置        $iClientProfile = \DefaultProfile::getProfile("cn-shanghai", env("ACCESS_KEY_ID",''), env("ACCESS_SECRET_ID",''));        $client = new \DefaultAcsClient($iClientProfile);        // 设置参数        $request = new saf\ExecuteRequestRequest();        // 产品service请参考[公共参数]文档中的Service字段描述        $request->setService('account_abuse'); // 注册风险识别服务        $request->setServiceParameters($json_data);        // 发起请求        $response = $client->getAcsResponse($request);        // 请求正常。        if ($response->Code == 200) {            $score = 0;            // 注册风险识别服务返回的Data参数中的score值，值区间在0~100之间，值越大代表行为的风险程度越大。            if (isset($response->Data->Score)) {                $score = $response->Data->Score;            }             // 将调用过风险识别的数据存到redis（后台可用list分页）            $data = json_decode($json_data);            getRedis()->lPush('list:sms',$data->mobile.'_'.$score);            return self::handle_score($score);        }        switch ($response->Code) {            case 400: $msg = 'ServiceParameters(事件参数)不合法';break;            case 402: $msg = '日QPS超过已购规格，限流。';break;            case 403: $msg = '权限不足，服务未开通或已到期。';break;            case 404: $msg = 'Service(服务参数）不合法。';break;            case 500: $msg = '内部服务器错误。';break;            default : $msg = $response->Code;break;        }        // 自定义日志处理 可有可无        write_log('ali-注册风险识别事件','info','logs/ali_sdk.log','错误信息:'.$msg);        return 'error';    }    public static function handle_score($score)    {        $score = intval($score);        /**         * 0到35（不含）    低风险    可放过         * 35（含）到65（不含）    中风险    可打标观察         * 65（含）到85（不含）    中高风险    可进一步安全验证或限制高危业务使用权限         * 85（含）到100（含）    高风险    可限制高危业务使用权限         */        $bool = false;        if ($score >= 0 && $score < 65) {            $bool = true;        }        return $bool;    }}</code></pre><h3 id="控制器调用"><a href="#控制器调用" class="headerlink" title="控制器调用"></a>控制器调用</h3><blockquote><p>下方为实战demo，具体参数定义请查看<a href="https://help.aliyun.com/document_detail/70070.html?spm=a2c4g.11186623.6.556.76ec741c6ZBYGB">注册风险识别事件及返回参数</a></p></blockquote><pre class=" language-lang-php"><code class="language-lang-php">/** * 防垃圾手机号注册问题 * @param $phone_num 手机号码 * @param $area_code 地区代码 * User: https://github.com/WXiangQian */public function ali_api_check(Request $request){    // 默认国内手机号。如有海外手机，需包含国家地区代码，格式为”地区代码-手机号码“    $phone_num = strtolower( $request->input('phone_num') );    $phone_num = str_replace(' ','',$phone_num);    $area_code = $request->input('area_code','0086'); // 地区代码 默认0086     $new_phone_num = $phone_num;    if ($area_code != '0086') {        $new_phone_num = $area_code.'-'.$new_phone_num;    }    $arr = [        'mobile'=>$new_phone_num,        'operateTime'=>time(),        'ip'=>ip2long(Request::ip());,    ];    if (!empty($_SERVER['HTTP_REFERER'])) $arr['refer'] = $_SERVER["HTTP_REFERER"];    if (!empty($_SERVER['HTTP_USER_AGENT'])) $arr['userAgent'] = $_SERVER["HTTP_USER_AGENT"];    $json_data = json_encode($arr);    $ali_res = ALiApi::run($json_data);    if ($ali_res !== 'error') {        // 有风险        if ($ali_res === false) {            $this->ajaxReturn([                'errno'=>401,                'msg'=>'手机号码异常，请联系客服。'            ]);        }    }}</code></pre><h3 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h3><p><a href="https://github.com/WXiangQian/laravel-api">https://github.com/WXiangQian/laravel-api</a></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>本实战是用php语言简单接入了阿里云注册风险识别，使用框架为laravel框架，仅供参考，灵活运用方可适用于所有php框架，希望大家通过此文可以得到收获。</p></blockquote><p><a href="https://juejin.im/post/5ddf3559e51d4543172e8208">原文链接：</a><a href="https://juejin.im/post/5ddf3559e51d4543172e8208">https://juejin.im/post/5ddf3559e51d4543172e8208</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-PHP实战篇——常用的使用场景</title>
      <link href="2019/11/25/redis/Redis-PHP%E5%AE%9E%E6%88%98%E7%AF%87%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>2019/11/25/redis/Redis-PHP%E5%AE%9E%E6%88%98%E7%AF%87%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<p>Redis-PHP实战篇——常用的使用场景<br> <a id="more"></a></p><h2 id="redis-php实战"><a href="#redis-php实战" class="headerlink" title="redis-php实战"></a>redis-php实战</h2><pre><code>public function getRedis(){    $redis = new \Redis();    $redis-&gt;connect(env("REDIS_MASTER",'127.0.0.1'),6379);    $redis-&gt;auth(env('REDIS_AUTH','123456'));    return $redis;}$redis = $this-&gt;getRedis();</code></pre><h3 id="String-简单字符串缓存实战"><a href="#String-简单字符串缓存实战" class="headerlink" title="String 简单字符串缓存实战"></a>String 简单字符串缓存实战</h3><pre><code>$key  = 'str:name';// 字符串缓存实战$redis-&gt;set($key, 'WXiangQian');$name = $redis-&gt;get($key);echo $name; // WXiangQian$redis-&gt;expire($strCacheKey, 30);  # 设置30秒后过期</code></pre><h3 id="HSET-简单哈希缓存实战"><a href="#HSET-简单哈希缓存实战" class="headerlink" title="HSET  简单哈希缓存实战"></a>HSET  简单哈希缓存实战</h3><pre><code>$key = 'hset:name'$uid = 1;$redis-&gt;hSet($key, $uid, 'WXiangQian');$data = $redis-&gt;hGet($key, 1);print_r($data); //输出数据</code></pre><h3 id="排行榜实战"><a href="#排行榜实战" class="headerlink" title="排行榜实战"></a>排行榜实战</h3><pre><code>$strKey = 'zset:ranking_list';//存储数据$redis-&gt;zadd($strKey, '50', json_encode(['name' =&gt; 'Tom']));$redis-&gt;zadd($strKey, '70', json_encode(['name' =&gt; 'John']));$redis-&gt;zadd($strKey, '90', json_encode(['name' =&gt; 'Jerry']));$redis-&gt;zadd($strKey, '30', json_encode(['name' =&gt; 'Job']));$redis-&gt;zadd($strKey, '100', json_encode(['name' =&gt; 'LiMing']));$dataOne = $redis-&gt;ZREVRANGE($strKey, 0, -1, true);echo "---- {$strKey}由大到小的排序 ---- &lt;br /&gt;&lt;br /&gt;";print_r($dataOne);$dataTwo = $redis-&gt;ZRANGE($strKey, 0, -1, true);echo "&lt;br /&gt;&lt;br /&gt;---- {$strKey}由小到大的排序 ---- &lt;br /&gt;&lt;br /&gt;";print_r($dataTwo);</code></pre><h3 id="list分页实战"><a href="#list分页实战" class="headerlink" title="list分页实战"></a>list分页实战</h3><pre><code>$strKey = 'list:data';$page = $request-&gt;input('page',1);$pageSize = $request-&gt;input('limit',50);$limit_s = ($page-1) * $pageSize;$limit_e = ($limit_s + $pageSize) - 1;$data = $tools-&gt;redis-&gt;lRange($strKey,$limit_s,$limit_e);print_r($data);</code></pre><h3 id="简单字符串悲观锁实战"><a href="#简单字符串悲观锁实战" class="headerlink" title="简单字符串悲观锁实战"></a>简单字符串悲观锁实战</h3><p>解释：悲观锁(Pessimistic Lock), 顾名思义，就是很悲观。</p><p>每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁。</p><p>场景：如果项目中使用了缓存且对缓存设置了超时时间。</p><p>当并发量比较大的时候，如果没有锁机制，那么缓存过期的瞬间，</p><p>大量并发请求会穿透缓存直接查询数据库，造成雪崩效应。</p><pre><code>/** * 获取锁 * @param  String  $key    锁标识 * @param  Int     $expire 锁过期时间 * @return Boolean */public function lock($key = '', $expire = 5) {    $is_lock = $this-&gt;_redis-&gt;setnx($key, time()+$expire);    //不能获取锁    if(!$is_lock){        //判断锁是否过期        $lock_time = $this-&gt;_redis-&gt;get($key);        //锁已过期，删除锁，重新获取        if (time() &gt; $lock_time) {            unlock($key);            $is_lock = $this-&gt;_redis-&gt;setnx($key, time() + $expire);        }    }    return $is_lock? true : false;}/** * 释放锁 * @param  String  $key 锁标识 * @return Boolean */public function unlock($key = ''){    return $this-&gt;_redis-&gt;del($key);}// 定义锁标识$key = 'str:lock';// 获取锁$is_lock = lock($key, 10);if ($is_lock) {    echo 'get lock success&lt;br&gt;';    echo 'do sth..&lt;br&gt;';    sleep(5);    echo 'success&lt;br&gt;';    unlock($key);} else { //获取锁失败    echo 'request too frequently&lt;br&gt;';}</code></pre><h3 id="简单事务的乐观锁实战"><a href="#简单事务的乐观锁实战" class="headerlink" title="简单事务的乐观锁实战"></a>简单事务的乐观锁实战</h3><p>解释：乐观锁(Optimistic Lock), 顾名思义，就是很乐观。</p><p>每次去拿数据的时候都认为别人不会修改，所以不会上锁。</p><p>watch命令会监视给定的key，当exec时候如果监视的key从调用watch后发生过变化，则整个事务会失败。</p><p>也可以调用watch多次监视多个key。这样就可以对指定的key加乐观锁了。</p><p>注意watch的key是对整个连接有效的，事务也一样。</p><p>如果连接断开，监视和事务都会被自动清除。</p><p>当然了exec，discard，unwatch命令都会清除连接中的所有监视。</p><pre><code>$strKey = 'str:age';$redis-&gt;set($strKey,10);$age = $redis-&gt;get($strKey);echo "---- Current Age:{$age} ---- &lt;br/&gt;&lt;br/&gt;"; // 10$redis-&gt;watch($strKey);// 开启事务$redis-&gt;multi();//-------------------------------/** * 在这个时候新开了一个新会话执行 * * redis-cli 执行 $redis-&gt;set($strKey,30);  //新会话 模拟其他终端 * 这时候$age=30; //30 *///-------------------------------$redis-&gt;set($strKey,20);$redis-&gt;exec();$age = $redis-&gt;get($strKey);echo "---- Current Age:{$age} ---- &lt;br/&gt;&lt;br/&gt;"; //30//当exec时候如果监视的key从调用watch后发生过变化，则整个事务会失败</code></pre><h3 id="悲观锁与乐观锁的适用场景："><a href="#悲观锁与乐观锁的适用场景：" class="headerlink" title="悲观锁与乐观锁的适用场景："></a>悲观锁与乐观锁的适用场景：</h3><blockquote><p>悲观锁：比较适合写入操作比较频繁的场景，如果出现大量的读取操作，每次读取的时候都会进行加锁，这样会增加大量的锁的开销，降低了系统的吞吐量。</p><p>乐观锁：比较适合读取操作比较频繁的场景，如果出现大量的写入操作，数据发生冲突的可能性就会增大，为了保证数据的一致性，应用层需要不断的重新获取数据，这样会增加大量的查询操作，降低了系统的吞吐量。</p><p>总结：两种所各有优缺点，读取频繁使用乐观锁，写入频繁使用悲观锁。</p></blockquote><p>像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适,之所以用悲观锁就是因为两个用户更新同一条数据的概率高，也就是冲突比较严重的情况下，所以才用悲观锁.</p><p>悲观锁比较适合强一致性的场景，但效率比较低，特别是读的并发低。乐观锁则适用于读多写少，并发冲突少的场景</p><h2 id="redis篇集合"><a href="#redis篇集合" class="headerlink" title="redis篇集合"></a>redis篇集合</h2><p><a href="https://wxiangqian.blog.csdn.net/article/details/102595213">Redis基础篇——Redis安装</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/102717629">Redis基础篇——介绍以及了解</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/102902682">Redis基础篇——基本用法</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/103015298">Redis进阶篇——PHP连接redis</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/103243250">Redis-PHP实战篇——常用的使用场景</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis进阶篇——PHP连接redis</title>
      <link href="2019/11/20/redis/Redis%E8%BF%9B%E9%98%B6%E7%AF%87%E2%80%94%E2%80%94PHP%E8%BF%9E%E6%8E%A5redis/"/>
      <url>2019/11/20/redis/Redis%E8%BF%9B%E9%98%B6%E7%AF%87%E2%80%94%E2%80%94PHP%E8%BF%9E%E6%8E%A5redis/</url>
      
        <content type="html"><![CDATA[<p>Redis进阶篇——PHP连接redis<br> <a id="more"></a></p><h2 id="PHP连接redis"><a href="#PHP连接redis" class="headerlink" title="PHP连接redis"></a>PHP连接redis</h2><h3 id="正常PHP连接redis"><a href="#正常PHP连接redis" class="headerlink" title="正常PHP连接redis"></a>正常PHP连接redis</h3><pre><code>public function getRedis(){    $redis = new \Redis();    $redis-&gt;connect(env("REDIS_MASTER",'127.0.0.1'),6379);    $redis-&gt;auth(env('REDIS_AUTH','123456'));    return $redis;}</code></pre><h3 id="设置一个只读用户，只用来读，不可写入，则是一下代码"><a href="#设置一个只读用户，只用来读，不可写入，则是一下代码" class="headerlink" title="设置一个只读用户，只用来读，不可写入，则是一下代码"></a>设置一个只读用户，只用来读，不可写入，则是一下代码</h3><pre><code>public function getRedis(){    $redis = new \Redis();    $redis-&gt;connect(env("REDIS_MASTER",'127.0.0.1'),6379);    $auth = env('REDIS_ONLY_READ_USER').":".env('REDIS_ONLY_READ_PWD');    $redis-&gt;auth($auth);    return $redis;}</code></pre><h3 id="简单使用redis"><a href="#简单使用redis" class="headerlink" title="简单使用redis"></a>简单使用redis</h3><pre><code>$this-&gt;getRedis()-&gt;set('name','WXiangQian');$name = $this-&gt;getRedis()-&gt;get('name');echo $name; // WXiangQian</code></pre><h2 id="redis篇集合"><a href="#redis篇集合" class="headerlink" title="redis篇集合"></a>redis篇集合</h2><p><a href="https://wxiangqian.blog.csdn.net/article/details/102595213">Redis基础篇——Redis安装</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/102717629">Redis基础篇——介绍以及了解</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/102902682">Redis基础篇——基本用法</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/103015298">Redis进阶篇——PHP连接redis</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/103243250">Redis-PHP实战篇——常用的使用场景</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础篇——基本用法</title>
      <link href="2019/11/14/redis/Redis%E5%9F%BA%E7%A1%80%E7%AF%87%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>2019/11/14/redis/Redis%E5%9F%BA%E7%A1%80%E7%AF%87%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Redis基础篇——基本用法<br><a id="more"></a></p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="Redis-键-key"><a href="#Redis-键-key" class="headerlink" title="Redis 键(key)"></a>Redis 键(key)</h3><p>Redis 键命令用于管理 redis 的键。</p><h4 id="Redis-DEL-命令"><a href="#Redis-DEL-命令" class="headerlink" title="Redis DEL 命令"></a>Redis DEL 命令</h4><p>Redis DEL 命令用于删除已存在的键。不存在的 key 会被忽略。</p><pre><code>redis 127.0.0.1:6379&gt; DEL KEY_NAME</code></pre><blockquote><p>在以上实例中 DEL 是一个命令， KEY_NAME 是一个键。 如果键被删除成功，命令执行后输出 (integer) 1，否则将输出 (integer) 0</p></blockquote><h4 id="Redis-EXISTS-命令"><a href="#Redis-EXISTS-命令" class="headerlink" title="Redis EXISTS 命令"></a>Redis EXISTS 命令</h4><p>Redis EXISTS 命令用于检查给定 key 是否存在。</p><pre><code>redis 127.0.0.1:6379&gt; EXISTS KEY_NAME</code></pre><blockquote><p>若 key 存在返回 1 ，否则返回 0 。</p></blockquote><h4 id="Redis-Expire-命令"><a href="#Redis-Expire-命令" class="headerlink" title="Redis Expire 命令"></a>Redis Expire 命令</h4><p>Redis Expire 命令用于设置 key 的过期时间，key 过期后将不再可用。单位以秒计。</p><pre><code>redis 127.0.0.1:6379&gt; Expire KEY_NAME TIME_IN_SECONDS</code></pre><blockquote><p>设置成功返回 1 。 当 key 不存在或者不能为 key 设置过期时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)返回 0 。</p></blockquote><h4 id="Redis-Type-命令"><a href="#Redis-Type-命令" class="headerlink" title="Redis Type 命令"></a>Redis Type 命令</h4><p>Redis Type 命令用于返回 key 所储存的值的类型。</p><pre><code>redis 127.0.0.1:6379&gt; TYPE KEY_NAME</code></pre><p>返回 key 的数据类型，数据类型有：</p><ol><li>none (key不存在)</li><li>string (字符串)</li><li>list (列表)</li><li>set (集合)</li><li>zset (有序集)</li><li>hash (哈希表)</li></ol><h3 id="Redis-字符串-String"><a href="#Redis-字符串-String" class="headerlink" title="Redis 字符串(String)"></a>Redis 字符串(String)</h3><p>Redis 字符串数据类型的相关命令用于管理 redis 字符串值</p><h4 id="Redis-SET-命令"><a href="#Redis-SET-命令" class="headerlink" title="Redis SET 命令"></a>Redis SET 命令</h4><p>Redis SET 命令用于设置给定 key 的值。如果 key 已经存储其他值， SET 就覆写旧值，且无视类型。</p><pre><code>redis 127.0.0.1:6379&gt; SET KEY_NAME VALUEOK</code></pre><blockquote><p>在 Redis 2.6.12 以前版本， SET 命令总是返回 OK 。<br>从 Redis 2.6.12 版本开始， SET 在设置操作成功完成时，才返回 OK </p></blockquote><h4 id="Redis-Get-命令"><a href="#Redis-Get-命令" class="headerlink" title="Redis Get 命令"></a>Redis Get 命令</h4><p>Redis Get 命令用于获取指定 key 的值。</p><pre><code>redis&gt; GET db(nil)redis&gt; SET db redisOKredis&gt; GET db"redis"</code></pre><blockquote><p>返回 key 的值，如果 key 不存在时，返回 nil。 如果 key 不是字符串类型，那么返回一个错误。</p></blockquote><h4 id="Redis-Incrby-命令"><a href="#Redis-Incrby-命令" class="headerlink" title="Redis Incrby 命令"></a>Redis Incrby 命令</h4><p>Redis Incrby 命令将 key 中储存的数字加上指定的增量值。</p><p>如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCRBY 命令。</p><p>如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。</p><p>本操作的值限制在 64 位(bit)有符号数字表示之内。</p><pre><code>redis&gt; SET rank 50OKredis&gt; INCRBY rank 20(integer) 70redis&gt; GET rank"70"</code></pre><blockquote><p>加上指定的增量值之后， key 的值。</p></blockquote><h4 id="Redis-Decrby-命令"><a href="#Redis-Decrby-命令" class="headerlink" title="Redis Decrby 命令"></a>Redis Decrby 命令</h4><p>Redis Decrby 命令将 key 所储存的值减去指定的减量值。</p><p>如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECRBY 操作。</p><p>如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。</p><p>本操作的值限制在 64 位(bit)有符号数字表示之内。</p><pre><code>redis&gt; SET count 100OKredis&gt; DECRBY count 20(integer) 80</code></pre><blockquote><p>减去指定减量值之后， key 的值。</p></blockquote><h3 id="Redis-哈希-Hash"><a href="#Redis-哈希-Hash" class="headerlink" title="Redis 哈希(Hash)"></a>Redis 哈希(Hash)</h3><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p><p>Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。</p><h4 id="Redis-Hset-命令"><a href="#Redis-Hset-命令" class="headerlink" title="Redis Hset 命令"></a>Redis Hset 命令</h4><p>Redis Hset 命令用于为哈希表中的字段赋值 。</p><p>如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。</p><p>如果字段已经存在于哈希表中，旧值将被覆盖。</p><pre><code>redis 127.0.0.1:6379&gt; HSET myhash field1 "foo"OK</code></pre><blockquote><p>如果字段是哈希表中的一个新建字段，并且值设置成功，返回 1 。 如果哈希表中域字段已经存在且旧值已被新值覆盖，返回 0 。</p></blockquote><h4 id="Redis-Hget-命令"><a href="#Redis-Hget-命令" class="headerlink" title="Redis Hget 命令"></a>Redis Hget 命令</h4><p>Redis Hget 命令用于返回哈希表中指定字段的值。</p><pre><code>redis&gt; HGET myhash field1"foo"</code></pre><blockquote><p>返回给定字段的值。如果给定的字段或 key 不存在时，返回 nil 。</p></blockquote><h4 id="Redis-Hgetall-命令"><a href="#Redis-Hgetall-命令" class="headerlink" title="Redis Hgetall 命令"></a>Redis Hgetall 命令</h4><p>Redis Hgetall 命令用于返回哈希表中，所有的字段和值。</p><p>在返回值里，紧跟每个字段名(field name)之后是字段的值(value)，所以返回值的长度是哈希表大小的两倍。</p><pre><code>redis&gt; HSET myhash field1 "Hello"(integer) 1redis&gt; HSET myhash field2 "World"(integer) 1redis&gt; HGETALL myhash1) "field1"2) "Hello"3) "field2"4) "World"redis&gt;</code></pre><blockquote><p>以列表形式返回哈希表的字段及字段值。 若 key 不存在，返回空列表。</p></blockquote><h3 id="Redis-列表-List"><a href="#Redis-列表-List" class="headerlink" title="Redis 列表(List)"></a>Redis 列表(List)</h3><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p><h4 id="Redis-Rpush-命令"><a href="#Redis-Rpush-命令" class="headerlink" title="Redis Rpush 命令"></a>Redis Rpush 命令</h4><p>Redis Rpush 命令用于将一个或多个值插入到列表的尾部(最右边)。</p><p>如果列表不存在，一个空列表会被创建并执行 RPUSH 操作。 当列表存在但不是列表类型时，返回一个错误。</p><p>注意：在 Redis 2.4 版本以前的 RPUSH 命令，都只接受单个 value 值。</p><pre><code>redis 127.0.0.1:6379&gt; RPUSH mylist "hello"(integer) 1redis 127.0.0.1:6379&gt; RPUSH mylist "hello"(integer) 2redis 127.0.0.1:6379&gt; RPUSH mylist "foo"(integer) 3redis 127.0.0.1:6379&gt; RPUSH mylist "bar"(integer) 4</code></pre><blockquote><p>执行 RPUSH 操作后，列表的长度。</p></blockquote><h4 id="Redis-Ltrim-命令"><a href="#Redis-Ltrim-命令" class="headerlink" title="Redis Ltrim 命令"></a>Redis Ltrim 命令</h4><p>Redis Ltrim 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</p><p>下标 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</p><pre><code>redis 127.0.0.1:6379&gt; LRANGE mylist 0 -11) "hello"2) "foo"3) "bar"</code></pre><blockquote><p>命令执行成功时，返回 ok 。</p></blockquote><h3 id="Redis-集合-Set"><a href="#Redis-集合-Set" class="headerlink" title="Redis 集合(Set)"></a>Redis 集合(Set)</h3><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p><h4 id="Redis-Sadd-命令"><a href="#Redis-Sadd-命令" class="headerlink" title="Redis Sadd 命令"></a>Redis Sadd 命令</h4><p>Redis Sadd 命令将一个或多个成员元素加入到集合中，已经存在于集合的成员元素将被忽略。</p><p>假如集合 key 不存在，则创建一个只包含添加的元素作成员的集合。</p><p>当集合 key 不是集合类型时，返回一个错误。</p><p>注意：在 Redis2.4 版本以前， SADD 只接受单个成员值。</p><pre><code>redis 127.0.0.1:6379&gt; SADD myset "hello"(integer) 1redis 127.0.0.1:6379&gt; SADD myset "foo"(integer) 1redis 127.0.0.1:6379&gt; SADD myset "hello"(integer) 0</code></pre><blockquote><p>被添加到集合中的新元素的数量，不包括被忽略的元素。</p></blockquote><h4 id="Redis-Smembers-命令"><a href="#Redis-Smembers-命令" class="headerlink" title="Redis Smembers 命令"></a>Redis Smembers 命令</h4><p>Redis Smembers 命令返回集合中的所有的成员。 不存在的集合 key 被视为空集合。</p><pre><code>redis 127.0.0.1:6379&gt; SMEMBERS myset11) "World"2) "Hello"</code></pre><blockquote><p>集合中的所有成员。</p></blockquote><h3 id="Redis-有序集合-sorted-set"><a href="#Redis-有序集合-sorted-set" class="headerlink" title="Redis 有序集合(sorted set)"></a>Redis 有序集合(sorted set)</h3><p>Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>有序集合的成员是唯一的,但分数(score)却可以重复。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p><h4 id="Redis-Zadd-命令"><a href="#Redis-Zadd-命令" class="headerlink" title="Redis Zadd 命令"></a>Redis Zadd 命令</h4><p>Redis Zadd 命令用于将一个或多个成员元素及其分数值加入到有序集当中。</p><p>如果某个成员已经是有序集的成员，那么更新这个成员的分数值，并通过重新插入这个成员元素，来保证该成员在正确的位置上。</p><p>分数值可以是整数值或双精度浮点数。</p><p>如果有序集合 key 不存在，则创建一个空的有序集并执行 ZADD 操作。</p><p>当 key 存在但不是有序集类型时，返回一个错误。</p><p>注意： 在 Redis 2.4 版本以前， ZADD 每次只能添加一个元素。</p><pre><code>redis&gt; ZADD myzset 1 "one"(integer) 1redis&gt; ZADD myzset 1 "uno"(integer) 1redis&gt; ZADD myzset 2 "two" 3 "three"(integer) 2</code></pre><blockquote><p>被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。</p></blockquote><h4 id="Redis-Zcount-命令"><a href="#Redis-Zcount-命令" class="headerlink" title="Redis Zcount 命令"></a>Redis Zcount 命令</h4><p>Redis Zcount 命令用于计算有序集合中指定分数区间的成员数量。</p><pre><code>redis 127.0.0.1:6379&gt; ZCOUNT myzset 1 3(integer) 4</code></pre><blockquote><p>分数值在 min 和 max 之间的成员的数量。</p></blockquote><h4 id="Redis-Zrange-命令"><a href="#Redis-Zrange-命令" class="headerlink" title="Redis Zrange 命令"></a>Redis Zrange 命令</h4><p>Redis Zrange 返回有序集中，指定区间内的成员。</p><p>其中成员的位置按分数值递增(从小到大)来排序。</p><p>具有相同分数值的成员按字典序(lexicographical order )来排列。</p><p>如果你需要成员按</p><p>值递减(从大到小)来排列，请使用 ZREVRANGE 命令。</p><p>下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。</p><p>你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。</p><pre><code>redis 127.0.0.1:6379&gt; ZRANGE salary 0 -1 WITHSCORES             # 显示整个有序集成员1) "jack"2) "3500"3) "tom"4) "5000"5) "boss"6) "10086"</code></pre><blockquote><p>指定区间内，带有分数值(可选)的有序集成员的列表。</p></blockquote><h4 id="Redis-Zrevrange-命令"><a href="#Redis-Zrevrange-命令" class="headerlink" title="Redis Zrevrange 命令"></a>Redis Zrevrange 命令</h4><p>Redis Zrevrange 命令返回有序集中，指定区间内的成员。</p><p>其中成员的位置按分数值递减(从大到小)来排列。</p><p>具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。</p><p>除了成员按分数值递减的次序排列这一点外， ZREVRANGE 命令的其他方面和 ZRANGE 命令一样。</p><pre><code>redis 127.0.0.1:6379&gt; ZRANGE salary 0 -1 WITHSCORES        # 递增排列1) "peter"2) "3500"3) "tom"4) "4000"5) "jack"6) "5000"redis 127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 WITHSCORES     # 递减排列1) "jack"2) "5000"3) "tom"4) "4000"5) "peter"6) "3500"</code></pre><blockquote><p>指定区间内，带有分数值(可选)的有序集成员的列表。</p></blockquote><h4 id="Redis-Zscore-命令"><a href="#Redis-Zscore-命令" class="headerlink" title="Redis Zscore 命令"></a>Redis Zscore 命令</h4><p>Redis Zscore 命令返回有序集中，成员的分数值。 如果成员元素不是有序集 key 的成员，或 key 不存在，返回 nil 。</p><pre><code>redis 127.0.0.1:6379&gt; ZSCORE salary peter              # 注意返回值是字符串"3500"</code></pre><blockquote><p>成员的分数值，以字符串形式表示。</p></blockquote><h2 id="redis篇集合"><a href="#redis篇集合" class="headerlink" title="redis篇集合"></a>redis篇集合</h2><p><a href="https://wxiangqian.blog.csdn.net/article/details/102595213">Redis基础篇——Redis安装</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/102717629">Redis基础篇——介绍以及了解</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/102902682">Redis基础篇——基本用法</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/103015298">Redis进阶篇——PHP连接redis</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/103243250">Redis-PHP实战篇——常用的使用场景</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础篇——介绍以及了解</title>
      <link href="2019/10/23/redis/Redis%E5%9F%BA%E7%A1%80%E7%AF%87%E2%80%94%E2%80%94%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E4%BA%86%E8%A7%A3/"/>
      <url>2019/10/23/redis/Redis%E5%9F%BA%E7%A1%80%E7%AF%87%E2%80%94%E2%80%94%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>Redis基础篇——介绍以及了解<br><a id="more"></a></p><h2 id="Redis基础篇"><a href="#Redis基础篇" class="headerlink" title="Redis基础篇"></a>Redis基础篇</h2><h3 id="Redis-介绍"><a href="#Redis-介绍" class="headerlink" title="Redis 介绍"></a>Redis 介绍</h3><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</p><p>Redis 与其他 key - value 缓存产品有以下三个特点：</p><ol><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ol><h3 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h3><ol><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ol><h3 id="Redis与其他key-value存储有什么不同？"><a href="#Redis与其他key-value存储有什么不同？" class="headerlink" title="Redis与其他key-value存储有什么不同？"></a>Redis与其他key-value存储有什么不同？</h3><ol><li><p>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</p></li><li><p>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</p></li></ol><h3 id="Redis-特点"><a href="#Redis-特点" class="headerlink" title="Redis 特点"></a>Redis 特点</h3><ul><li>支持数据持久化，可将内存中的数据保存在磁盘，重启时再次加载</li><li>支持 KV 类型数据，也支持其他丰富的数据结构存储</li><li>支持数据备份，即 master-slave 模式的数据备份</li></ul><h3 id="Redis-支持哪些数据结构"><a href="#Redis-支持哪些数据结构" class="headerlink" title="Redis 支持哪些数据结构"></a>Redis 支持哪些数据结构</h3><ul><li><p>STRING：字符串、整数或浮点数</p></li><li><p>LIST：列表，可存储多个相同的字符串</p></li><li><p>SET：集合，存储不同元素，无序排列</p></li><li><p>HASH：散列表，存储键值对之间的映射，无序排列</p></li><li><p>ZSET：有序集合，存储键值对，有序排列</p></li></ul><h3 id="Redis-与-Memcache-区别"><a href="#Redis-与-Memcache-区别" class="headerlink" title="Redis 与 Memcache 区别"></a>Redis 与 Memcache 区别</h3><div class="table-container"><table><thead><tr><th>对比项</th><th>Redis</th><th>Memcache</th></tr></thead><tbody><tr><td>数据结构</td><td>丰富数据类型</td><td>只支持简单 KV 数据类型</td></tr><tr><td>数据一致性</td><td>事务</td><td>cas</td></tr><tr><td>持久性</td><td>快照/AOF</td><td>不支持</td></tr><tr><td>网络IO</td><td>单线程 IO 复用</td><td>多线程、非阻塞 IO 复用</td></tr><tr><td>内存管理机制</td><td>现场申请内存</td><td>预分配内存</td></tr></tbody></table></div><h3 id="为什么-Redis-是单线程的"><a href="#为什么-Redis-是单线程的" class="headerlink" title="为什么 Redis 是单线程的"></a>为什么 Redis 是单线程的</h3><p>Redis 是基于内存的操作，CPU 不是 Redis 的瓶颈，Redis 瓶颈最有可能是内存或网络。而且单线程容易实现，避免了不必要的上下文切换和竞争条件，不存在多线程切换消耗 CPU</p><h3 id="各个数据类型应用场景："><a href="#各个数据类型应用场景：" class="headerlink" title="各个数据类型应用场景："></a>各个数据类型应用场景：</h3><div class="table-container"><table><thead><tr><th>类型</th><th>简介</th><th>特性</th><th>场景</th></tr></thead><tbody><tr><td>String(字符串)</td><td>二进制安全</td><td>可以包含任何数据,比如jpg图片或者序列化的对象,一个键最大能存储512M</td><td>—-</td></tr><tr><td>Hash(字典)</td><td>键值对集合,即编程语言中的Map类型</td><td>适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td><td>存储、读取、修改用户属性</td></tr><tr><td>List(列表)</td><td>链表(双向链表)</td><td>增删快,提供了操作某一段元素的API</td><td>1,最新消息排行等功能(比如朋友圈的时间线) 2,消息队列</td></tr><tr><td>Set(集合)</td><td>哈希表实现,元素不重复</td><td>1、添加、删除,查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td><td>1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td></tr><tr><td>Sorted Set(有序集合)</td><td>将Set中的元素增加一个权重参数score,元素按score有序排列</td><td>数据插入集合时,已经进行天然排序</td><td>1、排行榜 2、带权重的消息队列</td></tr></tbody></table></div><h2 id="redis篇集合"><a href="#redis篇集合" class="headerlink" title="redis篇集合"></a>redis篇集合</h2><p><a href="https://wxiangqian.blog.csdn.net/article/details/102595213">Redis基础篇——Redis安装</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/102717629">Redis基础篇——介绍以及了解</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/102902682">Redis基础篇——基本用法</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/103015298">Redis进阶篇——PHP连接redis</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/103243250">Redis-PHP实战篇——常用的使用场景</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础篇——Redis安装</title>
      <link href="2019/10/22/redis/Redis%E5%9F%BA%E7%A1%80%E7%AF%87%E2%80%94%E2%80%94Redis%E5%AE%89%E8%A3%85/"/>
      <url>2019/10/22/redis/Redis%E5%9F%BA%E7%A1%80%E7%AF%87%E2%80%94%E2%80%94Redis%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>Redis基础篇——Redis安装（linux &amp;&amp; Windows）<br><a id="more"></a></p><h2 id="Linux-下安装"><a href="#Linux-下安装" class="headerlink" title="Linux 下安装"></a>Linux 下安装</h2><h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h3><p>下载地址：<a href="http://redis.io/download">http://redis.io/download</a>，下载最新稳定版本。</p><h4 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h4><pre><code>tar -xvf redis-5.0.0.tar.gzcd redis-5.0.0#编译并安装make &amp;&amp; make install</code></pre><h4 id="启动-Redis"><a href="#启动-Redis" class="headerlink" title="启动 Redis"></a>启动 Redis</h4><pre><code>redis-server</code></pre><h4 id="查看-redis-是否启动？"><a href="#查看-redis-是否启动？" class="headerlink" title="查看 redis 是否启动？"></a>查看 redis 是否启动？</h4><pre><code>redis-cli</code></pre><p>以上命令将打开以下终端：</p><pre><code>redis 127.0.0.1:6379&gt;127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。</code></pre><h3 id="安装php-redis扩展"><a href="#安装php-redis扩展" class="headerlink" title="安装php-redis扩展"></a>安装php-redis扩展</h3><p>在github选择相应的安装包进行下载<a href="https://github.com/phpredis/phpredis/releases">https://github.com/phpredis/phpredis/releases</a></p><pre><code>#还是进入到download文件夹下面 cd /download/#获取安装包wget http://pecl.php.net/get/redis-5.0.2.tgz#解压，并进入安装目录 tar -zxvf redis-5.0.2.tgzcd redis-5.0.2/usr/bin/phpize#载入配置 根据你安装实际目录载入./configure --with-php-config=/usr/local/php/bin/php-config#编译并安装make &amp;&amp; make install#修改php.ini 加入 extension="redis.so":wq#保存退出，重启php-fpm</code></pre><h2 id="Windows-下安装"><a href="#Windows-下安装" class="headerlink" title="Windows 下安装"></a>Windows 下安装</h2><h3 id="安装redis-1"><a href="#安装redis-1" class="headerlink" title="安装redis"></a>安装redis</h3><p>官方是没有支持Windows系统的，但是微软自己就做了一个支持win64位系统的，<a href="https://github.com/microsoftarchive/redis/releases">github地址</a></p><h4 id="下载-Redis-x64-xxx-zip压缩包"><a href="#下载-Redis-x64-xxx-zip压缩包" class="headerlink" title="下载 Redis-x64-xxx.zip压缩包"></a>下载 Redis-x64-xxx.zip压缩包</h4><p><img src="https://user-gold-cdn.xitu.io/2019/10/16/16dd491ced88c447?w=1626&amp;h=426&amp;f=png&amp;s=141159" alt=""></p><p>新建文件夹redis，解压到redis文件夹内<br><img src="https://user-gold-cdn.xitu.io/2019/10/16/16dd491adfa7a9ed?w=697&amp;h=415&amp;f=png&amp;s=56599" alt=""></p><h4 id="打开一个-cmd-窗口-使用-cd-命令切换目录到-C-redis-运行："><a href="#打开一个-cmd-窗口-使用-cd-命令切换目录到-C-redis-运行：" class="headerlink" title="打开一个 cmd 窗口 使用 cd 命令切换目录到 C:\redis 运行："></a>打开一个 cmd 窗口 使用 cd 命令切换目录到 C:\redis 运行：</h4><pre><code>redis-server.exe redis.windows.conf</code></pre><p>如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。</p><h4 id="配置redis环境变量-把redis路径配置到系统变量的path值中"><a href="#配置redis环境变量-把redis路径配置到系统变量的path值中" class="headerlink" title="配置redis环境变量,把redis路径配置到系统变量的path值中"></a>配置redis环境变量,把redis路径配置到系统变量的path值中</h4><p><img src="https://user-gold-cdn.xitu.io/2019/10/16/16dd49659a699a5d?w=612&amp;h=116&amp;f=png&amp;s=6816" alt=""></p><p>输入之后，会显示如下界面：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/16/16dd493c292f325f?w=811&amp;h=441&amp;f=png&amp;s=23895" alt=""></p><p>这时候另启一个 cmd 窗口，原来的不要关闭，不然就无法访问服务端了。</p><p>切换到 redis 目录下运行:</p><pre><code>redis-cli.exe -h 127.0.0.1 -p 6379</code></pre><h4 id="设置键值对"><a href="#设置键值对" class="headerlink" title="设置键值对:"></a>设置键值对:</h4><pre><code>set name WXiangQian</code></pre><h4 id="取出键值对"><a href="#取出键值对" class="headerlink" title="取出键值对:"></a>取出键值对:</h4><pre><code> get name</code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/10/16/16dd49a704f1e270?w=360&amp;h=157&amp;f=png&amp;s=4940" alt=""></p><h4 id="将redis加入到windows的服务中（service和loglevel前都是两个-）开机自启动"><a href="#将redis加入到windows的服务中（service和loglevel前都是两个-）开机自启动" class="headerlink" title="将redis加入到windows的服务中（service和loglevel前都是两个-）开机自启动"></a>将redis加入到windows的服务中（service和loglevel前都是两个-）开机自启动</h4><pre><code>redis-server --service-install redis.windows-service.conf --loglevel verbose</code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/10/16/16dd49f02afea009?w=712&amp;h=74&amp;f=png&amp;s=3492" alt=""></p><h3 id="安装PHP扩展"><a href="#安装PHP扩展" class="headerlink" title="安装PHP扩展"></a>安装PHP扩展</h3><h4 id="使用phpinfo-函数查看PHP的版本信息，这会决定扩展文件版本"><a href="#使用phpinfo-函数查看PHP的版本信息，这会决定扩展文件版本" class="headerlink" title="使用phpinfo()函数查看PHP的版本信息，这会决定扩展文件版本"></a>使用phpinfo()函数查看PHP的版本信息，这会决定扩展文件版本</h4><p><img src="https://user-gold-cdn.xitu.io/2019/10/16/16dd4a62f145e972?w=631&amp;h=550&amp;f=png&amp;s=49958" alt=""></p><h4 id="根据PHP版本号，编译器版本号和CPU架构，选择对相应版本，这里选择"><a href="#根据PHP版本号，编译器版本号和CPU架构，选择对相应版本，这里选择" class="headerlink" title="根据PHP版本号，编译器版本号和CPU架构，选择对相应版本，这里选择:"></a>根据PHP版本号，编译器版本号和CPU架构，选择对相应版本，这里选择:</h4><p><a href="https://windows.php.net/downloads/pecl/releases/redis/5.0.2/">https://windows.php.net/downloads/pecl/releases/redis/5.0.2/</a><br><a href="https://windows.php.net/downloads/pecl/releases/redis/5.0.2/">https://windows.php.net/downloads/pecl/releases/igbinary/3.0.1/</a></p><p><img src="https://user-gold-cdn.xitu.io/2019/10/16/16dd4b50d4562d36?w=530&amp;h=245&amp;f=png&amp;s=18471" alt=""><br><img src="https://user-gold-cdn.xitu.io/2019/10/16/16dd4b563ab33fc2?w=520&amp;h=237&amp;f=png&amp;s=18498" alt=""></p><h4 id="解压缩后，将php-redis-dll和php-igbinary-dll拷贝至php的ext目录下"><a href="#解压缩后，将php-redis-dll和php-igbinary-dll拷贝至php的ext目录下" class="headerlink" title="解压缩后，将php_redis.dll和php_igbinary.dll拷贝至php的ext目录下"></a>解压缩后，将php_redis.dll和php_igbinary.dll拷贝至php的ext目录下</h4><p><img src="https://user-gold-cdn.xitu.io/2019/10/16/16dd4abe2a4ff994?w=641&amp;h=508&amp;f=png&amp;s=84960" alt=""></p><h4 id="修改php-ini，在该文件中加入："><a href="#修改php-ini，在该文件中加入：" class="headerlink" title="修改php.ini，在该文件中加入："></a>修改php.ini，在该文件中加入：</h4><pre><code>; php_redisextension=php_igbinary.dllextension=php_redis.dll</code></pre><p><strong>注意</strong>：extension=php_igbinary.dll一定要放在extension=php_redis.dll的前面，否则此扩展不会生效 </p><p><img src="https://user-gold-cdn.xitu.io/2019/10/16/16dd4acb710cf4d8?w=239&amp;h=94&amp;f=png&amp;s=3548" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/10/16/16dd4b4435a49bd1?w=948&amp;h=130&amp;f=png&amp;s=9048" alt=""></p><h4 id="新建一个test-php页面"><a href="#新建一个test-php页面" class="headerlink" title="新建一个test.php页面"></a>新建一个test.php页面</h4><pre><code>&lt;?php    $redis = new Redis();    $redis-&gt;connect('127.0.0.1',6379);    $redis-&gt;set('name','WXiangQian');    echo $redis-&gt;get('name');?&gt;</code></pre><p>最后输出：WXiangQian</p><h2 id="redis篇集合"><a href="#redis篇集合" class="headerlink" title="redis篇集合"></a>redis篇集合</h2><p><a href="https://wxiangqian.blog.csdn.net/article/details/102595213">Redis基础篇——Redis安装</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/102717629">Redis基础篇——介绍以及了解</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/102902682">Redis基础篇——基本用法</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/103015298">Redis进阶篇——PHP连接redis</a></p><p><a href="https://wxiangqian.blog.csdn.net/article/details/103243250">Redis-PHP实战篇——常用的使用场景</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel的生命周期</title>
      <link href="2019/10/08/laravel/laravel%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>2019/10/08/laravel/laravel%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>世间万物皆有生命周期，当我们使用任何工具时都需要理解它的工作原理，那么用起来就会得心应手，应用开发也是如此。理解了它的原理，那么使用起来就会游刃有余。</p><p>在了解 Laravel 的生命周期前，我们先回顾一下PHP 的生命周期。<br><a id="more"></a></p></blockquote><h2 id="PHP-的生命周期"><a href="#PHP-的生命周期" class="headerlink" title="PHP 的生命周期"></a>PHP 的生命周期</h2><h3 id="PHP-的运行模式"><a href="#PHP-的运行模式" class="headerlink" title="PHP 的运行模式"></a>PHP 的运行模式</h3><p><a href="http://lib.csdn.net/base/php">PHP</a>两种运行模式是WEB模式、CLI模式。</p><ol><li>当我们在终端敲入php这个命令的时候，使用的是CLI模式。</li><li>当使用Nginx或者别web服务器作为宿主处理一个到来的请求时,使用的是WEB模式。</li></ol><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>当我们请求一个<code>php</code>文件时,PHP 为了完成这次请求，会发生5个阶段的生命周期切换:</p><ol><li><p>模块初始化（MINIT），即调用 <code>php.ini</code> 中指明的扩展的初始化函数进行初始化工作，如 <code>mysql</code> 扩展。</p></li><li><p>请求初始化（RINIT），即初始化为执行本次脚本所需要的变量名称和变量值内容的符号表，如 <code>$_SESSION</code>变量。</p></li><li><p>执行该PHP脚本。</p></li><li><p>请求处理完成(Request Shutdown)，按顺序调用各个模块的 <code>RSHUTDOWN</code> 方法，对每个变量调用 <code>unset</code>函数，如 <code>unset $_SESSION</code> 变量。</p></li><li><p>关闭模块(Module Shutdown) ， PHP调用每个扩展的 <code>MSHUTDOWN</code> 方法，这是各个模块最后一次释放内存的机会。这意味着没有下一个请求了。</p></li></ol><p>WEB模式和CLI（命令行）模式很相似，区别是：</p><ol><li>CLI 模式会在每次脚本执行经历完整的5个周期，因为你脚本执行完不会有下一个请求；</li><li>WEB模式为了应对并发，可能采用多线程，因此生命周期<code>1</code>和<code>5</code>有可能只执行一次，下次请求到来时重复<code>2-4</code>的生命周期，这样就节省了系统模块初始化所带来的开销。</li></ol><p>可以看出PHP生命周期是很对称的。说了这么多，就是为了定位Laravel运行在哪里，没错，Laravel仅仅运行再 第三个阶段：</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/27/16d717d150d98dce?w=797&amp;h=707&amp;f=png&amp;s=35997" alt="PHP生命周期"><br><strong>PHP生命周期</strong></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>理解这些，你就可以优化你的 <code>Laravel</code> 代码，可以更加深入的了解 Laravel 的<code>singleton</code>（单例）。至少你知道了，每一次请求结束，PHP 的变量都会 <code>unset</code>，Laravel 的 <code>singleton</code> 只是在某一次请求过程中的<code>singleton</code>；你在 Laravel 中的静态变量也不能在多个请求之间共享，因为每一次请求结束都会 <code>unset</code>。理解这些概念，是写高质量代码的第一步，也是最关键的一步。因此记住，PHP是一种脚本语言，所有的变量只会在这一次请求中生效，下次请求之时已被重置，而不像Java静态变量拥有全局作用。</p><h2 id="Laravel-的生命周期"><a href="#Laravel-的生命周期" class="headerlink" title="Laravel 的生命周期"></a>Laravel 的生命周期</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Laravel 的生命周期从<code>public\index.php</code>开始，从<code>public\index.php</code>结束。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/27/16d717db875cdb5c?w=913&amp;h=299&amp;f=png&amp;s=20324" alt="请求过程"><br><strong>请求过程</strong></p><p>下面是 <code>public\index.php</code>的全部源码,更具体来说可以分为四步：</p><pre><code>1. require __DIR__.'/../bootstrap/autoload.php';2. $app = require_once __DIR__.'/../bootstrap/app.php';   $kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);3. $response = $kernel-&gt;handle(      $request = Illuminate\Http\Request::capture()   );   $response-&gt;send();4. $kernel-&gt;terminate($request, $response);</code></pre><h4 id="以下是四步详细的解释是："><a href="#以下是四步详细的解释是：" class="headerlink" title="以下是四步详细的解释是："></a>以下是四步详细的解释是：</h4><p>composer自动加载需要的类</p><ol><li>文件载入composer生成的自动加载设置，包括所有你 <code>composer require</code>的依赖。</li><li>生成容器Container，Application实例，并向容器注册核心组件（HttpKernel，ConsoleKernel ，ExceptionHandler）（对应代码2，容器很重要，后面详细讲解）。</li><li>处理请求，生成并发送响应（对应代码3，毫不夸张的说，你99%的代码都运行在这个小小的handle 方法里面）。</li><li>请求结束，进行回调（对应代码4，还记得<a href="https://laravel.com/docs/5.3/middleware#terminable-middleware">可终止中间件</a>吗？没错，就是在这里回调的）。</li></ol><p><img src="https://user-gold-cdn.xitu.io/2019/9/27/16d717f6b368fa3a?w=1056&amp;h=659&amp;f=png&amp;s=56559" alt="Laravel 的请求步骤"><br><strong>Laravel 的请求步骤</strong></p><p>我们不妨在详细一点：</p><h4 id="第一步：注册加载composer自动生成的class-loader"><a href="#第一步：注册加载composer自动生成的class-loader" class="headerlink" title="第一步：注册加载composer自动生成的class loader"></a>第一步：注册加载composer自动生成的<code>class loader</code></h4><p>就是加载初始化第三方依赖。</p><h4 id="第二步：生成容器-Container"><a href="#第二步：生成容器-Container" class="headerlink" title="第二步：生成容器 Container"></a>第二步：生成容器 <code>Container</code></h4><p>并向容器注册核心组件，是从 <code>bootstrap/app.php</code> 脚本获取 Laravel 应用实例，</p><h4 id="第三步：这一步是重点，处理请求，并生成发送响应。"><a href="#第三步：这一步是重点，处理请求，并生成发送响应。" class="headerlink" title="第三步：这一步是重点，处理请求，并生成发送响应。"></a>第三步：这一步是重点，处理请求，并生成发送响应。</h4><p>请求被发送到 <code>HTTP</code> 内核或 <code>Console</code> 内核，这取决于进入应用的请求类型。</p><blockquote><p>取决于是通过浏览器请求还是通过控制台请求。这里我们主要是通过浏览器请求。</p></blockquote><p>HTTP 内核继承自 Illuminate\Foundation\Http\Kernel 类，该类定义了一个 bootstrappers 数组，这个数组中的类在请求被执行前运行，这些 bootstrappers 配置了错误处理、日志、检测应用环境以及其它在请求被处理前需要执行的任务。</p><pre class=" language-lang-php"><code class="language-lang-php">protected $bootstrappers = [    //注册系统环境配置 （.env）    'Illuminate\Foundation\Bootstrap\DetectEnvironment',    //注册系统配置（config）    'Illuminate\Foundation\Bootstrap\LoadConfiguration',    //注册日志配置    'Illuminate\Foundation\Bootstrap\ConfigureLogging',    //注册异常处理    'Illuminate\Foundation\Bootstrap\HandleExceptions',    //注册服务容器的门面，Facade 是个提供从容器访问对象的类。    'Illuminate\Foundation\Bootstrap\RegisterFacades',    //注册服务提供者    'Illuminate\Foundation\Bootstrap\RegisterProviders',    //注册服务提供者 `boot`    'Illuminate\Foundation\Bootstrap\BootProviders',];</code></pre><blockquote><p>注意顺序：</p><p><code>Facades</code> 先于<code>ServiceProviders</code>，<code>Facades</code>也是重点，后面说，这里简单提一下，注册 <code>Facades</code> 就是注册 <code>config\app.php</code>中的<code>aliases</code> 数组，你使用的很多类，如<code>Auth</code>，<code>Cache</code>,<code>DB</code>等等都是<code>Facades</code>；而<code>ServiceProviders</code>的<code>register</code>方法永远先于<code>boot</code>方法执行，以免产生<code>boot</code>方法依赖某个实例而该实例还未注册的现象。</p></blockquote><p>HTTP 内核还定义了一系列所有请求在处理前需要经过的 HTTP <a href="https://laravel.com/docs/5.4/middleware">中间件</a>，这些中间件处理 <a href="https://laravel.com/docs/5.4/session">HTTP 会话</a>的读写、判断应用是否处于维护模式、验证 <a href="https://laravel.com/docs/5.4/csrf">CSRF 令牌</a>等等。</p><blockquote><p>HTTP 内核的标志性方法 handle处理的逻辑相当简单：获取一个 <code>Request</code>，返回一个 <code>Response</code>，把该内核想象作一个代表整个应用的大黑盒子，输入 HTTP 请求，返回 HTTP 响应。</p></blockquote><h4 id="第四步：将请求传递给路由。"><a href="#第四步：将请求传递给路由。" class="headerlink" title="第四步：将请求传递给路由。"></a>第四步：将请求传递给路由。</h4><p>在Laravel基础的服务启动之后，就要把请求传递给路由了。路由器将会分发请求到路由或控制器，同时运行所有路由指定的中间件。</p><p>传递给路由是通过 <code>Pipeline</code>（管道）来传递的，但是Pipeline有一堵墙，在传递给路由之前所有请求都要经过，这堵墙定义在<code>app\Http\Kernel.php</code>中的<code>$middleware</code>数组中，没错就是中间件，默认只有一个<code>CheckForMaintenanceMode</code>中间件，用来检测你的网站是否暂时关闭。这是一个全局中间件，所有请求都要经过，你也可以添加自己的全局中间件。</p><p>然后遍历所有注册的路由，找到最先符合的第一个路由，经过它的路由中间件，进入到控制器或者闭包函数，执行你的具体逻辑代码。</p><p>所以，当请求到达你写的代码之前，Laravel已经做了大量工作，请求也经过了千难万险，那些不符合或者恶意的的请求已被Laravel隔离在外。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/27/16d717a0aa0a75ca?w=1748&amp;h=696&amp;f=png&amp;s=121137" alt="处理请求到响应过程"><br><strong>处理请求到响应过程</strong></p><p><a href="https://juejin.im/post/5d8db0426fb9a04dde1458a2">原文地址</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel实现Model的setAttribute、getAttribute、scopeQuery方法</title>
      <link href="2019/09/20/laravel/laravel%E5%AE%9E%E7%8E%B0Model%E7%9A%84setAttribute%E3%80%81getAttribute%E3%80%81scopeQuery%E6%96%B9%E6%B3%95/"/>
      <url>2019/09/20/laravel/laravel%E5%AE%9E%E7%8E%B0Model%E7%9A%84setAttribute%E3%80%81getAttribute%E3%80%81scopeQuery%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="首先要定义一个Model"><a href="#首先要定义一个Model" class="headerlink" title="首先要定义一个Model"></a>首先要定义一个Model</h3><h4 id="1-getAttribute的实现"><a href="#1-getAttribute的实现" class="headerlink" title="1.getAttribute的实现"></a>1.getAttribute的实现</h4><p>请getFooAttribute在模型上创建一个方法，其中Foo包含您要访问的列的“studly”外壳名称。在这个例子中，我们将为first_name属性定义一个访问器。尝试检索sex属性值时，Eloquent会自动调用访问者：<br><a id="more"></a></p><pre class=" language-lang-php"><code class="language-lang-php"><?phpnamespace App;use Illuminate\Database\Eloquent\Model;class User extends Model{    public function getSexAttribute($sex)    {        if ($sex == 1) return '男';        if ($sex == 2) return '女';        return '未知';    }}</code></pre><p>查询出来模型以后获取sex，将是男或者女或者未知</p><pre class=" language-lang-php"><code class="language-lang-php">$user = App\User::find(1);$sex = $user->sex;dd($sex); // 男</code></pre><h4 id="2-setAttribute的实现"><a href="#2-setAttribute的实现" class="headerlink" title="2.setAttribute的实现"></a>2.setAttribute的实现</h4><p>请getFooAttribute在模型上创建一个方法，其中Foo包含您要访问的列的“studly”外壳名称。在这个例子中，我们将为first_name属性定义一个访问器。尝试检索sex属性值时，Eloquent会自动调用访问者：</p><pre class=" language-lang-php"><code class="language-lang-php"><?phpnamespace App;use Illuminate\Database\Eloquent\Model;class User extends Model{    public function setSexAttribute($sex)    {       $this->attributes['sex'] = $sex;    }}</code></pre><p>查询出来模型以后获取sex，将是男或者女或者未知</p><pre class=" language-lang-php"><code class="language-lang-php">$user = App\User::find(1);$user->sex = '我是sex';dd($user->sex);   // 我是sex</code></pre><h4 id="3-scopeQuery的实现"><a href="#3-scopeQuery的实现" class="headerlink" title="3.scopeQuery的实现"></a>3.scopeQuery的实现</h4><p>本地范围允许您定义可在整个应用程序中轻松重用的常见约束集。例如，您可能需要经常检索所有被视为“受欢迎”的用户。要定义范围，请使用Eloquent模型方法作为前缀scope。范围应始终返回查询构建器实例：</p><pre class=" language-lang-php"><code class="language-lang-php"><?phpnamespace App;use Illuminate\Database\Eloquent\Model;class User extends Model{    public function scopeSex($query)    {        return $query->where('sex', 1);    }}</code></pre><p>定义后，可以在查询模型时调用该方法。但是，scope调用方法时不应包含前缀。您甚至可以将调用链接到各种范围，如：</p><pre class=" language-lang-php"><code class="language-lang-php">$users = App\User::sex()->orderBy('created_at')->get();</code></pre><h3 id="纯原创，希望可以对大家有帮助，如有疑问，欢迎评论"><a href="#纯原创，希望可以对大家有帮助，如有疑问，欢迎评论" class="headerlink" title="纯原创，希望可以对大家有帮助，如有疑问，欢迎评论"></a>纯原创，希望可以对大家有帮助，如有疑问，欢迎评论</h3><p><a href="https://juejin.im/post/5d8431646fb9a06b155df733">原文地址</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel中scope的用法以及技巧</title>
      <link href="2019/09/19/laravel/laravel%E4%B8%ADscope%E7%9A%84%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
      <url>2019/09/19/laravel/laravel%E4%B8%ADscope%E7%9A%84%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>laravel中scope的用法以及技巧？</p><p>laravel中的scope作用域</p><p>laravel中在模板中处理(属于不属于)的数据(增删改查),引入了scope来处理</p><p>也就是在模板定义方法中,加上前缀scope。</p><p>简言之，Laravel中模型中可以定义scope开头方法，这类方法可以通过模型直接调用。这类方法也称作查询作用域。</p><a id="more"></a><pre class=" language-lang-php"><code class="language-lang-php"><?phpnamespace App;use Illuminate\Database\Eloquent\Model;class User extends Model{    /**     * Scope a query to only include popular users.     *     * @param  \Illuminate\Database\Eloquent\Builder  $query     * @return \Illuminate\Database\Eloquent\Builder     */    public function scopePopular($query)    {        return $query->where('votes', '>', 100);    }    /**     * Scope a query to only include active users.     *     * @param  \Illuminate\Database\Eloquent\Builder  $query     * @return \Illuminate\Database\Eloquent\Builder     */    public function scopeActive($query)    {        return $query->where('active', 1);    }}</code></pre><p>laravel中要求在定义的方法scope后面跟的字母要大写(小驼峰命名法)</p><p>后面那我们去控制器进行处理数据<br>在控制器中使用:去除scope前缀,首字母变小写调用就好啦.</p><p>定义范围后，可以在查询模型时调用范围方法。但是，<strong>scope</strong>调用方法时不应包含前缀。您甚至可以将调用链接到各种范围，例如：</p><pre class=" language-lang-php"><code class="language-lang-php">$users = App\User::popular()->active()->orderBy('created_at')->get();</code></pre><p>通过or查询运算符组合多个Eloquent模型范围可能需要使用Closure回调：</p><pre class=" language-lang-php"><code class="language-lang-php">$users = App\User::popular()->orWhere(function (Builder $query) {    $query->active();})->get();</code></pre><p>但是，由于这可能很麻烦，Laravel提供了一种“更高阶” orWhere方法，允许您在不使用闭包的情况下流畅地将这些范围链接在一起：</p><pre class=" language-lang-php"><code class="language-lang-php">$users = App\User::popular()->orWhere->active()->get();</code></pre><p>关于方法中的参数 $query ，查看Api文档了解是 scope 定义的方法有俩个参数，一个是 Builder、一个是 Model。</p><p>在 Post 模型方法前加上一个 scope 前缀，作用域总是返回 查询构建器。在调用 scope 作用域的方法时，通过返回的构建器来拼接成完整的查询条件。</p><p><a href="https://juejin.im/post/5d83585b5188257e5c1115d1">原文地址</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用PHP实现钉钉webhook通知</title>
      <link href="2019/09/16/php/%E5%88%A9%E7%94%A8PHP%E5%AE%9E%E7%8E%B0%E9%92%89%E9%92%89webhook%E9%80%9A%E7%9F%A5/"/>
      <url>2019/09/16/php/%E5%88%A9%E7%94%A8PHP%E5%AE%9E%E7%8E%B0%E9%92%89%E9%92%89webhook%E9%80%9A%E7%9F%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="利用PHP实现钉钉webhook通知，方便随时获取项目的动态"><a href="#利用PHP实现钉钉webhook通知，方便随时获取项目的动态" class="headerlink" title="利用PHP实现钉钉webhook通知，方便随时获取项目的动态"></a>利用PHP实现钉钉webhook通知，方便随时获取项目的动态</h3><a id="more"></a><p>如果你嫌麻烦不想写这么多代码的话你可以直接引入包：<a href="https://github.com/WXiangQian/laravel-DingTalk">https://github.com/WXiangQian/laravel-DingTalk</a></p><p>以上包满足所有需求，无需再看下文。</p><p>如不想引入dingtalk包的话那就如下操作吧</p><p>首先，要先添加composer包</p><p>具体添加composer包的教程查看：<a href="https://github.com/guzzle/guzzle">https://github.com/guzzle/guzzle</a></p><p>在机器人管理页面选择“自定义”机器人，输入机器人名字并选择要发送消息的群。如果需要的话，可以为机器人设置一个头像。点击“完成添加”。</p><p>点击“复制”按钮，即可获得这个机器人对应的Webhook地址，其格式如下</p><pre><code>https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxx</code></pre><p>下方为已添加的机器人 </p><p><img src="https://user-gold-cdn.xitu.io/2019/6/21/16b77cc20cea45c9?w=650&amp;h=344&amp;f=png&amp;s=33449" alt="image"></p><p>下方为机器人webhook的地址:</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/21/16b77cc20cf2d2e1" alt="image"></p><p>Link类型<br><img src="https://user-gold-cdn.xitu.io/2019/6/21/16b77cc20d21821f?w=984&amp;h=456&amp;f=png&amp;s=26277" alt="image.png"></p><p>PHP实现方式如下： </p><pre><code>// 引入client$client = new \GuzzleHttp\Client();$data = [             'msgtype' =&gt; 'link',             'link' =&gt; [                 'text' =&gt; '内容',                 'title' =&gt; '标题',                 'picUrl' =&gt; '图片URL,可不填写',                 'messageUrl' =&gt; "需要跳转的url地址"             ]         ];$res = $client-&gt;post("机器人的webhook地址",[            'headers' =&gt; [                'content-type' =&gt; 'application/json'            ],            'body' =&gt; json_encode($data),        ]);</code></pre><h3 id="如有疑问，请留言。谢谢大家支持"><a href="#如有疑问，请留言。谢谢大家支持" class="headerlink" title="如有疑问，请留言。谢谢大家支持"></a>如有疑问，请留言。谢谢大家支持</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel-admin重写内置视图以及设置中文语言</title>
      <link href="2019/09/06/laravel/laravel-admin%E9%87%8D%E5%86%99%E5%86%85%E7%BD%AE%E8%A7%86%E5%9B%BE%E4%BB%A5%E5%8F%8A%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87%E8%AF%AD%E8%A8%80/"/>
      <url>2019/09/06/laravel/laravel-admin%E9%87%8D%E5%86%99%E5%86%85%E7%BD%AE%E8%A7%86%E5%9B%BE%E4%BB%A5%E5%8F%8A%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>laravel-admin重写内置视图以及设置中文语言<br><a id="more"></a></p><p>如需了解使用技巧以及用法：<a href="https://juejin.im/post/5d0c39fc6fb9a07eb051c925">https://juejin.im/post/5d0c39fc6fb9a07eb051c925</a></p><p>自己写的工资管理系统可查看源码  <a href="https://github.com/WXiangQian/wage-cms">https://github.com/WXiangQian/wage-cms</a> </p><p>自己写的办公用品管理系统可查看源码  <a href="https://github.com/WXiangQian/stationery-cms">https://github.com/WXiangQian/stationery-cms</a> </p><h4 id="感觉不错的话请点击右上角-star-谢谢支持"><a href="#感觉不错的话请点击右上角-star-谢谢支持" class="headerlink" title="感觉不错的话请点击右上角  star  谢谢支持"></a>感觉不错的话请点击右上角  star  谢谢支持</h4><hr><p>如果有需要自己修改view，但是不方便直接修改<code>laravel-admin</code>的情况，可以用下面的办法解决</p><p>复制<code>vendor/encore/laravel-admin/views</code>到项目的<code>resources/views/admin</code>，然后在<code>app/Admin/bootstrap.php</code>文件中加入代码：</p><pre><code>app('view')-&gt;prependNamespace('admin', resource_path('views/admin'));</code></pre><p>这样就用<code>resources/views/admin</code>下的视图覆盖了<code>laravel-admin</code>的视图，要注意的问题是，更新<code>laravel-admin</code>的时候，如果遇到视图方面的问题，需要重新复制<code>vendor/encore/laravel-admin/views</code>到项目的<code>resources/views/admin</code>中，注意备份原来已经修改过的视图。</p><h3 id="给登录页添加背景图以及修改样式-可自定义根据自己的需求进行变更"><a href="#给登录页添加背景图以及修改样式-可自定义根据自己的需求进行变更" class="headerlink" title="给登录页添加背景图以及修改样式(可自定义根据自己的需求进行变更)"></a>给登录页添加背景图以及修改样式(可自定义根据自己的需求进行变更)</h3><blockquote><p>找到 public/vendor/laravel-admin/AdminLTE/dist/css/AdminLTE.min.css 文件</p><pre><code>.login-page,.register-page{background:#d2d6de}</code></pre><p>改为</p><pre><code>.login-page,.register-page{background:url(/img/3.png) no-repeat center}.login-logo a 后添加.login-logo a b{color: #3c8dbc}</code></pre></blockquote><h2 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h2><p>完成安装之后，默认语言为英文(en)，如果要使用中文，打开<code>config/app.php</code>，将<code>locale</code>设置为<code>zh-CN</code>即可。</p><p>具体文件可以去<a href="https://github.com/WXiangQian/wage-cms/tree/master/resources/lang/zh-CN">https://github.com/WXiangQian/wage-cms/tree/master/resources/lang/zh-CN</a>拷贝</p><h2 id="关于前端资源问题"><a href="#关于前端资源问题" class="headerlink" title="关于前端资源问题"></a>关于前端资源问题</h2><p>如果需要使用自己的前端文件，可以在<code>app/Admin/bootstrap.php</code>中引入：</p><pre><code>Admin::css('path/to/your/css');Admin::js('path/to/your/js');</code></pre><h2 id="更新静态资源"><a href="#更新静态资源" class="headerlink" title="更新静态资源"></a>更新静态资源</h2><p>如果遇到更新之后,部分组件不能正常使用,那有可能是<code>laravel-admin</code>自带的静态资源有更新了,需要运行命令</p><pre><code>php artisan vendor:publish --tag=laravel-admin-assets --force</code></pre><p>来重新发布前端资源，发布之后不要忘记清理浏览器缓存.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>composer如何更新指定的依赖包</title>
      <link href="2019/09/02/laravel/composer%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E6%8C%87%E5%AE%9A%E7%9A%84%E4%BE%9D%E8%B5%96%E5%8C%85/"/>
      <url>2019/09/02/laravel/composer%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E6%8C%87%E5%AE%9A%E7%9A%84%E4%BE%9D%E8%B5%96%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>composer如何更新指定的依赖包<br><a id="more"></a><br><img src="/img/article/composer.jpg" alt=""><br><a href="https://www.phpcomposer.com">Composer</a></p><p>是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件。</p><p>composer更新指定的依赖包</p><p>compoesr 的require/update都可以更新指定的依赖包（升级/降级）。</p><p>require更为灵活些，未安装则进行安装，已安装则根据传入的版本号进行升级或降级。</p><p>update则无法在命令行传入新的版本号，需要先手动在composer.json中指定新的版本号，然后执行更新命令。</p><h3 id="require-命令"><a href="#require-命令" class="headerlink" title="require 命令"></a>require 命令</h3><pre class=" language-lang-php"><code class="language-lang-php">// 安装包composer require hashids/hashids:2.0.0// 已安装 升级composer require hashids/hashids:3.0.0// 已安装 降级composer require hashids/hashids:2.0.4</code></pre><h3 id="update-命令"><a href="#update-命令" class="headerlink" title="update 命令"></a>update 命令</h3><p>update命令无法在命令行中指定包版本号，需要手动修改composer.json文件</p><pre class=" language-lang-php"><code class="language-lang-php">// 安装包composer require hashids/hashids:2.0.0</code></pre><p>错误的写法❌</p><pre class=" language-lang-php"><code class="language-lang-php">composer update hashids/hashids:3.0.0</code></pre><pre class=" language-lang-php"><code class="language-lang-php">vim composer.json"require": {    "hashids/hashids": "3.0.0"},:wq#升级到3.0.0composer update hashids/hashidsvim composer.json"require": {    "hashids/hashids": "2.0.4"},:wq#降级到2.0.4composer update hashids/hashids</code></pre><p>同时，如果我们编辑更新了多个包的版本号，则无法使用<br>composer update package1<br>composer update package2<br>composer update package3<br>的方式去依次的更新，因为composer会校验配置文件的完整性composer.json vs composer.lock，你指定要我更新A，但你B的version在json和lock中不一致，你却不要我更新它，这是有问题的。</p><p>这时只能使用composer update全局更新依赖，注意是全局包的更新操作，一些你未更改但使用了版本号范围的包也有可能被更新升级，请慎用！</p><h3 id="install-命令"><a href="#install-命令" class="headerlink" title="install 命令"></a>install 命令</h3><p>install可以用于项目初始化后，初次安装依赖，且会优先读取composer.lock中的版本号，以尽可能的保证协作开发中包版本的一致性。</p><p>install 命令从当前目录读取 composer.json 文件，处理了依赖关系，并把其安装到 vendor 目录下。</p><pre><code>composer install</code></pre><p>如果当前目录下存在 composer.lock 文件，它会从此文件读取依赖版本，而不是根据 composer.json 文件去获取依赖。这确保了该库的每个使用者都能得到相同的依赖版本。</p><p>如果没有 composer.lock 文件，composer 将在处理完依赖关系后创建它。<br>composer.lock中存有的包版本记录相当于执行 composer require packageName:versionNo，不存有的相当于执行composer update packageName with versionRule in composer.json。</p><p>当我们协同开发时，A 在本地安装了新的依赖包，或者更新了依赖包，会写入 composer.lock/composer.json,A 上传至仓库，B 拉取至本地后，应执行一次 composer install来同步团队的版本变更。</p><p>所以协作开发中，我们建议要同时将composer.lock/composer.json上传至远端仓库。</p><p><a href="https://docs.phpcomposer.com/">Composer中文文档</a></p><p><a href="https://pkg.phpcomposer.com/">Composer中国镜像</a></p><p><a href="https://juejin.im/post/5d0c80946fb9a07ee30e20a7">如何创建自己的 Laravel Composer包</a></p><p><a href="https://juejin.im/post/5d0c807ae51d4510664d16f2">github发布packagist的稳定版本包</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> composer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel中使用Queue队列技巧</title>
      <link href="2019/08/27/laravel/Laravel%E4%B8%AD%E4%BD%BF%E7%94%A8Queue%E9%98%9F%E5%88%97%E6%8A%80%E5%B7%A7/"/>
      <url>2019/08/27/laravel/Laravel%E4%B8%AD%E4%BD%BF%E7%94%A8Queue%E9%98%9F%E5%88%97%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Laravel 队列为不同的后台队列服务提供统一的 API，例如 Beanstalk，Amazon SQS，Redis，甚至其他基于关系型数据库的队列。队列的目的是将耗时的任务延时处理，比如发送邮件，从而大幅度缩短 Web 请求和相应的时间。</p><p>队列配置文件存放在 config/queue.php 。每一种队列驱动的配置都可以在该文件中找到，包括数据库，Beanstalkd ，Amazon SQS，Redis，以及同步（本地使用）驱动。其中还包含了一个 null 队列驱动用于那些放弃队列的任务</p></blockquote><a id="more"></a><h3 id="为什么使用队列？"><a href="#为什么使用队列？" class="headerlink" title="为什么使用队列？"></a>为什么使用队列？</h3><p>一般来说使用队列是为了：</p><pre><code>异步重试</code></pre><p>也许你还有其他的理由使用队列，但是这应该是最基本的两个原因。</p><h3 id="什么情况使用队列？"><a href="#什么情况使用队列？" class="headerlink" title="什么情况使用队列？"></a>什么情况使用队列？</h3><p>了解了为什么使用队列，那么一般有这么几类任务使用队列：</p><p>耗时比较久的，比如上传一个文件后进行一些格式的转化等。<br>需要保证送达率的，比如发送短信，因为要调用别人的 api，总会有几率失败，那么为了保证送达，重试就必不可少了。<br>使用队列的时候一定要想明白一个问题，这个任务到底是不是可以异步，如果因为异步会导致问题，那么就要放弃使用队列。</p><h3 id="驱动的必要设置"><a href="#驱动的必要设置" class="headerlink" title="驱动的必要设置"></a>驱动的必要设置</h3><h4 id="database-php"><a href="#database-php" class="headerlink" title="database.php"></a>database.php</h4><p>在 database.php 配置文件中对 redis 数据库部分进行配置，默认有一个 default 连接，就用这个好了:)</p><p>根据这个默认连接中需要的配置项，编辑 .env 配置文件，将其中的 REDIS_HOST、REDIS_PASSWORD、REDIS_PORT 填写成自己服务器中 Redis 的相应值。</p><h4 id="queue-php"><a href="#queue-php" class="headerlink" title="queue.php"></a>queue.php</h4><p>首先需要去 .env 中配置 QUEUE_DRIVER，因为现在打算用 Redis，所以配置成 redis。</p><p>接着配置 queue.php 里 connections 部分的 redis 连接，其中 connection 对应的值就是 database.php 中 redis 的那个 default 连接。</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>要使用 database 这个队列驱动的话，你需要创建一个数据表来存储任务。你可以用 queue:table 这个 Artisan </p><pre><code>php artisan queue:table</code></pre><h4 id="处理失败的任务"><a href="#处理失败的任务" class="headerlink" title="处理失败的任务"></a>处理失败的任务</h4><p>有时候你队列中的任务会失败。不要担心，本来事情就不会一帆风顺。</p><p>Laravel 内置了一个方便的方式来指定任务重试的最大次数。当任务超出这个重试次数后，它就会被插入到 failed_jobs 数据表里面。要创建 failed_jobs 表的迁移文件，你可以用 queue:failed-table 命令，接着使用 migrate Artisan 命令生成 failed_jobs 表：</p><pre><code>php artisan queue:failed-table</code></pre><p>命令来创建这个数据表的迁移。当迁移创建好以后，就可以用 migrate 这条命令来创建数据表：</p><pre><code>php artisan migrate</code></pre><h3 id="执行命令讲解"><a href="#执行命令讲解" class="headerlink" title="执行命令讲解"></a>执行命令讲解</h3><pre><code>php artisan queue:work --daemon --quiet --queue=default --delay=3 --sleep=3 --tries=3</code></pre><pre><code>--daemon</code></pre><p>The queue:work Artisan command includes a —daemon option for forcing the queue worker to continue processing jobs without ever re-booting the framework. This results in a significant reduction of CPU usage when compared to the queue:listen command</p><p>总体来说，在 supervisor 中一般要加这个 option，可以节省 CPU 使用。</p><pre><code>--quiet</code></pre><p>不输出任何内容</p><pre><code>--delay=3</code></pre><p>一个任务失败后，延迟多长时间后再重试，单位是秒。这个值的设定我个人建议不要太短，因为一个任务失败（比如网络原因），重试时间太短可能会出现连续失败的情况。</p><pre><code>--sleep=3</code></pre><p>去 Redis 中拿任务的时候，发现没有任务，休息多长时间，单位是秒。这个值的设定要看你的任务是否紧急，如果是那种非常紧急的任务，不能等待太长时间。</p><pre><code>--tries=3</code></pre><p>定义失败任务最多重试次数。这个值的设定根据任务的重要程度来确定，一般 3 次比较适合。</p><h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><h4 id="生成任务类"><a href="#生成任务类" class="headerlink" title="生成任务类"></a>生成任务类</h4><p>在你的应用程序中，队列的任务类都默认放在 app/Jobs 目录下。如果这个目录不存在，那当你运行 make:job Artisan 命令时目录就会被自动创建。你可以用以下的 Artisan 命令来生成一个新的队列任务：</p><pre><code>php artisan make:job Demo</code></pre><p>生成的类实现了 Illuminate\Contracts\Queue\ShouldQueue 接口，这意味着这个任务将会被推送到队列中，而不是同步执行。</p><pre><code>&lt;?phpnamespace App\Jobs;use Illuminate\Bus\Queueable;use Illuminate\Queue\SerializesModels;use Illuminate\Queue\InteractsWithQueue;use Illuminate\Contracts\Queue\ShouldQueue;use Illuminate\Foundation\Bus\Dispatchable;use Illuminate\Support\Facades\Log;class Demo implements ShouldQueue{    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;    public $param;    /**     * Create a new job instance.     *     * @return void     */    public function __construct($param = '')    {        $this-&gt;param = $param;    }    /**     * Execute the job.     *     * @return void     */    public function handle()    {        Log::info('Hello, '.$this-&gt;param);    }}</code></pre><p>控制器代码</p><pre><code>public function queue_demo(){    $num = rand(1,999999999);    // 这个任务将被分发到默认队列...    DemoJob::dispatch($num);}</code></pre><h3 id="开启队列"><a href="#开启队列" class="headerlink" title="开启队列"></a>开启队列</h3><pre><code>php artisan queue:work --queue=default</code></pre><p>由于是本地，需要打开监听，当访问到接口时，就会触发队列中的任务</p><p>线上的话需要用到<strong>supervisor</strong>的配置</p><h3 id="Supervisor-配置"><a href="#Supervisor-配置" class="headerlink" title="Supervisor 配置"></a>Supervisor 配置</h3><h4 id="安装-Supervisor"><a href="#安装-Supervisor" class="headerlink" title="安装 Supervisor"></a>安装 Supervisor</h4><p>Supervisor 是一个 Linux 操作系统上的进程监控软件，它会在 queue:listen 或 queue:work 命令发生失败后自动重启它们。在 Ubuntu 安装 Supervisor，可以用以下命令：</p><pre><code>sudo apt-get install supervisor</code></pre><p>{tip} 如果自己手动配置 Supervisor 听起来有点难以应付，可以考虑使用 Laravel Forge，它能给你的 Laravel 项目自动安装与配置 Supervisor。</p><h4 id="配置-Supervisor"><a href="#配置-Supervisor" class="headerlink" title="配置 Supervisor"></a>配置 Supervisor</h4><p>Supervisor 的配置文件一般是放在 /etc/supervisor/conf.d 目录下。在这个目录中你可以创建任意数量的配置文件来要求 Supervisor 怎样监控你的进程。例如我们创建一个 laravel-worker.conf 来启动与监控一个 queue:work 进程：</p><pre><code>[program:laravel-worker]process_name=%(program_name)s_%(process_num)02dcommand=php /home/forge/app.com/artisan queue:work sqs --sleep=3 --tries=3autostart=trueautorestart=trueuser=forgenumprocs=8redirect_stderr=truestdout_logfile=/home/forge/app.com/worker.log</code></pre><p>这个例子里的 numprocs 命令会要求 Supervisor 运行并监控 8 个 queue:work 进程，并且在它们运行失败后重新启动。当然，你必须更改 command 命令的 queue:work sqs ，以显示你所选择的队列驱动。</p><p>启动 Supervisor<br>当这个配置文件被创建后，你需要更新 Supervisor 的配置，并用以下命令来启动该进程：</p><pre><code>sudo supervisorctl rereadsudo supervisorctl updatesudo supervisorctl start laravel-worker:*</code></pre><p>使用supervisor进程管理命令之前先启动supervisord，否则程序报错。<br>使用命令<code>supervisord -c /etc/supervisord.conf</code>启动。</p><p>有关 Supervisor 的设置与使用，请参考 Supervisor <a href="http://supervisord.org/index.html">官方文档</a></p><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ol><li><p>unix:///var/run/supervisor.sock no such file</p><p> 问题描述：安装好supervisor没有开启服务直接使用supervisorctl报的错</p><p> 解决办法：<code>supervisord -c /etc/supervisord.conf</code></p></li><li><p>command中指定的进程已经起来，但supervisor还不断重启</p><p> 问题描述：command中启动方式为后台启动，导致识别不到pid，然后不断重启，这里使用的是elasticsearch，command指定的是<code>$path/bin/elasticsearch -d</code></p><p> 解决办法：supervisor无法检测后台启动进程的pid，而supervisor本身就是后台启动守护进程，因此不用担心这个</p></li><li><p>启动了多个supervisord服务，导致无法正常关闭服务</p><p> 问题描述：在运行<code>supervisord -c /etc/supervisord.conf</code>之前，直接运行过<code>supervisord -c /etc/supervisord.d/xx.conf</code>导致有些进程被多个superviord管理，无法正常关闭进程。</p><p> 解决办法：使用<code>ps -fe | grep supervisord</code>查看所有启动过的supervisord服务，kill相关的进程。</p></li></ol><h3 id="具体示例代码参考github仓库"><a href="#具体示例代码参考github仓库" class="headerlink" title="具体示例代码参考github仓库"></a>具体示例代码参考<a href="https://github.com/WXiangQian/laravel-api">github仓库</a></h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel-admin新手快速入门以及遇到的那些坑</title>
      <link href="2019/08/22/laravel/laravel-admin%E6%96%B0%E6%89%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
      <url>2019/08/22/laravel/laravel-admin%E6%96%B0%E6%89%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p><code>laravel-admin</code> 是一个用于为Laravel提供后台界面的构建器</p><a id="more"></a><p>仅仅通过数行代码，就可以帮助我们构建CRUD后台。</p><p><code>laravel-admin</code>不需要写前端页面，在控制器controller中渲染即可为了方便大家使用，下面部分代码都是属于可复制的demo</p><p><a href="https://juejin.im/post/5d0c8c3e51882532891f760c">Laravel-admin 自定义excel导出数据</a></p><p><a href="https://juejin.im/post/5d0c80d3e51d45773d468629">laravel-admin报错:Disk [admin] not configured, please add a disk config in `config请点击链接找解决方案</a></p><p><a href="https://juejin.im/post/5d0c8b776fb9a07ecc448d69">遇到报错：Syntax error or access violation: 1071 Specified key was too long; max key length is 1000 bytes</a></p><p><a href="https://juejin.im/post/5d0c3c07e51d4510727c80ae">如需重写内置视图以及设置语言</a></p><p>自己写的工资管理系统可查看源码  <a href="https://github.com/WXiangQian/wage-cms">https://github.com/WXiangQian/wage-cms</a> </p><p>自己写的办公用品管理系统可查看源码  <a href="https://github.com/WXiangQian/stationery-cms">https://github.com/WXiangQian/wage-cms</a> </p><h4 id="感觉不错的话请点击右上角-star-谢谢支持"><a href="#感觉不错的话请点击右上角-star-谢谢支持" class="headerlink" title="感觉不错的话请点击右上角  star  谢谢支持"></a>感觉不错的话请点击右上角  star  谢谢支持</h4><p><a href="https://laravel-admin.org/docs/zh">laravel-admin  手册地址</a></p><p>laravel-admin demo地址  打开<a href="http://demo.laravel-admin.org/auth/login">http://demo.laravel-admin.org/auth/login</a>，用账号密码<code>admin/admin</code>登陆</p><p>laravel-admin 安装地址：<a href="https://laravel-admin.org/docs/zh/installation">https://laravel-admin.org/docs/zh/installation</a></p><p><code>model-grid</code>支持快速构建数据表格</p><p><code>model-form</code>支持快速构建数据表单</p><p><code>model-tree</code>支持快速构建树状数据</p><p>以下方法都是1.5.*的操作，由于框架在不断更新，新坑会更多，所以我先把1.5的坑踩完，后期考虑在更新</p><p><a href="https://juejin.im/post/5d5e08cbf265da03e83b72a7">如果你使用的是1.6.*版本点击跳转</a> </p><p><strong>实现二级联动select</strong></p><pre><code>// form代码// 其中load('d_id', '/admin/users/d_id');的意思是，在当前select的选项切换之后，//会把当前选项的值通过参数q,调用接口/admin/users/d_id，并把api返回的数据填充为d_id选择框的选项$form-&gt;select('pid', '部门')-&gt;options(Department::where('pid', 0)-&gt;pluck('name', 'id'))      -&gt;load('d_id', '/admin/users/d_id')-&gt;rules('required');$form-&gt;select('d_id', '岗位')-&gt;options(function ($id) {        return Department::where('id', $id)-&gt;pluck('name', 'id');     })-&gt;rules('required');// routes$router-&gt;get('/users/d_id', 'UsersController@d_id');//切记，放资源路由上方//controllerpublic function d_id(Request $request){  $q = $request-&gt;get('q');  return Department::where('pid', $q)-&gt;get(['id', DB::raw('name as text')]);}</code></pre><p><a href="https://juejin.im/post/5d0c44176fb9a07ed657dabd">如果你想在左侧顶部添加一个搜索框，更利于快速搜索,请点我</a></p><p><strong>禁用创建按钮</strong></p><pre><code>$grid-&gt;disableCreateButton();</code></pre><p><strong>禁用分页条</strong></p><pre><code>$grid-&gt;disablePagination();</code></pre><p><strong>禁用查询过滤器</strong></p><pre><code>$grid-&gt;disableFilter();</code></pre><p><strong>禁用导出数据按钮</strong></p><pre><code>$grid-&gt;disableExport();</code></pre><p><strong>禁用行操作列</strong></p><pre><code>$grid-&gt;disableActions();</code></pre><p><strong>设置分页选择器选项</strong></p><pre><code>$grid-&gt;perPages([10, 20, 30, 40, 50]);</code></pre><p><strong><code>model-grid</code>默认有两个行操作<code>编辑</code>和<code>删除</code>，可以通过下面的方式关闭它们：</strong></p><pre><code> $grid-&gt;actions(function ($actions) {    // 隐藏删除按钮    $actions-&gt;disableDelete();    // 隐藏修改按钮    $actions-&gt;disableEdit();});</code></pre><p><strong>如果有自定义的操作按钮，可以通过下面的方式添加：</strong></p><pre><code>$grid-&gt;actions(function ($actions) {    // append一个操作    $actions-&gt;append('&lt;a href=""&gt;&lt;i class="fa fa-eye"&gt;&lt;/i&gt;&lt;/a&gt;');    // prepend一个操作    $actions-&gt;prepend('&lt;a href=""&gt;&lt;i class="fa fa-paper-plane"&gt;&lt;/i&gt;&lt;/a&gt;');});</code></pre><p><strong>获取主键信息或者获取当前行的数组</strong></p><pre><code>$grid-&gt;actions(function ($actions) {    // 当前行的数据数组    $row = $actions-&gt;row;    // 获取当前行主键值    $id = $actions-&gt;getKey(); });</code></pre><p><strong>目前默认实现了批量删除操作的功能，如果要关掉批量删除操作：</strong></p><pre><code>$grid-&gt;tools(function ($tools) {    $tools-&gt;batch(function ($batch) {        $batch-&gt;disableDelete();    });});</code></pre><p><strong>查询过滤Filter**</strong>：如下**</p><pre><code>$grid-&gt;filter(function ($query) {    // 去掉默认的id过滤器    $query-&gt;disableIdFilter();    $query-&gt;like('title', '文章标题');    $query-&gt;equal('cate_id', '所属分类')-&gt;select(        ArticleCategories::pluck('name', 'id')    );});</code></pre><p><strong>form的一些小技巧 ：</strong></p><pre><code>$form-&gt;text('from', '文章来源')-&gt;rules('required')     //可以加rules验证规则$form-&gt;image('thumb', '文章缩略图')-&gt;uniqueName()    -&gt;move('upload/article/' . date("Ymd"))    -&gt;options(['overwriteInitial' =&gt; true]);//代表新图片替换修图片    -&gt;uniqueName() //为随机名称//保存前回调$form-&gt;saving(function (Form $form) {});//保存后回调$form-&gt;saved(function (Form $form) {});// 设置表单提交的action$form-&gt;setAction('admin/users');</code></pre><p><strong>获取URL中的id</strong></p><pre><code>$shopId = request()-&gt;route()-&gt;parameter('shop');</code></pre><p>当为<strong>添加</strong>操作时，店铺名称不可和数据库内其他数据重复</p><p>当为<strong>修改</strong>操作时，店铺名称除自己外不可和数据库内其他数据重复</p><pre><code>if ($shopId) {    $form-&gt;text('shop_name', '店铺名称')        -&gt;rules("required|unique:shops,shop_name,{$shopId},id");} else {    $form-&gt;text('shop_name', '店铺名称')        -&gt;rules("required|unique:shops");}</code></pre><p>进入grid表格时，<strong>默认id倒序</strong></p><pre><code>$grid-&gt;model()-&gt;orderBy('id', 'desc');</code></pre><p><strong>模型树Tree</strong></p><pre><code>public function index(){  return Admin::content(function (Content $content) {      $content-&gt;header('**管理');      $content-&gt;description('');       $content-&gt;body($this-&gt;tree());  });}protected function tree(){  return Department::tree(function (Tree $tree) {      $tree-&gt;branch(function ($data) {          return "{$data['name']}";      });  });}</code></pre><p>在页面调用下面的方法，它将会<strong>调用<a href="https://github.com/CodeSeven/toastr">toastr</a>组件</strong>，在页面的右上角添加一条<strong>浮动的提示</strong></p><pre><code>admin_toastr('Message...', 'success');admin_toastr('Message...', 'info');admin_toastr('Message...', 'warning');admin_toastr('Message...', 'error');</code></pre><p>也可以接收第三个参数，给toastr添加设置参数,更多参数参考<a href="https://github.com/CodeSeven/toastr">toastr</a></p><pre><code>admin_toastr('Message...', 'success', ['timeOut' =&gt; 5000]);</code></pre><h3 id="纯原创，希望可以对大家有帮助，文章会不断更新，如有疑问或新坑，欢迎评论"><a href="#纯原创，希望可以对大家有帮助，文章会不断更新，如有疑问或新坑，欢迎评论" class="headerlink" title="纯原创，希望可以对大家有帮助，文章会不断更新，如有疑问或新坑，欢迎评论"></a>纯原创，希望可以对大家有帮助，文章会不断更新，如有疑问或新坑，欢迎评论</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thinkphp3.2同时连接两个数据库</title>
      <link href="2019/08/20/php/thinkphp3-2%E5%90%8C%E6%97%B6%E8%BF%9E%E6%8E%A5%E4%B8%A4%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2019/08/20/php/thinkphp3-2%E5%90%8C%E6%97%B6%E8%BF%9E%E6%8E%A5%E4%B8%A4%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因项目需求,需要用到连接两个库,所以封装了个方法,实例如下：</p></blockquote><a id="more"></a><p><a href="https://juejin.im/post/5d3fa541f265da03c926d36f">thinkphp3.2同时连接两个数据库掘金地址</a></p><p><a href="https://juejin.im/post/5d424833518825221b4cbdd2">laravel同时连接两个数据库掘金地址</a></p><p><a href="http://document.thinkphp.cn/manual_3_2.html#connect_db">thinkphp3.2手册连接数据库</a></p><h3 id="在公共的function-php加入封装方法"><a href="#在公共的function-php加入封装方法" class="headerlink" title="在公共的function.php加入封装方法"></a>在公共的function.php加入封装方法</h3><pre class=" language-lang-php"><code class="language-lang-php">function getCrmModel($name) {    // new的model可以根据自己的需求去更改    return new \Home\Model\CrmModel($name);}</code></pre><h3 id="model代码"><a href="#model代码" class="headerlink" title="model代码"></a>model代码</h3><pre class=" language-lang-php"><code class="language-lang-php"><?phpnamespace Home\Model;class CrmModel extends BaseModel{    public function _initialize(){        parent::_initialize();        $this->connection = array(            'db_type' => C('CRM_DB.DB_TYPE'),            'db_user' => C('CRM_DB.DB_USER'),            'db_pwd' => C('CRM_DB.DB_PWD'),            'db_host' => C('CRM_DB.DB_HOST'),            'db_port' => C('CRM_DB.DB_PORT'),        );        $this->dbName = C('CRM_DB.DB_NAME');        $this->tablePrefix = C('CRM_DB.DB_PREFIX');    }}</code></pre><h3 id="在公共的config中添加配置信息"><a href="#在公共的config中添加配置信息" class="headerlink" title="在公共的config中添加配置信息"></a>在公共的config中添加配置信息</h3><pre class=" language-lang-php"><code class="language-lang-php">//第二个数据库配置信息'CRM_DB'=>array(    'DB_TYPE' => 'mysql', // 数据库类型    'DB_HOST' => 'localhost', // 服务器地址    'DB_NAME' => 'test', // 数据库名    'DB_USER' => 'root', // 用户名    'DB_PWD' => 'root', // 密码    'DB_PORT' => '3306', // 端口    'DB_PREFIX' => 'test_', // 前缀),</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel5使用hashids对id进行加密</title>
      <link href="2019/08/19/laravel/laravel5%E4%BD%BF%E7%94%A8hashids%E5%AF%B9id%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86/"/>
      <url>2019/08/19/laravel/laravel5%E4%BD%BF%E7%94%A8hashids%E5%AF%B9id%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>很多文章id都是有规律的，能爬接口的数据或者获取到本页面的内容<br>  为了防止这种情况的事情发生，我们将使用hashids加密，来生成不规律的编号<br>  这样就不会造成被人爬数据的情况了，下面我将演示详细的流程</p></blockquote><a id="more"></a><p><a href="https://github.com/vinkla/laravel-hashids">laravel-hashids的github网址</a></p><h3 id="在laravel中安装hashids"><a href="#在laravel中安装hashids" class="headerlink" title="在laravel中安装hashids"></a>在laravel中安装hashids</h3><pre><code>composer require vinkla/hashids v3.3.0</code></pre><p>PS：因为现在 vinkla/hashids最新版本支持5.7，我的laravel版本为5.5，所以要对应相应的版本号</p><h3 id="在config-app-php中的providers数组中添加"><a href="#在config-app-php中的providers数组中添加" class="headerlink" title="在config/app.php中的providers数组中添加"></a>在config/app.php中的providers数组中添加</h3><pre><code>Vinkla\Hashids\HashidsServiceProvider::class,</code></pre><h3 id="在config-app-php中的aliases数组中添加"><a href="#在config-app-php中的aliases数组中添加" class="headerlink" title="在config/app.php中的aliases数组中添加"></a>在config/app.php中的aliases数组中添加</h3><pre><code>'Hashids' =&gt; Vinkla\Hashids\Facades\Hashids::class,</code></pre><h3 id="config下生成hashids-php配置文件"><a href="#config下生成hashids-php配置文件" class="headerlink" title="config下生成hashids.php配置文件"></a>config下生成hashids.php配置文件</h3><pre><code>php artisan vendor:publish</code></pre><h3 id="修改hashids-php中的connections的盐值和加密输出长度"><a href="#修改hashids-php中的connections的盐值和加密输出长度" class="headerlink" title="修改hashids.php中的connections的盐值和加密输出长度"></a>修改hashids.php中的connections的盐值和加密输出长度</h3><p>其中盐值可以是任意长度任意字符的字符串，加密和盐值有直接的关系，盐值是解密的钥匙。我直接取项目的密钥作为其盐值，以让项目统一，且不同项目的加密结果不一样。</p><pre><code>'connections' =&gt; [    'main' =&gt; [        'salt' =&gt; env('APP_KEY'),        'length' =&gt; '6',    ],    'alternative' =&gt; [        'salt' =&gt; 'your-salt-string',        'length' =&gt; 'your-length-integer',    ],],</code></pre><h2 id="Hashids的加密解密使用方式"><a href="#Hashids的加密解密使用方式" class="headerlink" title="Hashids的加密解密使用方式"></a>Hashids的加密解密使用方式</h2><p>加密的使用方式</p><pre><code>Hashids::encode(123);//返回经过加密后的字符串o7gxkR</code></pre><p>解密的使用方式 注意返回值是数组</p><pre><code>Hashids::decode('o7gxkR');//返回经过解密后的数组array(1) { [0]=&gt; int(123456) }</code></pre><p>同时加密多个参数</p><pre><code>Hashids::encode(1,2,3);//KPCAig</code></pre><p>解密多个参数的加密字符串</p><pre><code>Hashids::decode('M0BKxg8cYSNrVAjp')//返回经过解密后的数组array(3){[0]=&gt; int(1) [1]=&gt; int(2) [2]=&gt; int(3)}</code></pre><p>切换不同的盐值和加密长度</p><p>我们可能需要对多个不同类型的id进行加密，盐值和返回长度也各有不同。所以config的hashids中的多个数组可以派上用场了。其中main数组是作为默认连接,可以自行添加其他的加密数组。</p><pre><code>Hashids::connection('alternative')-&gt;encode(*);Hashids::connection('alternative')-&gt;decode("**");</code></pre><h3 id="纯原创，所有作品都是实战经验，希望可以获得大家的支持。"><a href="#纯原创，所有作品都是实战经验，希望可以获得大家的支持。" class="headerlink" title="纯原创，所有作品都是实战经验，希望可以获得大家的支持。"></a>纯原创，所有作品都是实战经验，希望可以获得大家的支持。</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 同时连接多个数据库</title>
      <link href="2019/08/15/laravel/Laravel%E5%90%8C%E6%97%B6%E8%BF%9E%E6%8E%A5%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2019/08/15/laravel/Laravel%E5%90%8C%E6%97%B6%E8%BF%9E%E6%8E%A5%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上文说到<a href="https://juejin.im/post/5d3fa541f265da03c926d36f">thinkphp3.2同时连接两个数据库</a>的文章，然后在总结下laravel同时连接<br>多个数据库的实例，方便新手学习，db连接以及model连接。</p></blockquote><a id="more"></a><h3 id="配置-env-文件"><a href="#配置-env-文件" class="headerlink" title="配置.env 文件"></a>配置.env 文件</h3><pre class=" language-lang-php"><code class="language-lang-php">DB_CONNECTION=mysqlDB_HOST=127.0.0.1DB_PORT=3306DB_DATABASE=database_nameDB_USERNAME=rootDB_PASSWORD=rootDB_HOST_TEST=127.0.0.1DB_PORT_TEST=3306DB_DATABASE_TEST=database_testDB_USERNAME_TEST=rootDB_PASSWORD_TEST=root</code></pre><h3 id="配置-config-database-php"><a href="#配置-config-database-php" class="headerlink" title="配置 config/database.php"></a>配置 config/database.php</h3><pre class=" language-lang-php"><code class="language-lang-php">// 默认连接mysql'default' => env('DB_CONNECTION', 'mysql'),'connections' => [        'sqlite' => [            'driver'   => 'sqlite',            'database' => database_path('database.sqlite'),            'prefix'   => '',        ],        'mysql' => [            'driver'    => 'mysql',            'host'      => env('DB_HOST', '127.0.0.1'),            'port'      => env('DB_PORT', '3306'),            'database'  => env('DB_DATABASE', 'database_name'),            'username'  => env('DB_USERNAME', 'root'),            'password'  => env('DB_PASSWORD', 'root'),            'charset'   => 'utf8',            'collation' => 'utf8_unicode_ci',            'prefix'    => '',            'strict'    => false,        ],        'mysql_test' => [            'driver'    => 'mysql',            'host'      => env('DB_HOST_TEST', '127.0.0.1'),            'port'      => env('DB_PORT_TEST', '3306'),            'database'  => env('DB_DATABASE_TEST', 'database_test'),            'username'  => env('DB_USERNAME_TEST', 'root'),            'password'  => env('DB_PASSWORD_TEST', 'root'),            'charset'   => 'utf8',            'collation' => 'utf8_unicode_ci',            'prefix'    => '',            'strict'    => false,        ],    ],</code></pre><h3 id="model实例-这个model将使用mysql-test连接"><a href="#model实例-这个model将使用mysql-test连接" class="headerlink" title="model实例(这个model将使用mysql_test连接)"></a>model实例(这个model将使用mysql_test连接)</h3><pre class=" language-lang-php"><code class="language-lang-php"><?phpnamespace App\Model;use Illuminate\Database\Eloquent\Model;class Test extends Model{    // 数据库'database_test'中的test表    public    $table      = 'test';    public    $timestamps = false;    protected $connection = 'mysql_test';}</code></pre><h3 id="model实例-这个model将采用默认的’mysql’连接"><a href="#model实例-这个model将采用默认的’mysql’连接" class="headerlink" title="model实例(这个model将采用默认的’mysql’连接)"></a>model实例(这个model将采用默认的’mysql’连接)</h3><pre class=" language-lang-php"><code class="language-lang-php"><?phpnamespace App\Model;use Illuminate\Database\Eloquent\Model;class Test extends Model{    // 数据库'database'中的test表    public    $table      = 'test';    public    $timestamps = false;    // 以下代码可有可不、默认连接mysql    protected $connection = 'mysql';}// a、这个model将采用默认的'mysql'连接class UserModel extends Model{        // 数据库'database'中的users表        protected $table = "users";}</code></pre><h3 id="调用model实例"><a href="#调用model实例" class="headerlink" title="调用model实例"></a>调用model实例</h3><pre class=" language-lang-php"><code class="language-lang-php">// 以下是调用方法Test::get();Test::where('id',1)->first();</code></pre><h3 id="DB直接连接数据库"><a href="#DB直接连接数据库" class="headerlink" title="DB直接连接数据库"></a>DB直接连接数据库</h3><pre class=" language-lang-php"><code class="language-lang-php">// 连接mysql_test库DB::connection('mysql_test')->table('test')->where('id',1)->first();// 连接mysql库DB::connection('mysq')->table('test')->where('id',1)->first();// 连接mysql库DB::table('test')->where('id',1)->first();</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享几种PHP常用的加密方式</title>
      <link href="2019/08/13/php/%E5%88%86%E4%BA%AB%E5%87%A0%E7%A7%8DPHP%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F/"/>
      <url>2019/08/13/php/%E5%88%86%E4%BA%AB%E5%87%A0%E7%A7%8DPHP%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>应用场景分别为：用户的唯一标识（文章加密id防止爬虫）、生成有规律的code、登录密码的加密</p></blockquote><a id="more"></a><p><a href="https://juejin.im/post/5d0c8231e51d45775d516f9e">使用hashids加密demo（用户的唯一标识、文章加密id防止爬虫）</a></p><h3 id="字符串与十六进制之间的转换加密（生成有规律的code）"><a href="#字符串与十六进制之间的转换加密（生成有规律的code）" class="headerlink" title="字符串与十六进制之间的转换加密（生成有规律的code）"></a>字符串与十六进制之间的转换加密（生成有规律的code）</h3><pre class=" language-lang-php"><code class="language-lang-php">   /**     * 字符串转十六进制     * @param $string     * @return string     */    public function str_encode($string)    {        $hex="";        for($i=0;$i<strlen($string);$i++){           $hex.=dechex(ord($string[$i]));        }        $hex=strtolower($hex);        return $hex;    }   /**     * 十六进制转字符串     * @param $hex     * @return string     */    public function str_decode($hex){        $string="";        for($i=0;$i<strlen($hex)-1;$i+=2){            $string.=chr(hexdec($hex[$i].$hex[$i+1]));        }        return  $string;    }</code></pre><blockquote><p>当用户登录账号密码的时候是明文传输的，如图：</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/7/29/16c3b6a81d7c2947?w=640&amp;h=146&amp;f=png&amp;s=18352" alt=""><br>所以要修改为加密后的密码，这样比较安全</p><h3 id="登录密码的加密"><a href="#登录密码的加密" class="headerlink" title="登录密码的加密"></a>登录密码的加密</h3><pre class=" language-lang-php"><code class="language-lang-php">    /**     * 生成key和iv的地址：https://asecuritysite.com/encryption/keygen     *              https://asecuritysite.com/encryption/PBKDF2z     */    /**     * @param string $string 需要加密的字符串     * @return string     */    public function encrypt($string)    {        // openssl_encrypt 加密不同Mcrypt，对秘钥长度要求，超出16加密结果不变        $data = openssl_encrypt($string, 'AES-192-CBC',pack('H*', env('ENCRYPT_KEY')), OPENSSL_RAW_DATA,pack('H*', env('ENCRYPT_IV')));        $data = base64_encode($data);        return $data;    }    /**     * @param string $string 需要解密的字符串     * @return string     */    public function decrypt($string)    {        $decrypted = openssl_decrypt(base64_decode($string), 'AES-192-CBC',  pack('H*', env('ENCRYPT_KEY')), OPENSSL_RAW_DATA,pack('H*', env('ENCRYPT_IV')));        return $decrypted;    }</code></pre><pre><code>ENCRYPT_KEY=ENCRYPT_KEYENCRYPT_IV=ENCRYPT_IV</code></pre><blockquote><p>以上采用AES-192-CBC加密方式</p></blockquote><h3 id="AES："><a href="#AES：" class="headerlink" title="AES："></a>AES：</h3><p>aes是基于数据块的加密方式，也就是说，每次处理的数据时一块（16字节），当数据不是16字节的倍数时填充，这就是所谓的分组密码（区别于基于比特位的流密码），16字节是分组长度</p><h3 id="分组加密的几种模式："><a href="#分组加密的几种模式：" class="headerlink" title="分组加密的几种模式："></a>分组加密的几种模式：</h3><p>ECB：是一种基础的加密方式，密文被分割成分组长度相等的块（不足补齐），然后单独一个个加密，一个个输出组成密文。</p><p>CBC：是一种循环模式，前一个分组的密文和当前分组的明文异或或操作后再加密，这样做的目的是增强破解难度。</p><p>CFB/OFB：实际上是一种反馈模式，目的也是增强破解的难度。</p><p>FCB和CBC的加密结果是不一样的，两者的模式不同，而且CBC会在第一个密码块运算时加入一个初始化向量。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git如何修改已经commit的name和email</title>
      <link href="2019/08/01/git/git%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%B7%B2%E7%BB%8Fcommit%E7%9A%84name%E5%92%8Cemail/"/>
      <url>2019/08/01/git/git%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%B7%B2%E7%BB%8Fcommit%E7%9A%84name%E5%92%8Cemail/</url>
      
        <content type="html"><![CDATA[<blockquote><p>自己的github仓库发现每次提交的name和email不统一，尝试去修改已经commitname和email<br> 因为更换过电脑，设置的—global name 和email 邮箱和以前的不一样了，想更换为以前的样子 于是尝试了好多方法，终于解决此问题希望以下方法可以帮助到大家</p></blockquote><a id="more"></a><h3 id="首先，我们创建modify-email-by-name-sh脚本"><a href="#首先，我们创建modify-email-by-name-sh脚本" class="headerlink" title="首先，我们创建modify_email_by_name.sh脚本"></a>首先，我们创建modify_email_by_name.sh脚本</h3><p>或者去github复制：<a href="https://github.com/WXiangQian/laravel-api/blob/master/modify_email_by_name.sh">modify_email_by_name.sh</a></p><pre><code>#!/bin/sh#git filter-branch --force --env-filter '    if [ "$GIT_COMMITTER_NAME" = "wangxiangqian" ];    then        GIT_COMMITTER_NAME="xiangqian";        GIT_COMMITTER_EMAIL="175023117@qq.com";        GIT_AUTHOR_NAME="xiangqian";        GIT_AUTHOR_EMAIL="175023117@qq.com";    fi' -- --all</code></pre><h3 id="将脚本移入要修改的git仓库，并提交该文件-不然无法执行此shell脚本-。"><a href="#将脚本移入要修改的git仓库，并提交该文件-不然无法执行此shell脚本-。" class="headerlink" title="将脚本移入要修改的git仓库，并提交该文件(*不然无法执行此shell脚本)。"></a>将脚本移入要修改的git仓库，并提交该文件(<em>*</em>不然无法执行此shell脚本)。</h3><p>然后执行命令，使<strong>modify_email_by_name.sh</strong>脚本文件可执行</p><pre><code>chmod +x modify_email_by_name.sh</code></pre><p>接着执行<strong>modify_email_by_name.sh</strong>脚本文件</p><pre><code>./modify_email_by_name.sh</code></pre><p>通过git push —f强行推送修改后的 log 信息。</p><h3 id="步骤操作完成"><a href="#步骤操作完成" class="headerlink" title="步骤操作完成"></a>步骤操作完成</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel与lumen 接口执行时间记录以及前后置中间件terminate的使用</title>
      <link href="2019/07/06/laravel/laravel%E4%B8%8Elumen%E5%89%8D%E5%90%8E%E7%BD%AE%E4%B8%AD%E9%97%B4%E4%BB%B6terminate/"/>
      <url>2019/07/06/laravel/laravel%E4%B8%8Elumen%E5%89%8D%E5%90%8E%E7%BD%AE%E4%B8%AD%E9%97%B4%E4%BB%B6terminate/</url>
      
        <content type="html"><![CDATA[<p>routemidlleware 不支持 terminate 这是基于什么考虑的。<br>不管 laravel 还是 lumen 只有 global middleware 才会去 call terminate 而 routemiddleware 却不会。<br>中间件文件都放在app/http/Middleware文件夹中，可以根据ExampleMiddleware.php进行创建</p><a id="more"></a><h3 id="前置中间件"><a href="#前置中间件" class="headerlink" title="前置中间件"></a>前置中间件</h3><pre class=" language-lang-php"><code class="language-lang-php">    namespace App\Http\Middleware;    use Closure;    define('START', microtime(true));    class BeforeMiddleware    {        //第三个参数为额外传参        public function handle($request, Closure $next)        {            //前置中间件,在执行路由定义指定的操作前做你想做的事情            return $next($request);        }    }</code></pre><h3 id="后置中间件"><a href="#后置中间件" class="headerlink" title="后置中间件"></a>后置中间件</h3><hr><pre><code>&lt;?phpnamespace App\Http\Middleware;use Closure;class AfterMiddleware{    //第三个参数为额外传参    public function handle($request, Closure $next)    {        $response = $next($request);        //后置中间件，在执行完路由定义指定的操作后（也就是响应前）做你想做的事情        echo 1;        return $response;    }}</code></pre><h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><hr><p>每个 HTTP 请求都经过一个中间件，只要将中间件的类加入到 bootstrap/app.php 的 $app-&gt;middleware() 调用参数数组中。</p><pre><code>$app-&gt;middleware([   App\Http\Middleware\Authenticate::class,]);</code></pre><h3 id="Terminable中间件"><a href="#Terminable中间件" class="headerlink" title="Terminable中间件"></a>Terminable中间件</h3><hr><p>有些时候中间件需要在 HTTP 响应被发送到浏览器之后才运行，例如，「session」中间件存储的 session 数据是在响应被发送到浏览器之后才进行写入的。想要做到这一点，你需要定义中间件为「terminable」。</p><pre><code>&lt;?phpnamespace Illuminate\Session\Middleware;use Closure;use Illuminate\Support\Facades\Log;class StartSession{    public function handle($request, Closure $next)    {        // 开始        Log::info($_SERVER['REQUEST_URI'].'开始'.START.'微秒');        return $next($request);    }    public function terminate($request, $response)    {        //结束        $end = microtime(true);        Log::info($_SERVER['REQUEST_URI'].'结束'.$end.'微秒');        $diff = ($end-START) * 1000;        if ($diff &gt;= 1500) {            Log::info("接口{".$_SERVER['REQUEST_URI']."}从请求开始到结束相差{$diff}毫秒");        }    }}</code></pre><p><code>terminate</code> 方法必须接收请求及响应。一旦定义了 terminable 中间件，你便需要将它增加到 <code>bootstrap/app.php</code> 文件的全局中间件清单列表中。</p><p>当在你的中间件调用 <code>terminate</code> 方法时，Lumen 会从 <a href="https://link.juejin.im?target=https%3A%2F%2Flearnku.com%2Fdocs%2Flaravel%2F5.3%2Fcontainer">服务容器</a> 解析一个全新的中间件实例。</p><p>如果你希望在 <code>handle</code> 及 <code>terminate</code> 方法被调用时使用一致的中间件实例，只需在容器中使用容器的 <code>singleton</code> 方法注册中间件。</p><pre><code>$app-&gt;singleton(    App\Http\Middleware\terminable::class );</code></pre><p><strong>如果上面的代码个别接口执行不到terminate的话(这里是坑，至今未找到原因)，你可以尝试以下方法</strong></p><p>在底层控制器中的的构造方法__construct中注册函数register_shutdown_function</p><p>注册一个 <code>callback</code> ，它会在脚本执行完成或者 <a href="https://link.juejin.im?target=https%3A%2F%2Fwww.php.net%2Fmanual%2Fzh%2Ffunction.exit.php">exit()</a> 后被调用。</p><p>可以多次调用 <strong>register_shutdown_function()</strong> ，这些被注册的回调会按照他们注册时的顺序被依次调用。 如果你在注册的方法内部调用 <a href="https://link.juejin.im?target=https%3A%2F%2Fwww.php.net%2Fmanual%2Fzh%2Ffunction.exit.php">exit()</a>， 那么所有处理会被中止，并且其他注册的中止回调也不会再被调用</p><pre><code>public function __construct(){    register_shutdown_function(array($this, 'test'));}public function test(){    //成功完成后置中间件里的内容    // TODO 切记 请勿die/exit}</code></pre><h3 id="以上是本人总结的方法和遇到的坑，如果有更好的方案，欢迎提出"><a href="#以上是本人总结的方法和遇到的坑，如果有更好的方案，欢迎提出" class="headerlink" title="以上是本人总结的方法和遇到的坑，如果有更好的方案，欢迎提出"></a>以上是本人总结的方法和遇到的坑，如果有更好的方案，欢迎提出</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpstorm2018.3注册码汇总（持续更新）</title>
      <link href="2019/05/10/php/phpstorm2018-3%E6%B3%A8%E5%86%8C%E7%A0%81%E6%B1%87%E6%80%BB%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>2019/05/10/php/phpstorm2018-3%E6%B3%A8%E5%86%8C%E7%A0%81%E6%B1%87%E6%80%BB%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>phpstorm2018.3注册码汇总（持续更新）<br><a id="more"></a></p><p>以前经常用lanyu的<a href="http://idea.lanyus.com/">http://idea.lanyus.com/</a></p><h3 id="最新phpstorm码（更新于2020-01-04）"><a href="#最新phpstorm码（更新于2020-01-04）" class="headerlink" title="最新phpstorm码（更新于2020-01-04）"></a>最新phpstorm码（更新于2020-01-04）</h3><pre class=" language-lang-code"><code class="language-lang-code">QYYBAC9D3J-eyJsaWNlbnNlSWQiOiJRWVlCQUM5RDNKIiwibGljZW5zZWVOYW1lIjoi6LaF57qnIOeoi+W6j+WRmCIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAyMC0wMS0wNCIsInBhaWRVcFRvIjoiMjAyMS0wMS0wMyJ9LHsiY29kZSI6IkFDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMC0wMS0wNCIsInBhaWRVcFRvIjoiMjAyMS0wMS0wMyJ9LHsiY29kZSI6IkRQTiIsImZhbGxiYWNrRGF0ZSI6IjIwMjAtMDEtMDQiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMDMifSx7ImNvZGUiOiJQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjAtMDEtMDQiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMDMifSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjAtMDEtMDQiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMDMifSx7ImNvZGUiOiJETSIsImZhbGxiYWNrRGF0ZSI6IjIwMjAtMDEtMDQiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMDMifSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwMjAtMDEtMDQiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMDMifSx7ImNvZGUiOiJSUzAiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiUkMiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiUkQiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiUEMiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiUk0iLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiREMiLCJmYWxsYmFja0RhdGUiOiIyMDIwLTAxLTA0IiwicGFpZFVwVG8iOiIyMDIxLTAxLTAzIn0seyJjb2RlIjoiUlNVIiwiZmFsbGJhY2tEYXRlIjoiMjAyMC0wMS0wNCIsInBhaWRVcFRvIjoiMjAyMS0wMS0wMyJ9XSwiaGFzaCI6IjE2MDgwOTA5LzAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-I7c5mu4hUCMxcldrwZEJMaT+qkrzrF1bjJi0i5QHcrRxk2LO0jqzUe2fBOUR4L+x+7n6kCwAoBBODm9wXst8dWLXdq179EtjU3rfJENr1wXGgtef//FNow+Id5iRufJ4W+p+3s5959GSFibl35YtbELELuCUH2IbCRly0PUBjitgA0r2y+9jV5YD/dmrd/p4C87MccC74NxtQfRdeUEGx87vnhsqTFH/sP4C2VljSo/F/Ft9JqsSlGfwSKjzU8BreYt1QleosdMnMK7a+fkfxh7n5zg4DskdVlNbfe6jvYgMVE16DMXd6F1Zhwq+lrmewJA2jPToc+H5304rcJfa9w==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</code></pre><pre><code>CATF44LT7C-eyJsaWNlbnNlSWQiOiJDQVRGNDRMVDdDIiwibGljZW5zZWVOYW1lIjoiVmxhZGlzbGF2IEtvdmFsZW5rbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJGb3IgZWR1Y2F0aW9uYWwgdXNlIG9ubHkiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiUkQiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJQQyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDgifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAyMC0wMS0wOCJ9LHsiY29kZSI6IkRDIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA4In1dLCJoYXNoIjoiMTE1MzA4ODUvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-BZLL+H88k449OQC56NsqU0fwb6wMAX1Di+CK5HS46DuOD1E68HPiTqREdn8DzrLVAoMkJReaH30RaIDLwUI8GEFifDcCYE5RbpE5ApNJ8mcUJr8oA1nrjY9IzZCgrSBFr4GAOLqSfXH+1UJ3K8UPqGh8nThomnKW9Jvv9pA7HIH/KrNm2RLV/aNMHWO8Q44A8ToXm7g5FS2lW903URPQ0KFgxT11w/KL81UkHm6yUXC7/LTAygIBArI8j+XUk3rlz4rpi2wrJclYXukrKQqH/V6CTbnVV3d6XAdtCqjryQ2Ga7bP/XTLjwAGwPEB3Q1W7LHNQ7CsyvZG/oTSOgD2YQ==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</code></pre><h3 id="最新phpstorm码（更新于2019年12月24日）"><a href="#最新phpstorm码（更新于2019年12月24日）" class="headerlink" title="最新phpstorm码（更新于2019年12月24日）"></a>最新phpstorm码（更新于2019年12月24日）</h3><pre><code>Y9MXSIF79G-eyJsaWNlbnNlSWQiOiJZOU1YU0lGNzlHIiwibGljZW5zZWVOYW1lIjoiSkJGYW1pbHkgQ2hpbmEiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDctMjYiLCJwYWlkVXBUbyI6IjIwMjAtMDctMjUifSx7ImNvZGUiOiJBQyIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDctMjYiLCJwYWlkVXBUbyI6IjIwMjAtMDctMjUifSx7ImNvZGUiOiJEUE4iLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA3LTI2IiwicGFpZFVwVG8iOiIyMDIwLTA3LTI1In0seyJjb2RlIjoiUFMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA3LTI2IiwicGFpZFVwVG8iOiIyMDIwLTA3LTI1In0seyJjb2RlIjoiR08iLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA3LTI2IiwicGFpZFVwVG8iOiIyMDIwLTA3LTI1In0seyJjb2RlIjoiRE0iLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA3LTI2IiwicGFpZFVwVG8iOiIyMDIwLTA3LTI1In0seyJjb2RlIjoiQ0wiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA3LTI2IiwicGFpZFVwVG8iOiIyMDIwLTA3LTI1In0seyJjb2RlIjoiUlMwIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IlJDIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IlJEIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IlJNIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IldTIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IkRCIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IkRDIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IlJTVSIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDctMjYiLCJwYWlkVXBUbyI6IjIwMjAtMDctMjUifV0sImhhc2giOiIxMzgzODYyOS8wIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-rI4et6OSKLA4gvOzxtyp48SCWtjwsOSQBJittaw6BOVJOwVBz0p31wBWDFSdIogdRPKquk2BAou7N694entEn4/Db3Ol5uotDtUd2MHuo+BBu9QcwIoX3RTrnYLwJfTlEJfRH/3TF3WtkPGQZQQcw/23hsZzdC/WJY6tmvyTijIBScUsvIOxZ+8REbWbkTQx1KliliFyrMua7hit8LThzfffZloHciaHwUP9BjxEjU0qQi+yFacSXjxEZERJT25hZrMN+bqBxcn59/4UJBrITt8YpLIlydt0+6vMSWAMawMzKpeDEDInKy0XomauTIUfxS4sbw/dSyVdSrh+IuOc7g==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</code></pre><pre><code>AHD9079DKZ-eyJsaWNlbnNlSWQiOiJBSEQ5MDc5REtaIiwibGljZW5zZWVOYW1lIjoiSmV0IEdyb3VwcyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0xMi0xNCIsInBhaWRVcFRvIjoiMjAyMC0xMi0xMyJ9LHsiY29kZSI6IkFDIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0xMi0xNCIsInBhaWRVcFRvIjoiMjAyMC0xMi0xMyJ9LHsiY29kZSI6IkRQTiIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMTItMTQiLCJwYWlkVXBUbyI6IjIwMjAtMTItMTMifSx7ImNvZGUiOiJQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMTItMTQiLCJwYWlkVXBUbyI6IjIwMjAtMTItMTMifSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMTItMTQiLCJwYWlkVXBUbyI6IjIwMjAtMTItMTMifSx7ImNvZGUiOiJETSIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMTItMTQiLCJwYWlkVXBUbyI6IjIwMjAtMTItMTMifSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMTItMTQiLCJwYWlkVXBUbyI6IjIwMjAtMTItMTMifSx7ImNvZGUiOiJSUzAiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTEyLTE0IiwicGFpZFVwVG8iOiIyMDIwLTEyLTEzIn0seyJjb2RlIjoiUkMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTEyLTE0IiwicGFpZFVwVG8iOiIyMDIwLTEyLTEzIn0seyJjb2RlIjoiUkQiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTEyLTE0IiwicGFpZFVwVG8iOiIyMDIwLTEyLTEzIn0seyJjb2RlIjoiUEMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTEyLTE0IiwicGFpZFVwVG8iOiIyMDIwLTEyLTEzIn0seyJjb2RlIjoiUk0iLCJmYWxsYmFja0RhdGUiOiIyMDE5LTEyLTE0IiwicGFpZFVwVG8iOiIyMDIwLTEyLTEzIn0seyJjb2RlIjoiV1MiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTEyLTE0IiwicGFpZFVwVG8iOiIyMDIwLTEyLTEzIn0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTEyLTE0IiwicGFpZFVwVG8iOiIyMDIwLTEyLTEzIn0seyJjb2RlIjoiREMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTEyLTE0IiwicGFpZFVwVG8iOiIyMDIwLTEyLTEzIn0seyJjb2RlIjoiUlNVIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0xMi0xNCIsInBhaWRVcFRvIjoiMjAyMC0xMi0xMyJ9XSwiaGFzaCI6IjE1ODE1MDAyLzAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-LSd4oz1ZeZGTkNgA7KqUD6dmIqKNRaJEiAdpNBN3rw86DnEZm6oUoTMdM40mxRG0jz5RpLR8E6/A2uA2b9s6fX3U1dAhzuJ7HUpha2OCk9EnYGlIoxnMmYA+ZrCjlfLU2EsLMPcmKHAY5o2excxpbIqLYsNhXN3r2MxEtvGap9Y+hBxNJJYoYjV5glFIiJ/9NNAE6s1EqRRlQk2UpFg2ODDlK1JZrQTtIJvH9squs1IFz0fY9i/okXIyR4fCUbU2LUp5XbtMn3n2lKb2mEKDWjjSly3cZizAGz7obIixE1HZuEICEPWeAZiU8qc/adRt7eUYW81KFdYjLNDXcVckbw==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</code></pre><h3 id="lanyu-正版授权"><a href="#lanyu-正版授权" class="headerlink" title="lanyu(正版授权)"></a>lanyu(正版授权)</h3><pre><code>56ZS5PQ1RF-eyJsaWNlbnNlSWQiOiI1NlpTNVBRMVJGIiwibGljZW5zZWVOYW1lIjoi5q2j54mI5o6I5p2DIC4iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiRm9yIGVkdWNhdGlvbmFsIHVzZSBvbmx5IiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJHTyIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IkRNIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiQ0wiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9XSwiaGFzaCI6IjEyMjkxNDk4LzAiLCJncmFjZVBlcmlvZERheXMiOjAsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-SYSsDcgL1WJmHnsiGaHUWbaZLPIe2oI3QiIneDtaIbh/SZOqu63G7RGudSjf3ssPb1zxroMti/bK9II1ugHz/nTjw31Uah7D0HqeaCO7Zc0q9BeHysiWmBZ+8bABs5vr25GgIa5pO7CJhL7RitXQbWpAajrMBAeZ2En3wCgNwT6D6hNmiMlhXsWgwkw2OKnyHZ2dl8yEL+oV5SW14t7bdjYGKQrYjSd4+2zc4FnaX88yLnGNO9B3U6G+BuM37pxS5MjHrkHqMTK8W3I66mIj6IB6dYXD5nvKKO1OZREBAr6LV0BqRYSbuJKFhZ8nd6YDG20GvW6leimv0rHVBFmA0w==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</code></pre><pre><code>YZVR7WDLV8-eyJsaWNlbnNlSWQiOiJZWlZSN1dETFY4IiwibGljZW5zZWVOYW1lIjoiamV0YnJhaW5zIGpzIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTktMTEtMjYifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNiJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNiJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE5LTExLTI2In0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMTktMTEtMjYifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNiJ9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDE5LTExLTI2In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE5LTExLTI2In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTktMTEtMjYifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNiJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE5LTExLTI2In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTktMTEtMjYifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNiJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE5LTExLTI2In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTktMTEtMjYifSx7ImNvZGUiOiJSU1UiLCJwYWlkVXBUbyI6IjIwMTktMTEtMjYifV0sImhhc2giOiIxMTA1NzI3NC8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-rsJR5mlJcjibqRu1gQAMUCngMe8i+AOWIi+JZkNFYPET2G1ONcLPcIzoATTRi6ofkDm5l+3Y4HXjBPjVU6bHDdMBAzCnUqpXKsCknwSYyPSU0Y5pzuLvw6O9aPlQ46UBoTEC2BL5W6f11S7NlAq7tTbDuvFUynqSGAmTEfuZtKmzRmp20ejTPuMlSO7UqSkZvkg6YvSTrax1d2K+P9SAmVGZ9iC7AzBs4AwTf84QB9qHvE/Nh0oELSHWGG9hsZZ7sVghI/39/jPQFTp8GLFsl36ZPybPhGDam721zxS9H++/eJk23Jz3nxaRluE4dWmpHrDg1qBHp8qVpSFejg2QYw==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</code></pre><pre><code>N757JE0KCT-eyJsaWNlbnNlSWQiOiJONzU3SkUwS0NUIiwibGljZW5zZWVOYW1lIjoid3UgYW5qdW4iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiRm9yIGVkdWNhdGlvbmFsIHVzZSBvbmx5IiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJHTyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IkRNIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiQ0wiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDIwLTAxLTA3In0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMjAtMDEtMDcifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjAyMC0wMS0wNyJ9XSwiaGFzaCI6IjExNTE5OTc4LzAiLCJncmFjZVBlcmlvZERheXMiOjAsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-AE3x5sRpDellY4SmQVy2Pfc2IT7y1JjZFmDA5JtOv4K5gwVdJOLw5YGiOskZTuGu6JhOi50nnd0WaaNZIuVVVx3T5MlXrAuO3kb2qPtLtQ6/n3lp4fIv+6384D4ciEyRWijG7NA9exQx39Tjk7/xqaGk7ooKgq5yquIfIA+r4jlbW8j9gas1qy3uTGUuZQiPB4lv3P5OIpZzIoWXnFwWhy7s//mjOWRZdf/Du3RP518tMk74wizbTeDn84qxbM+giNAn+ovKQRMYHtLyxntBiP5ByzfAA9Baa5TUGW5wDiZrxFuvBAWTbLrRI0Kd7Nb/tB9n1V9uluB2WWIm7iMxDg==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</code></pre><pre><code>6ZUMD7WWWU-eyJsaWNlbnNlSWQiOiI2WlVNRDdXV1dVIiwibGljZW5zZWVOYW1lIjoiSmV0cyBHcm91cCIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wOS0wMyIsInBhaWRVcFRvIjoiMjAyMC0wOS0wMiJ9LHsiY29kZSI6IkFDIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wOS0wMyIsInBhaWRVcFRvIjoiMjAyMC0wOS0wMiJ9LHsiY29kZSI6IkRQTiIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDktMDMiLCJwYWlkVXBUbyI6IjIwMjAtMDktMDIifSx7ImNvZGUiOiJQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDktMDMiLCJwYWlkVXBUbyI6IjIwMjAtMDktMDIifSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDktMDMiLCJwYWlkVXBUbyI6IjIwMjAtMDktMDIifSx7ImNvZGUiOiJETSIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDktMDMiLCJwYWlkVXBUbyI6IjIwMjAtMDktMDIifSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDktMDMiLCJwYWlkVXBUbyI6IjIwMjAtMDktMDIifSx7ImNvZGUiOiJSUzAiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA5LTAzIiwicGFpZFVwVG8iOiIyMDIwLTA5LTAyIn0seyJjb2RlIjoiUkMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA5LTAzIiwicGFpZFVwVG8iOiIyMDIwLTA5LTAyIn0seyJjb2RlIjoiUkQiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA5LTAzIiwicGFpZFVwVG8iOiIyMDIwLTA5LTAyIn0seyJjb2RlIjoiUEMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA5LTAzIiwicGFpZFVwVG8iOiIyMDIwLTA5LTAyIn0seyJjb2RlIjoiUk0iLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA5LTAzIiwicGFpZFVwVG8iOiIyMDIwLTA5LTAyIn0seyJjb2RlIjoiV1MiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA5LTAzIiwicGFpZFVwVG8iOiIyMDIwLTA5LTAyIn0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA5LTAzIiwicGFpZFVwVG8iOiIyMDIwLTA5LTAyIn0seyJjb2RlIjoiREMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA5LTAzIiwicGFpZFVwVG8iOiIyMDIwLTA5LTAyIn0seyJjb2RlIjoiUlNVIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wOS0wMyIsInBhaWRVcFRvIjoiMjAyMC0wOS0wMiJ9XSwiaGFzaCI6IjE0Mjg5NzUwLzAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-Gd8RATyTEnHcAydKuC7N1ZdeLaMP9IR+nlPyVxvLsczAUTGKxcuAYbfz/uVtepg8ey4NfJlPNS+AGcGz8x7ImkX9jEV9KElMxPu3tKSdF/WKo6JCONX7UtudYa/9EQum3banxci/qH7jejSrFZSN+YjWQiYTR0Q8gq4/a2RyQTgseZfpImY/nXkOWLwWArr/p+4ddp/bWQN4nLTW+Z4ZaQeLE96Z9viCdn62EKOcR02Hfr9Oju9VYQh1L8pGrTqNey5nUSv/LQUbVwo5qoYbBRos8l6ewkFNGsuC3vtOgGWSgkgChbDjWhW4Nkm4vDM2NFAphMsS1dgyPw3eJ3C+6A==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</code></pre><p>希望可以帮助到大家</p><p><img src="https://img-blog.csdnimg.cn/20190505114101542.png" alt=""></p><p>lanyu注册码有效期为2019年3月10日至2020年3月11日</p><p>如不能使用或到期可以随时评论，保证注册码随时是最新的</p><p>使用前请将 0.0.0.0 account.jetbrains.com<br>及 0.0.0.0 www.jetbrains.com 添加到hosts文件中</p><p>如果还是出现输入激活码后，还是弹出激活的，把本地host文件里的0.0.0.0 account.jetbrains.com删除就好</p><blockquote><p>因为很多人尝试过破解，所以导致激活不成功，不成功的有两种情况，下面是解决办法。</p></blockquote><h3 id="第一种情况：有些朋友反映这种提示，error1653219或者一直弹出激活框："><a href="#第一种情况：有些朋友反映这种提示，error1653219或者一直弹出激活框：" class="headerlink" title="第一种情况：有些朋友反映这种提示，error1653219或者一直弹出激活框："></a>第一种情况：有些朋友反映这种提示，error1653219或者一直弹出激活框：</h3><blockquote><p>原因：您修改过hosts文件，请还原一下（删除添加的内容），否则无法激活正版软件。</p></blockquote><p>解决办法也很简单：删除0.0.0.0 account.jetbrains.com 然后保存关闭即</p><h3 id="第二种错误提示："><a href="#第二种错误提示：" class="headerlink" title="第二种错误提示："></a>第二种错误提示：</h3><blockquote><p>(提示Key is invaild) 如果您安装过破解补丁，请删除补丁后重新激活。<br>（删除bin目录下的JetbrainsCrack文件）</p></blockquote><p><a href="https://juejin.im/post/5d0c8ca851882532760c68bf">掘金地址</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel5.5实现图片验证码的获取以及验证api接口</title>
      <link href="2019/05/08/laravel/Laravel5.5%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E8%8E%B7%E5%8F%96%E4%BB%A5%E5%8F%8A%E9%AA%8C%E8%AF%81api%E6%8E%A5%E5%8F%A3/"/>
      <url>2019/05/08/laravel/Laravel5.5%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E8%8E%B7%E5%8F%96%E4%BB%A5%E5%8F%8A%E9%AA%8C%E8%AF%81api%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p><strong>本人感觉用的比较好的验证码包，拿出来分享一下，傻瓜式教程，大佬别喷。</strong></p><a id="more"></a><h2 id="原文链接：https-juejin-im-post-5d0c3ae9f265da1b6b1cdd2b"><a href="#原文链接：https-juejin-im-post-5d0c3ae9f265da1b6b1cdd2b" class="headerlink" title="原文链接：https://juejin.im/post/5d0c3ae9f265da1b6b1cdd2b"></a><a href="https://juejin.im/post/5d0c3ae9f265da1b6b1cdd2b">原文链接：</a><a href="https://juejin.im/post/5d0c3ae9f265da1b6b1cdd2b">https://juejin.im/post/5d0c3ae9f265da1b6b1cdd2b</a></h2><p>用户登陆注册，不管前台后台，为了安全性还是需要加入手机短信或图形验证码的，这样安全性会好很多</p><p>因为不同的需求，我们可以返回图片、网址、HTML，根据前端需求来返回相应的数据</p><h2 id="首先要引入图片验证码的composer包"><a href="#首先要引入图片验证码的composer包" class="headerlink" title="首先要引入图片验证码的composer包"></a>首先要引入图片验证码的composer包</h2><p>github地址：<a href="https://github.com/mewebstudio/captcha">https://github.com/mewebstudio/captcha</a></p><h2 id="安装captcha："><a href="#安装captcha：" class="headerlink" title="安装captcha："></a>安装captcha：</h2><pre><code>composer require mews/captcha </code></pre><p>找到<code>config/app.php下的providers，添加如下代码</code></p><pre><code>\Mews\Captcha\CaptchaServiceProvider::class,</code></pre><p>找到<code>config/app.php下的aliases``，添加如下代码</code></p><pre><code>'Captcha' =&gt; Mews\Captcha\Facades\Captcha::class,</code></pre><p>引入配置文件，选择相应的包</p><pre><code>php artisan vendor:publish</code></pre><p>则生成config/captcha.php</p><p>配置文件中的代码：例如长宽，flat配置等，个人觉得使用默认配置吧，也没什么问题。</p><h1 id="Return-URL"><a href="#Return-URL" class="headerlink" title="Return URL"></a>Return URL</h1><pre><code>captcha_src();Captcha::src();</code></pre><h3 id="Return-HTML"><a href="#Return-HTML" class="headerlink" title="Return HTML"></a>Return HTML</h3><pre><code>captcha_img();Captcha::img();</code></pre><h3 id="To-use-different-configurations"><a href="#To-use-different-configurations" class="headerlink" title="To use different configurations"></a>To use different configurations</h3><pre><code>captcha_img('flat');Captcha::img('inverse');</code></pre><h3 id="大家可以参考demo（demo为composer包自带的）"><a href="#大家可以参考demo（demo为composer包自带的）" class="headerlink" title="大家可以参考demo（demo为composer包自带的）"></a>大家可以参考demo（demo为composer包自带的）</h3><pre><code>Route::any('captcha-test', function()    {        if (Request::getMethod() == 'POST')        {            $rules = ['captcha' =&gt; 'required|captcha'];            $validator = Validator::make(Input::all(), $rules);            if ($validator-&gt;fails())            {                echo '&lt;p style="color: #ff0000;"&gt;Incorrect!&lt;/p&gt;';            }            else            {                echo '&lt;p style="color: #00ff30;"&gt;Matched :)&lt;/p&gt;';            }        }        $form = '&lt;form method="post" action="captcha-test"&gt;';        $form .= '&lt;input type="hidden" name="_token" value="' . csrf_token() . '"&gt;';        $form .= '&lt;p&gt;' . captcha_img() . '&lt;/p&gt;';        $form .= '&lt;p&gt;&lt;input type="text" name="captcha"&gt;&lt;/p&gt;';        $form .= '&lt;p&gt;&lt;button type="submit" name="check"&gt;Check&lt;/button&gt;&lt;/p&gt;';        $form .= '&lt;/form&gt;';        return $form;    });</code></pre><h3 id="本次项目用到的方法如下："><a href="#本次项目用到的方法如下：" class="headerlink" title="本次项目用到的方法如下："></a>本次项目用到的方法如下：</h3><p>路由：get为获取图片验证码，post为验证验证码是否正确</p><pre><code>Route::get('/captcha', 'AllController@captcha');Route::post('/captcha/validate', 'AllController@captchaValidate');</code></pre><p>控制器中的方法：获取图片验证码返回的是url，如果想返回img标签或者html，请看上面的方法</p><pre><code>public function captcha(){    $captcha['url'] = captcha_src();    return $this-&gt;responseData($captcha);}</code></pre><p>前端把验证码传过来进行验证</p><pre><code>public function captchaValidate(Request $request){   $rules = ['captcha' =&gt; 'required|captcha'];   $validator = \Validator::make($request-&gt;all(), $rules);   if ($validator-&gt;fails()){       return $this-&gt;responseFailed('验证失败');   } else {       return $this-&gt;responseSuccess('验证成功');   }}</code></pre><p>如果一直返回验证失败，则需要在app/Http/Kernel.php中的$middleware加入以下信息</p><pre><code>\Illuminate\Session\Middleware\StartSession::class</code></pre><h3 id="配上接口文档图片："><a href="#配上接口文档图片：" class="headerlink" title="配上接口文档图片："></a>配上接口文档图片：</h3><p><img src="https://img-blog.csdn.net/2018083118290433?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p><p>获取如下验证码<br>d6qfe</p><p>验证验证码是否正确</p><p><img src="https://img-blog.csdn.net/20180831182951127?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTc1MDIzMTE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p><h1 id="纯原创，所有作品都是经验所得，希望可以获得大家的支持。"><a href="#纯原创，所有作品都是经验所得，希望可以获得大家的支持。" class="headerlink" title="纯原创，所有作品都是经验所得，希望可以获得大家的支持。"></a>纯原创，所有作品都是经验所得，希望可以获得大家的支持。</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel-admin自定义excel导出数据</title>
      <link href="2019/04/19/laravel/Laravel-admin%E8%87%AA%E5%AE%9A%E4%B9%89excel%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE/"/>
      <url>2019/04/19/laravel/Laravel-admin%E8%87%AA%E5%AE%9A%E4%B9%89excel%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>model-grid</code>内置的导出功能只是实现了简单的csv格式文件的导出，如果遇到文件编码问题或者满足不了自己需求的情况，可以按照下面的步骤来自定义导出功能</p></blockquote><a id="more"></a><p>Laravel-admin1.5.*教程点击跳转：<a href="https://blog.csdn.net/qq175023117/article/details/80681533">https://blog.csdn.net/qq175023117/article/details/80681533</a></p><p>Laravel-admin1.6.*教程点击跳转：<a href="https://blog.csdn.net/qq175023117/article/details/86133101">https://blog.csdn.net/qq175023117/article/details/86133101</a></p><p>参考laravel-admin文档来进行扩展的方法：<a href="http://laravel-admin.org/docs/zh/model-grid-export">http://laravel-admin.org/docs/zh/model-grid-export</a></p><h3 id="首先安装好它："><a href="#首先安装好它：" class="headerlink" title="首先安装好它："></a>首先安装好它：</h3><pre><code>composer require maatwebsite/excel:~2.1.0在config/app.php中的providers中添加： \Maatwebsite\Excel\ExcelServiceProvider::class,php artisan vendor:publish --provider="Maatwebsite\Excel\ExcelServiceProvider"</code></pre><h3 id="创建扩展文件、比如app-Admin-Extensions-ExcelExpoter-php"><a href="#创建扩展文件、比如app-Admin-Extensions-ExcelExpoter-php" class="headerlink" title="创建扩展文件、比如app/Admin/Extensions/ExcelExpoter.php:"></a>创建扩展文件、比如<code>app/Admin/Extensions/ExcelExpoter.php</code>:</h3><pre><code>&lt;?phpnamespace App\Admin\Extensions;use Encore\Admin\Grid\Exporters\AbstractExporter;use Maatwebsite\Excel\Facades\Excel;class ExcelExpoter extends AbstractExporter{    protected $file_name = 'file';    protected $sheet_name = 'sheet';    protected $head = [];    protected $body = [];    public function setAttr($file_name, $sheet_name, $head, $body)    {        $this-&gt;file_name = $file_name;        $this-&gt;sheet_name = $sheet_name;        $this-&gt;head = $head;        $this-&gt;body = $body;    }    public function export()    {        Excel::create($this-&gt;file_name, function($excel) {            $excel-&gt;sheet($this-&gt;sheet_name, function($sheet) {                // 这段逻辑是从表格数据中取出需要导出的字段                $body = $this-&gt;body;                $bodyRows = collect($this-&gt;getData())-&gt;map(function ($item) use($body) {                    $arr = [];                    foreach($body as $value) {                        $arr[] = array_get($item, $value);                    }                    return $arr;                });                $rows = collect([$this-&gt;head])-&gt;merge($bodyRows);                $sheet-&gt;rows($rows);            });        })-&gt;export('xls');//.xls .csv ...    }}</code></pre><h3 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h3><pre><code>use App\Admin\Extensions\ExcelExpoter;protected function grid(){   $grid = new Grid(new User);   // 导出   $excel = new ExcelExpoter();   $date = date('Y-m-d H:i:s', time());   $excel-&gt;setAttr('员工管理'.$date, '员工管理', ['id','姓名','性别'],['id','name','sex']);   $grid-&gt;exporter($excel);}</code></pre><p>如案例不详细，可查看我开源项目源码：<a href="https://github.com/WXiangQian/stationery-cms">https://github.com/WXiangQian/stationery-cms</a></p><p>喜欢的可以给个star</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layui的二级联动</title>
      <link href="2019/04/02/layui%E7%9A%84%E4%BA%8C%E7%BA%A7%E8%81%94%E5%8A%A8/"/>
      <url>2019/04/02/layui%E7%9A%84%E4%BA%8C%E7%BA%A7%E8%81%94%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="layui的二级联动"><a href="#layui的二级联动" class="headerlink" title="layui的二级联动"></a>layui的二级联动</h3><a id="more"></a><p>至少你要引入layui的公共资源<br>$type1为后端传给前端的数据</p><p>下面分享layui二级联动HTML代码</p><pre class=" language-lang-html"><code class="language-lang-html"><form class="layui-form" action="" >    题目分类：    <div class="layui-inline">        <select name="type1" class="select" lay-filter="type1">            <option value="0">选择题目分类</option>            @foreach($type1 as $v)                <option value="{{ $v->id }}">{{ $v->name }}</option>            @endforeach        </select>    </div>    <div class="layui-inline">        <select name="type2" class="select">            <option value="0">选择一级分类</option>        </select>    </div></form><button class="layui-btn layui-btn-sm" data-type="reload">搜索</button></code></pre><p>下面分享二级联动代码</p><pre class=" language-lang-javascript"><code class="language-lang-javascript"> layui.use(['form'], function(){    var form = layui.form;        form.on('select(type1)', function(data){            var type_id = data.elem.value;            // console.log(type_id)            $.ajax({                type: 'POST',                url: "/question/select",                data: {type_id:type_id},                dataType:  'json',                success:function(e){                    // console.log(e);                    if (e.errno == 0)  {                        //empty() 方法从被选元素移除所有内容                        $("select[name='type2']").empty();                        var html = "<option value='0'>选择二级分类</option>";                        $(e.data).each(function (v, k) {                            html += "<option value='" + k.id + "'>" + k.name + "</option>";                        });                        //把遍历的数据放到select表里面                        $("select[name='type2']").append(html);                        //从新刷新了一下下拉框                        form.render('select');      //重新渲染                    } else {                        layer.alert(data.msg);                    }                },                error: function () {                    layer.alert('出错了！');                }            });        });  });</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layui解决数据表格搜索时发送了两次请求问题</title>
      <link href="2019/03/28/layui%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%A0%BC%E6%90%9C%E7%B4%A2%E6%97%B6%E5%8F%91%E9%80%81%E4%BA%86%E4%B8%A4%E6%AC%A1%E8%AF%B7%E6%B1%82%E9%97%AE%E9%A2%98/"/>
      <url>2019/03/28/layui%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%A0%BC%E6%90%9C%E7%B4%A2%E6%97%B6%E5%8F%91%E9%80%81%E4%BA%86%E4%B8%A4%E6%AC%A1%E8%AF%B7%E6%B1%82%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>layui解决数据表格搜索时发送了两次请求问题</p><a id="more"></a><pre class=" language-lang-shell"><code class="language-lang-shell">在使用layui做后台项目时，用的数据表格渲染然后实现条件查询，查看控制台，一开始正常是获取了一次列表，但是设置了搜索条件，点击搜索后，发送了一条带条件参数的请求去后台，但是同时又发送了获取全部数据的请求</code></pre><p>解决方案</p><pre class=" language-lang-shell"><code class="language-lang-shell">我的搜索按钮设置在了表单里面 表单的按钮点击是默认提交 所以相当于提交了两次！！将button在form中拿出来，就可以解决问题了本人用的是监听提交，没用使用form，所以可以正常搜索</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac出现Enter passphrase for key的解决方案</title>
      <link href="2019/03/27/git/mac%E5%87%BA%E7%8E%B0Enter%20passphrase%20for%20key%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2019/03/27/git/mac%E5%87%BA%E7%8E%B0Enter%20passphrase%20for%20key%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h3 id="mac出现Enter-passphrase-for-key的解决方案"><a href="#mac出现Enter-passphrase-for-key的解决方案" class="headerlink" title="mac出现Enter passphrase for key的解决方案"></a>mac出现Enter passphrase for key的解决方案</h3><a id="more"></a><p><strong>刚进入新公司，第一次用Mac开发，因为电脑是前同事的，所以要把各种配置和git的配置换成自己的，由于秘钥更改没有一次性改好，在网上寻找了一些答案，自己总结下经验，防止以后遇到同样的问题。</strong></p><h3 id="公钥-私钥"><a href="#公钥-私钥" class="headerlink" title="公钥 私钥"></a>公钥 私钥</h3><p>当我们关联好自己的git时，发现每次pull 或 push代码时会让我们重复性输入自己的密码，问题不是出在我们关联的不对，而是对git的公钥和私钥了解并不深，使用命令ssh-keygen，默认生成的公钥名为id_rsa.pub ，私钥名为id_rsa。</p><p>$ cat id_rsa.pub</p><pre><code>WXiangQiandeMacBook-Pro:.ssh $ cat id_rsa.pubssh-rsa ********yc2EAAAADAQABAAACAQDGTX8c2e7jJv+ffKIoaMQgvaz6L4vO/b2acB9oYTZaihE2Bj6yO6osoAxitmzAvL9nOsbBnTciYsD/6dNj8mJr3ccQIbfFxcx6+1rGMonlhz1LLAaiHlwqQR8RECSYM39XNH4SN8+2yUQbLSdQKC0mIKhXMJu4FUJ37yqQFVV8g2FIzijqqtTIhA9IMCZ7UY9SfRNwZ6bcSVW2vHMvbXTmrr899eH+7FIupNByRp+PndfyYKXvjF4QlhvQUBHL7DmgOc2sMrJXyD6CI74+rhWG4R1wZWsM0Y3+Ecq6ImDA3f0Lh52ytDOIdM89tO4y+3LUDWIB8r6G0BzMaiXfRDHLjoKYSo0t6wGwtcKJapLQmbxI/Ww0RBHeRQiDw+rsl7XbswXTI9WSupQ+R0k87h6p8VUZrQSZGE0ne6TWUtTAzAgG14mom8lBy+3F6eeFg2n2CRJwT8EAgYAKkNotXfcYI+AOx/rKsuT006sggMl73If4Ru5hKApJ7RngffhZTXK3+V5ghfOUuG/bDchEleUKUryqOf2bXz8fCZxyEeBXVtgTovFA2k84iAqkSFqWjrKhmogOEOuicGN4SN2jFoGfNYMV0HDTPNZkjJA6TB8mplBKOf8TqvneWB8hY10z7F0zOExXVoiUY0kF49ZjAcbJmC/9v9SqHqicb87tAx/P4w== “wangxiangqian@****.cn”</code></pre><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p>解决</p><p>终端提示：Enter passphrase for key，表示我们对自己的git使用了私钥，在公钥的基础上又加了一道保障，所以会出现重复性输入密码，切换到文件cd ~/.ssh下会有id_rsa，id_rsa.pub，known_hosts三个文件，使用命令rm id_rsa* 删除我们的私钥，cd … 切换目录，执行ssh-keygen -t rsa -C “你的邮箱” -b 4096一路回车键，出现</p><pre><code>+---[RSA 4096]----+|              .o.||          .  .oo ||         . + .= +||       .. . **+*.|| .    ..S  o.OX. ||o .. ..+    .B*  ||....o..     oo.  ||=...+.       E   ||+oo=o.           |+----[SHA256]-----+</code></pre><p>然后重新进入cd ~/.ssh该文件，执行cat id_rsa.pub将出来的那一串编码复制粘贴到你的远程git上建立关联，完成。</p><p>其他<br>以上是我开发中遇到的问题，查阅过一部分资料没有得到实际性的解决。如果上述还是没有解决，尝试一下其他人的办法，依旧是在本地执行ssh-a -K回车输入自己的密码，或者依次执行eval ssh-agent ssh-add命令，这些命令只能解决在你当前开机的状态下，不在输入你的git密码，在你再次关闭你的设备、重启之后，依旧会提示你输入,不妨试试上面的解决办法。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 16.04 环境安装部署 项目部署文档</title>
      <link href="2019/03/19/laravel/Ubuntu16.04%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
      <url>2019/03/19/laravel/Ubuntu16.04%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="环境版本"><a href="#环境版本" class="headerlink" title="环境版本"></a>环境版本</h2><pre class=" language-lang-shell"><code class="language-lang-shell">Ubuntu 16.04Nginx 1.15.5PHP 7.3.0MySQL 5.7Composer 1.7.2Git 2.7.4</code></pre><a id="more"></a><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><p>首先，添加 <code>nginx_signing.key</code></p><pre class=" language-lang-shell"><code class="language-lang-shell">$ wget http://nginx.org/keys/nginx_signing.key$ wget http://nginx.org/keys/nginx_signing.key</code></pre><p>添加 Nginx 官方源</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ echo &quot;deb http://nginx.org/packages/ubuntu/ trusty nginx&quot; &gt;&gt; /etc/apt/sources.list$ echo &quot;deb http://nginx.org/packages/ubuntu/ trusty nginx&quot; &gt;&gt; /etc/apt/sources.list</code></pre><p>如果你想安装Nginx1.9以上的版本可以在<code>packages</code>后添加<code>/mainline</code>，这是主线版本</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ echo &quot;deb http://nginx.org/packages/mainline/ubuntu/ trusty nginx&quot; &gt;&gt; /etc/apt/sources.list$ echo &quot;deb-src http://nginx.org/packages/mainline/ubuntu/ trusty nginx&quot; &gt;&gt; /etc/apt/sources.list</code></pre><p>更新源并安装 Nginx</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ sudo apt-get update$ sudo apt-get install nginx// 开启 nginx$ /usr/sbin/nginx</code></pre><h4 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h4><p>在 <code>/etc/nginx/nginx.conf</code> 文件中的第一行查看你的 <a href="http://nginx.org/">Nginx</a> 用户。</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ less /etc/nginx/nginx.conf</code></pre><p><strong>修改用户和组</strong></p><p><a href="http://php.net/">PHP7</a> 默认的用户和组是<code>www-data</code>。 如果你的 <a href="http://nginx.org/">Nginx</a> 用户名也是<code>www-data</code>，那么不需要做下面的修改。 如果你的 <a href="http://nginx.org/">Nginx</a> 用户名是 nginx，那么你可以在/etc/nginx/nginx.conf文件中将它修改成<code>www-data</code>.</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ sudo vi /etc/nginx/nginx.conf</code></pre><p>重启 <a href="http://nginx.org/">Nginx</a> 服务</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ nginx -s reload</code></pre><p><strong>Laravel 项目 Nginx 配置</strong></p><p>在 <code>/etc/nginx/conf.d</code> 添加一个新的配置即可，配置如下</p><pre><code>server {    listen 80;    server_name {domain_name};    charset utf-8;    access_log  /var/log/nginx/{name}.access.log  main;    error_log  /var/log/nginx/{name}.error.log warn;    root   /var/www/{project_name}/public;    index  index.php index.html index.htm;    gzip on;    gzip_min_length 1k;    gzip_buffers 4 16k;    gzip_http_version 1.0;    gzip_comp_level 6;    gzip_types text/plain application/javascript application/x-javascript text/xml text/css;    gzip_disable &amp;quot;MSIE [1-6]\.&amp;quot;;    gzip_vary on;    location / {        try_files $uri $uri/ /index.php?$query_string;    }    location ~ \.php$ {        try_files $uri /index.php =404;        fastcgi_split_path_info ^(.+\.php)(/.+)$;        fastcgi_pass unix:/run/php/php7.3-fpm.sock;        fastcgi_index index.php;        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;        fastcgi_param HTTP_X_FORWARDED_FOR &amp;#039;&amp;#039;;        fastcgi_param HTTP_X_REAL_IP &amp;#039;&amp;#039;;        fastcgi_param HTTP_CLIENT_IP &amp;#039;&amp;#039;;        fastcgi_param HTTP_PROXY &amp;#039;&amp;#039;;        include fastcgi_params;    }}</code></pre><p>&gt; {domain_name} - 替换成域名<br>&gt; {name} - 保存的日志名<br>&gt; {project_name} - 项目名字<br>&gt; root 是项目存放的地址，这个根据自己实际情况修改</p><p>配置好后重启 Nginx 服务</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ nginx -s reload</code></pre><h3 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h3><p>添加 PPA</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ sudo apt-get install python-software-properties software-properties-common$ sudo add-apt-repository ppa:ondrej/php$ sudo apt-get update</code></pre><p>安装 <a href="http://php.net/">PHP7</a> 以及所需的一些扩展</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ sudo apt-get install php7.3-fpm php7.3-mysql php7.3-common php7.3-curl php7.3-cli php7.3-mbstring php7.3-xml php7.3-bcmath</code></pre><p>配置 <a href="http://php.net/">PHP7</a></p><pre class=" language-lang-shell"><code class="language-lang-shell">$ sudo vim /etc/php/7.3/fpm/php.ini</code></pre><p>找到<code>cgi.fix_pathinfo</code>选项，去掉注释，然后将值设置为<code>0</code></p><pre class=" language-lang-ini"><code class="language-lang-ini">cgi.fix_pathinfo=0</code></pre><p>重启 <a href="http://php.net/">PHP7</a></p><pre class=" language-lang-shell"><code class="language-lang-shell">$ sudo service php7.3-fpm restart</code></pre><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><pre class=" language-lang-shell"><code class="language-lang-shell">$ sudo apt-get install mysql-server-5.7 mysql-client-5.7</code></pre><p>途中会提示设置MySQL的密码，安装后运行：</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ mysql -uroot -p</code></pre><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><pre class=" language-lang-shell"><code class="language-lang-shell">$ sudo apt-get git</code></pre><h3 id="安装-Composer"><a href="#安装-Composer" class="headerlink" title="安装 Composer"></a>安装 Composer</h3><pre class=" language-lang-shell"><code class="language-lang-shell">$ php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;$ php -r &quot;if (hash_file(&#039;SHA384&#039;, &#039;composer-setup.php&#039;) === &#039;93b54496392c062774670ac18b134c3b3a95e5a5e5c8f1a9f115f203b75bf9a129d5daa8ba6a13e2cc8a1da0806388a8&#039;) { echo &#039;Installer verified&#039;; } else { echo &#039;Installer corrupt&#039;; unlink(&#039;composer-setup.php&#039;); } echo PHP_EOL;&quot;$ php composer-setup.php$ php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;$ sudo mv composer.phar /usr/bin/composer</code></pre><h3 id="安装-Certbot"><a href="#安装-Certbot" class="headerlink" title="安装 Certbot"></a>安装 Certbot</h3><pre class=" language-lang-shell"><code class="language-lang-shell">$ sudo apt-get update$ sudo apt-get install software-properties-common$ sudo add-apt-repository ppa:certbot/certbot$ sudo apt-get update$ sudo apt-get install python-certbot-nginx</code></pre><p>给项目设置证书，此命令会自动设置 nginx 配置，无需手动设置。</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ sudo certbot --nginx</code></pre><h3 id="设置部署公钥"><a href="#设置部署公钥" class="headerlink" title="设置部署公钥"></a>设置部署公钥</h3><p>为了方便部署等，这一步必须要设置，首先生成 <code>ssh-key</code></p><pre class=" language-lang-shell"><code class="language-lang-shell">$ ssh-keygen -t rsa -b 4096</code></pre><p>将对应的公钥复制，并在对应的项目仓库部署公钥处设置读权限</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ cat ~/.ssh/id_rsa.pub</code></pre><h3 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h3><pre class=" language-lang-shell"><code class="language-lang-shell">$ sudo apt-get install redis-server</code></pre><p>使用</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ redis-cli</code></pre><h3 id="安装项目"><a href="#安装项目" class="headerlink" title="安装项目"></a>安装项目</h3><p>下载项目</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ cd /var/www$ git clone git@....</code></pre><p>设置项目访问权限</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ chown -R www-data:www-data {project_directory}</code></pre><p>&gt; 切忌：不要将项目权限设置为 <strong>777</strong>，项目权限只能设置为 <strong>755</strong></p><p>安装项目依赖</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ composer install -vvv</code></pre><p>设置项目配置</p><pre class=" language-lang-shell"><code class="language-lang-shell">$ cp .env.example .env</code></pre><p> 来自：<a href="https://blog.csdn.net/qq175023117/article/details/84935300">https://blog.csdn.net/qq175023117/article/details/84935300</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel5获取当前页面的路由与方法以及Request的用法</title>
      <link href="2019/03/17/laravel/laravel5%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%B7%AF%E7%94%B1%E4%B8%8E%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8ARequest%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>2019/03/17/laravel/laravel5%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%B7%AF%E7%94%B1%E4%B8%8E%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8ARequest%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="laravel5获取当前页面的路由与方法以及Request的用法"><a href="#laravel5获取当前页面的路由与方法以及Request的用法" class="headerlink" title="laravel5获取当前页面的路由与方法以及Request的用法"></a>laravel5获取当前页面的路由与方法以及Request的用法</h3><a id="more"></a><p><strong>下面给大家一段 获取当前页面的路由与方法的代码：</strong></p><pre><code>$route = app('request')-&gt;route();if ($route) {    $action = app('request')-&gt;route()-&gt;getAction();    $controller = '@';    if (isset($action['controller'])) {       $controller = class_basename($action['controller']);    }    list($routeControllerName, $routeActionName) = explode('@', $controller);}</code></pre><p>最后获取的$routeControllerName为控制器的名字，如：IndexController</p><p>最后获取的$routeActionName为控制器中方法名，如：index</p><h2 id="Request用法："><a href="#Request用法：" class="headerlink" title="Request用法："></a>Request用法：</h2><pre><code>// url: http://xx.com/aa/bb Request::url();// 路径: /aa/bb Request::path();// 获取请求 Uri: /aa/bb/?c=d Request::getRequestUri();// 返回用户的 IP Request::ip();// 获取 Uri: http://xx.com/aa/bb/?c=d Request::getUri();// 获取查询字符串: c=d Request::getQueryString();// 获取请求端口 (例如 80, 443 等等) Request::getPort();// 判断当前请求的 URI 是否可被匹配 Request::is('foo/*');// 获取 URI 的分段值 (索引从 1 开始) Request::segment(1);// 从请求中取回头部信息 Request::header('Content-Type');// 从请求中取回服务器变量 Request::server('PATH_INFO');// 判断请求是否是 AJAX 请求 Request::ajax();// 判断请求是否使用 HTTPS Request::secure();// 获取请求方法 Request::method();// 判断请求方法是否是指定类型的 Request::isMethod('post');// 获取原始的 POST 数据 Request::instance()-&gt;getContent();// 获取请求要求返回的格式 Request::format();// 判断 HTTP Content-Type 头部信息是否包含 */json Request::isJson();// 判断 HTTP Accept 头部信息是否为 application/json Request::wantsJson();</code></pre><hr><p> 来自：<a href="https://blog.csdn.net/qq175023117/article/details/81948900">https://blog.csdn.net/qq175023117/article/details/81948900</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自我介绍</title>
      <link href="2019/03/16/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
      <url>2019/03/16/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p> WXiangQian，王向前，男，河北省石家庄人。<br> 工作地点：北京。<br> 岗位：PHP开发工程师。<br> CSDN博客专家。<br> 联系方式：<br>    qq:175023117<br> <a href="https://wxiangqian.blog.csdn.net">CSDN博客地址</a>!<br> <a href="https://juejin.im/user/5d0c3900f265da1b5d57b2eb">掘金地址</a>!<br> <a href="https://github.com/WXiangQian">GitHub地址</a>! </p><p> PHP开发工程师分享各种实战经验、降低学习成本。</p><ul><li>具有 SaaS 平台、B2B2C、在线教育、营销活动经验</li><li>多次参与优化以及重构现有系统，支撑业务进一步的发展</li><li>具备较强的学习能力，了解新的技术发展方向</li><li>逻辑思维严密，问题分析透彻全面</li></ul><ol><li>熟练使用 Laravel、Lumen 以及 ThinkPHP 框架开发</li><li>熟练掌握 PHP 设计模式、OOP 特性、PSR 规范、Trait 类</li><li>熟练开发 Api 接口以及编写 Swagger 文档、ShowDoc 文档、单元测试</li><li>熟练使用 MySQL，SQL 查询以及优化、ORM 查询操作、数据库索引的设计</li><li>熟练使用 Git 分支管理以及开发,熟知 Git Flow 工作流</li><li>熟练掌握 Linux 系统的基本命令，LNMP 环境的搭建、配置以及更改</li><li>熟练使用 Redis、MongoDB 等技术，掌握 Redis 五种数据类型的实战</li><li>熟练对接第三方平台，如:高德、阿里云、小米推送、银联支付、海尔金融、网易易盾等</li><li>熟练开发 Composer 包（laravel-push、laravel-dingtalk）</li><li>熟悉 HTML、CSS、JavaScript、Ajax、jQuery、Bootstrap、Layui</li><li>熟悉微信小程序、微信公众号、微信支付</li><li>掌握 Python 爬虫、laravel-mix</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
